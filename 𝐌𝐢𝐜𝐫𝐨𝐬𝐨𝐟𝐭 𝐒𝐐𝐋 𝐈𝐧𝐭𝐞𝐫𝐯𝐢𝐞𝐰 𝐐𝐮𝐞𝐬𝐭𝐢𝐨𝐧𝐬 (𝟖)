                                                                    # 𝐌𝐢𝐜𝐫𝐨𝐬𝐨𝐟𝐭 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧𝐬

## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐1:- 𝐘𝐨𝐮'𝐫𝐞 𝐠𝐢𝐯𝐞𝐧 𝐚 𝐥𝐢𝐬𝐭 𝐨𝐟 𝐧𝐮𝐦𝐛𝐞𝐫𝐬 𝐫𝐞𝐩𝐫𝐞𝐬𝐞𝐧𝐭𝐢𝐧𝐠 𝐭𝐡𝐞 𝐧𝐮𝐦𝐛𝐞𝐫 𝐨𝐟 𝐞𝐦𝐚𝐢𝐥𝐬 𝐢𝐧 𝐭𝐡𝐞 𝐢𝐧𝐛𝐨𝐱 𝐨𝐟 𝐌𝐢𝐜𝐫𝐨𝐬𝐨𝐟𝐭 𝐎𝐮𝐭𝐥𝐨𝐨𝐤 𝐮𝐬𝐞𝐫𝐬. 𝐁𝐞𝐟𝐨𝐫𝐞 𝐭𝐡𝐞 𝐏𝐫𝐨𝐝𝐮𝐜𝐭 𝐌𝐚𝐧𝐚𝐠𝐞𝐦𝐞𝐧𝐭 𝐭𝐞𝐚𝐦 𝐜𝐚𝐧 𝐬𝐭𝐚𝐫𝐭 𝐝𝐞𝐯𝐞𝐥𝐨𝐩𝐢𝐧𝐠 
𝐟𝐞𝐚𝐭𝐮𝐫𝐞𝐬 𝐫𝐞𝐥𝐚𝐭𝐞𝐝 𝐭𝐨 𝐛𝐮𝐥𝐤-𝐝𝐞𝐥𝐞𝐭𝐢𝐧𝐠 𝐞𝐦𝐚𝐢𝐥 𝐨𝐫 𝐚𝐜𝐡𝐢𝐞𝐯𝐢𝐧𝐠 𝐢𝐧𝐛𝐨𝐱 𝐳𝐞𝐫𝐨, 𝐭𝐡𝐞𝐲 𝐬𝐢𝐦𝐩𝐥𝐲 𝐰𝐚𝐧𝐭 𝐭𝐨 𝐟𝐢𝐧𝐝 𝐭𝐡𝐞 𝐦𝐞𝐚𝐧, 𝐦𝐞𝐝𝐢𝐚𝐧, 𝐚𝐧𝐝 𝐦𝐨𝐝𝐞 𝐟𝐨𝐫 𝐭𝐡𝐞 𝐞𝐦𝐚𝐢𝐥𝐬.

𝐃𝐢𝐬𝐩𝐥𝐚𝐲 𝐭𝐡𝐞 𝐨𝐮𝐭𝐩𝐮𝐭 𝐨𝐟 𝐦𝐞𝐚𝐧, 𝐦𝐞𝐝𝐢𝐚𝐧 𝐚𝐧𝐝 𝐦𝐨𝐝𝐞 (𝐢𝐧 𝐭𝐡𝐢𝐬 𝐨𝐫𝐝𝐞𝐫), 𝐰𝐢𝐭𝐡 𝐭𝐡𝐞 𝐦𝐞𝐚𝐧 𝐫𝐨𝐮𝐧𝐝𝐞𝐝 𝐭𝐨 𝐭𝐡𝐞 𝐧𝐞𝐚𝐫𝐞𝐬𝐭 𝐢𝐧𝐭𝐞𝐠𝐞𝐫. 𝐈𝐭 𝐬𝐡𝐨𝐮𝐥𝐝 𝐛𝐞 𝐚𝐬𝐬𝐮𝐦𝐞𝐝 𝐭𝐡𝐚𝐭 𝐭𝐡𝐞𝐫𝐞 𝐚𝐫𝐞 𝐧𝐨 𝐭𝐢𝐞𝐬 𝐟𝐨𝐫 𝐭𝐡𝐞 𝐦𝐨𝐝𝐞.
*/

## 𝐏𝐮𝐫𝐜𝐡𝐚𝐬𝐞𝐬 𝐓𝐚𝐛𝐥𝐞
CREATE TABLE inbox_stats (
    user_id INT PRIMARY KEY,
    email_count INT CHECK (email_count >= 0)
);

## 𝐏𝐮𝐫𝐜𝐡𝐚𝐬𝐞𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚
INSERT INTO inbox_stats (user_id, email_count)
VALUES
(123, 100),
(234, 200),
(345, 300),
(456, 200),
(567, 200);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+------+--------+------+
|𝐦𝐞𝐚𝐧 | 𝐦𝐞𝐝𝐢𝐚𝐧 |𝐦𝐨𝐝𝐞 |
+------+--------+------+
| 200  |  200   | 200  |
+------+--------+------+

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟐:-  𝐀𝐬 𝐚 𝐃𝐚𝐭𝐚 𝐀𝐧𝐚𝐥𝐲𝐬𝐭 𝐚𝐭 𝐌𝐢𝐜𝐫𝐨𝐬𝐨𝐟𝐭, 𝐲𝐨𝐮 𝐚𝐫𝐞 𝐭𝐚𝐬𝐤𝐞𝐝 𝐰𝐢𝐭𝐡 𝐚𝐧𝐚𝐥𝐲𝐳𝐢𝐧𝐠 𝐭𝐡𝐞 𝐬𝐚𝐥𝐞𝐬 𝐩𝐞𝐫𝐟𝐨𝐫𝐦𝐚𝐧𝐜𝐞 𝐨𝐟 𝐝𝐢𝐟𝐟𝐞𝐫𝐞𝐧𝐭 𝐬𝐨𝐟𝐭𝐰𝐚𝐫𝐞 𝐩𝐫𝐨𝐝𝐮𝐜𝐭𝐬 𝐨𝐯𝐞𝐫 𝐭𝐡𝐞 𝐲𝐞𝐚𝐫𝐬.
𝐓𝐡𝐞 𝐚𝐧𝐚𝐥𝐲𝐬𝐢𝐬 𝐫𝐞𝐪𝐮𝐢𝐫𝐞𝐬 𝐲𝐨𝐮 𝐭𝐨 𝐟𝐢𝐥𝐭𝐞𝐫 𝐨𝐮𝐭 𝐫𝐞𝐜𝐨𝐫𝐝𝐬 𝐟𝐫𝐨𝐦 𝐭𝐡𝐞 '𝐒𝐚𝐥𝐞𝐬' 𝐝𝐚𝐭𝐚𝐛𝐚𝐬𝐞 𝐰𝐡𝐞𝐫𝐞 𝐭𝐡𝐞 '𝐩𝐫𝐨𝐝𝐮𝐜𝐭_𝐭𝐲𝐩𝐞' 𝐢𝐬 '𝐬𝐨𝐟𝐭𝐰𝐚𝐫𝐞', 𝐭𝐡𝐞 '𝐬𝐚𝐥𝐞𝐬_𝐲𝐞𝐚𝐫' 𝐢𝐬 𝐠𝐫𝐞𝐚𝐭𝐞𝐫 𝐭𝐡𝐚𝐧 𝟐𝟎𝟏𝟓, 
𝐚𝐧𝐝 𝐭𝐡𝐞 '𝐬𝐚𝐥𝐞𝐬_𝐫𝐞𝐠𝐢𝐨𝐧' 𝐢𝐬 𝐧𝐨𝐭 '𝐄𝐮𝐫𝐨𝐩𝐞'.
*/

## 𝐒𝐚𝐥𝐞𝐬 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE Sales (
    sales_id INT PRIMARY KEY,
    customer_id VARCHAR(10),
    product_id VARCHAR(10),
    product_type VARCHAR(20),
    sales_year INT CHECK (sales_year >= 1900),
    sales_region VARCHAR(50),
    units_sold INT CHECK (units_sold >= 0)
);

## 𝐒𝐚𝐥𝐞𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO Sales (sales_id, customer_id, product_id, product_type, sales_year, sales_region, units_sold)
VALUES
(1, 'AB123', 'S1001', 'Software', 2022, 'North America', 150),
(2, 'AD768', 'S1002', 'Hardware', 2021, 'Europe', 65),
(3, 'AB123', 'S1003', 'Software', 2020, 'Asia', 200),
(4, 'BD672', 'S1001', 'Software', 2016, 'Europe', 100),
(5, 'CD980', 'S1003', 'Software', 2015, 'North America', 80),
(6, 'AB123', 'S1002', 'Software', 2022, 'Europe', 120),
(7, 'AD768', 'S1001', 'Software', 2019, 'Asia', 85);


## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+----------+-------------+------------+--------------+------------+---------------+------------+
| 𝐬𝐚𝐥𝐞𝐬_𝐢𝐝  | 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫_𝐢𝐝 | 𝐩𝐫𝐨𝐝𝐮𝐜𝐭_𝐢𝐝  | 𝐩𝐫𝐨𝐝𝐮𝐜𝐭_𝐭𝐲𝐩𝐞 | 𝐬𝐚𝐥𝐞𝐬_𝐲𝐞𝐚𝐫  | 𝐬𝐚𝐥𝐞𝐬_𝐫𝐞𝐠𝐢𝐨𝐧   | 𝐮𝐧𝐢𝐭𝐬_𝐬𝐨𝐥𝐝  |
+----------+-------------+------------+--------------+------------+---------------+------------+
|    1     |    AB123    |   S1001    |   Software   |    2022    | North America |    150     |
+----------+-------------+------------+--------------+------------+---------------+------------+
|    3     |    AB123    |   S1003    |   Software   |    2020    |     Asia      |    200     |
+----------+-------------+------------+--------------+------------+---------------+------------+
|    7     |    AD768    |   S1001    |   Software   |    2019    |     Asia      |     85     |
+----------+-------------+------------+--------------+------------+---------------+------------+

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟑:- 𝐌𝐢𝐜𝐫𝐨𝐬𝐨𝐟𝐭 𝐇𝐑 𝐭𝐞𝐚𝐦 𝐨𝐟𝐭𝐞𝐧 𝐭𝐫𝐚𝐜𝐤𝐬 𝐭𝐡𝐞 𝐩𝐫𝐨𝐠𝐫𝐞𝐬𝐬 𝐚𝐧𝐝 𝐩𝐞𝐫𝐟𝐨𝐫𝐦𝐚𝐧𝐜𝐞 𝐨𝐟 𝐢𝐭𝐬 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬. 𝐄𝐚𝐜𝐡 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞 𝐢𝐬 𝐜𝐥𝐚𝐬𝐬𝐢𝐟𝐢𝐞𝐝 𝐢𝐧𝐭𝐨 𝐝𝐢𝐟𝐟𝐞𝐫𝐞𝐧𝐭 𝐝𝐞𝐩𝐚𝐫𝐭𝐦𝐞𝐧𝐭𝐬 𝐛𝐚𝐬𝐞𝐝 𝐨𝐧 𝐭𝐡𝐞𝐢𝐫 𝐣𝐨𝐛 𝐝𝐞𝐬𝐜𝐫𝐢𝐩𝐭𝐢𝐨𝐧. 
𝐇𝐨𝐰𝐞𝐯𝐞𝐫, 𝐫𝐞𝐜𝐞𝐧𝐭𝐥𝐲 𝐚 𝐥𝐨𝐭 𝐨𝐟 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐡𝐚𝐯𝐞 𝐣𝐨𝐢𝐧𝐞𝐝 𝐝𝐞𝐩𝐚𝐫𝐭𝐦𝐞𝐧𝐭𝐬 𝐭𝐡𝐚𝐭 𝐚𝐫𝐞 𝐫𝐞𝐥𝐚𝐭𝐞𝐝 𝐭𝐨 𝐀𝐫𝐭𝐢𝐟𝐢𝐜𝐢𝐚𝐥 𝐈𝐧𝐭𝐞𝐥𝐥𝐢𝐠𝐞𝐧𝐜𝐞. 𝐀𝐬 𝐚 𝐝𝐚𝐭𝐚𝐛𝐚𝐬𝐞 𝐨𝐟𝐟𝐢𝐜𝐞𝐫, 𝐲𝐨𝐮 𝐚𝐫𝐞 𝐚𝐬𝐤𝐞𝐝 𝐭𝐨 𝐟𝐢𝐥𝐭𝐞𝐫 𝐭𝐡𝐞 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞 𝐫𝐞𝐜𝐨𝐫𝐝𝐬 𝐟𝐨𝐫
𝐚𝐧𝐲 𝐝𝐞𝐩𝐚𝐫𝐭𝐦𝐞𝐧𝐭 𝐭𝐡𝐚𝐭 𝐢𝐧𝐜𝐥𝐮𝐝𝐞𝐬 𝐭𝐡𝐞 𝐰𝐨𝐫𝐝 '𝐀𝐈' 𝐢𝐧 𝐢𝐭𝐬 𝐝𝐞𝐬𝐜𝐫𝐢𝐩𝐭𝐢𝐨𝐧.
*/

## 𝐄𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE Employees (
    emp_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(100) UNIQUE,
    job_description VARCHAR(100)
);

## 𝐄𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO Employees (emp_id, first_name, last_name, email, job_description)
VALUES
(3521, 'John', 'Smith', 'johnsmith@microsoft.com', 'Software Engineer - AI'),
(4678, 'Jane', 'Doe', 'janedoe@microsoft.com', 'Product Manager - AI'),
(5732, 'Mike', 'Jones', 'mikejones@microsoft.com', 'Data Analyst'),
(8391, 'Emma', 'Williams', 'emmawilliams@microsoft.com', 'AI Research Scientist'),
(5347, 'Bob', 'Johnson', 'bobjohnson@microsoft.com', 'Network Engineer');


## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+--------+------------+-----------+----------------------------+--------------------------+
|  𝐞𝐦𝐩_𝐢𝐝 | 𝐟𝐢𝐫𝐬𝐭_𝐧𝐚𝐦𝐞 | 𝐥𝐚𝐬𝐭_𝐧𝐚𝐦𝐞 | 𝐞𝐦𝐚𝐢𝐥                      | 𝐣𝐨𝐛_𝐝𝐞𝐬𝐜𝐫𝐢𝐩𝐭𝐢𝐨𝐧           |
+--------+------------+-----------+----------------------------+--------------------------+
| 3521   | John       | Smith     | johnsmith@microsoft.com    | Software Engineer - AI   |
| 4678   | Jane       | Doe       | janedoe@microsoft.com      | Product Manager - AI     |
| 8391   | Emma       | Williams  | emmawilliams@microsoft.com | AI Research Scientist    |
+--------+------------+-----------+----------------------------+--------------------------+


---------------------------------------------------------------------------------------------------------------------------------------------------------------------


## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟒:- 𝐒𝐞𝐥𝐞𝐜𝐭 𝐭𝐡𝐞 𝐦𝐨𝐬𝐭 𝐩𝐨𝐩𝐮𝐥𝐚𝐫 𝐜𝐥𝐢𝐞𝐧𝐭_𝐢𝐝 𝐛𝐚𝐬𝐞𝐝 𝐨𝐧 𝐚 𝐜𝐨𝐮𝐧𝐭 𝐨𝐟 𝐭𝐡𝐞 𝐧𝐮𝐦𝐛𝐞𝐫 𝐨𝐟 𝐮𝐬𝐞𝐫𝐬 𝐰𝐡𝐨 𝐡𝐚𝐯𝐞 𝐚𝐭 𝐥𝐞𝐚𝐬𝐭 𝟓𝟎% 𝐨𝐟 𝐭𝐡𝐞𝐢𝐫 𝐞𝐯𝐞𝐧𝐭𝐬 𝐟𝐫𝐨𝐦 𝐭𝐡𝐞
𝐟𝐨𝐥𝐥𝐨𝐰𝐢𝐧𝐠 𝐥𝐢𝐬𝐭: '𝐯𝐢𝐝𝐞𝐨 𝐜𝐚𝐥𝐥 𝐫𝐞𝐜𝐞𝐢𝐯𝐞𝐝', '𝐯𝐢𝐝𝐞𝐨 𝐜𝐚𝐥𝐥 𝐬𝐞𝐧𝐭', '𝐯𝐨𝐢𝐜𝐞 𝐜𝐚𝐥𝐥 𝐫𝐞𝐜𝐞𝐢𝐯𝐞𝐝', '𝐯𝐨𝐢𝐜𝐞 𝐜𝐚𝐥𝐥 𝐬𝐞𝐧𝐭'.
*/

## 𝐅𝐚𝐜𝐭 𝐞𝐯𝐞𝐧𝐭 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE fact_event (
id BIGINT PRIMARY KEY,
time_id DATETIME, 
user_id VARCHAR(50), 
customer_id VARCHAR(50), 
client_id VARCHAR(50), 
event_type VARCHAR(50), 
event_id BIGINT);

## 𝐒𝐚𝐦𝐩𝐥𝐞 𝐟𝐚𝐜𝐭_𝐞𝐯𝐞𝐧𝐭 𝐝𝐚𝐭𝐚:- 
INSERT INTO fact_event (id, time_id, user_id, customer_id, client_id, event_type, event_id) 
VALUES (1, '2024-02-01 10:00:00', 'U1', 'C1', 'CL1', 'video call received', 101), 
(2, '2024-02-01 10:05:00', 'U1', 'C1', 'CL1', 'video call sent', 102), 
(3, '2024-02-01 10:10:00', 'U1', 'C1', 'CL1', 'message sent', 103), 
(4, '2024-02-01 11:00:00', 'U2', 'C2', 'CL2', 'voice call received', 104), 
(5, '2024-02-01 11:10:00', 'U2', 'C2', 'CL2', 'voice call sent', 105), 
(6, '2024-02-01 11:20:00', 'U2', 'C2', 'CL2', 'message received', 106),
(7, '2024-02-01 12:00:00', 'U3', 'C3', 'CL1', 'video call sent', 107), 
(8, '2024-02-01 12:15:00', 'U3', 'C3', 'CL1', 'voice call received', 108), 
(9, '2024-02-01 12:30:00', 'U3', 'C3', 'CL1', 'voice call sent', 109), 
(10, '2024-02-01 12:45:00', 'U3', 'C3', 'CL1', 'video call received', 110);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-----------+
|  𝐂𝐥𝐢𝐞𝐧𝐭_𝐢𝐝 |
+-----------+
|    CL1    |
+-----------+

---------------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟓:- 𝐅𝐢𝐧𝐝 𝐭𝐡𝐞 𝐧𝐮𝐦𝐛𝐞𝐫 𝐨𝐟 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐰𝐡𝐨 𝐫𝐞𝐜𝐞𝐢𝐯𝐞𝐝 𝐭𝐡𝐞 𝐛𝐨𝐧𝐮𝐬 𝐚𝐧𝐝 𝐰𝐡𝐨 𝐝𝐢𝐝𝐧'𝐭. 𝐁𝐨𝐧𝐮𝐬 𝐯𝐚𝐥𝐮𝐞𝐬 𝐢𝐧 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞 𝐭𝐚𝐛𝐥𝐞 𝐚𝐫𝐞 𝐜𝐨𝐫𝐫𝐮𝐩𝐭𝐞𝐝 𝐬𝐨 𝐲𝐨𝐮 𝐬𝐡𝐨𝐮𝐥𝐝 𝐮𝐬𝐞 𝐯𝐚𝐥𝐮𝐞𝐬 
𝐟𝐫𝐨𝐦 𝐭𝐡𝐞 𝐛𝐨𝐧𝐮𝐬 𝐭𝐚𝐛𝐥𝐞. 𝐁𝐞 𝐚𝐰𝐚𝐫𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐟𝐚𝐜𝐭 𝐭𝐡𝐚𝐭 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞 𝐜𝐚𝐧 𝐫𝐞𝐜𝐞𝐢𝐯𝐞 𝐦𝐨𝐫𝐞 𝐭𝐡𝐚𝐧 𝐨𝐧𝐞 𝐛𝐨𝐧𝐮𝐬. 𝐎𝐮𝐭𝐩𝐮𝐭 𝐯𝐚𝐥𝐮𝐞 𝐢𝐧𝐬𝐢𝐝𝐞 𝐡𝐚𝐬_𝐛𝐨𝐧𝐮𝐬 𝐜𝐨𝐥𝐮𝐦𝐧 (𝟏 𝐢𝐟 𝐭𝐡𝐞𝐲 𝐡𝐚𝐝 𝐛𝐨𝐧𝐮𝐬, 𝟎 𝐢𝐟 𝐧𝐨𝐭) 
𝐚𝐥𝐨𝐧𝐠 𝐰𝐢𝐭𝐡 𝐭𝐡𝐞 𝐜𝐨𝐫𝐫𝐞𝐬𝐩𝐨𝐧𝐝𝐢𝐧𝐠 𝐧𝐮𝐦𝐛𝐞𝐫 𝐨𝐟 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐟𝐨𝐫 𝐞𝐚𝐜𝐡.
*/


## 𝐄𝐦𝐩𝐥𝐨𝐲𝐞𝐞_𝐝𝐞𝐭𝐚𝐢𝐥𝐬 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE employee_details (
id BIGINT PRIMARY KEY, 
first_name VARCHAR(50), 
last_name VARCHAR(50),
age BIGINT, sex VARCHAR(10),
email VARCHAR(100), 
address VARCHAR(100), 
city VARCHAR(50),
department VARCHAR(50),
employee_title VARCHAR(50), 
manager_id BIGINT, 
salary BIGINT,
target BIGINT, 
bonus BIGINT);

## 𝐒𝐚𝐦𝐩𝐥𝐞 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞_𝐝𝐞𝐭𝐚𝐢𝐥𝐬 𝐝𝐚𝐭𝐚:- 
INSERT INTO employee_details (id, first_name, last_name, age, sex, email, address, city, department, employee_title, manager_id, salary, target, bonus)
VALUES (1, 'John', 'Doe', 30, 'Male', 'john.doe@example.com', '123 Elm St', 'New York', 'IT', 'Engineer', 101, 70000, 80000, 5000),
(2, 'Jane', 'Smith', 28, 'Female', 'jane.smith@example.com', '456 Oak St', 'Los Angeles', 'HR', 'Manager', 102, 75000, 90000, NULL),
(3, 'Alice', 'Johnson', 35, 'Female', 'alice.johnson@example.com', '789 Pine St', 'Chicago', 'Finance', 'Analyst', 103, 80000, 95000, NULL),
(4, 'Bob', 'Brown', 40, 'Male', 'bob.brown@example.com', '321 Maple St', 'Boston', 'IT', 'Director', 104, 120000, 130000, NULL),
(5, 'Charlie', 'Davis', 25, 'Male', 'charlie.davis@example.com', '654 Cedar St', 'Seattle', 'Marketing', 'Specialist', 105, 50000, 60000, NULL);

## 𝐁𝐨𝐧𝐮𝐬 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE bonus (
worker_ref_id BIGINT, 
bonus_amount BIGINT, 
bonus_date DATETIME);

## 𝐒𝐚𝐦𝐩𝐥𝐞 𝐛𝐨𝐧𝐮𝐬 𝐝𝐚𝐭𝐚:- 
INSERT INTO bonus (worker_ref_id, bonus_amount, bonus_date)
VALUES (1, 5000, '2024-01-15'),(1, 3000, '2024-02-20'),
(3, 2000, '2024-03-10'),(5, 1000, '2024-04-05');


## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-----------+----------------+
| 𝐡𝐚𝐬_𝐛𝐨𝐧𝐮𝐬 | 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞_𝐜𝐨𝐮𝐧𝐭 |
+-----------+----------------+
|     0     |       2        |
|     1     |       3        |
+-----------+----------------+

-----------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟔:- 𝐂𝐨𝐧𝐬𝐢𝐝𝐞𝐫𝐢𝐧𝐠 𝐚 𝐝𝐚𝐭𝐚𝐬𝐞𝐭 𝐭𝐡𝐚𝐭 𝐭𝐫𝐚𝐜𝐤𝐬 𝐮𝐬𝐞𝐫 𝐢𝐧𝐭𝐞𝐫𝐚𝐜𝐭𝐢𝐨𝐧𝐬 𝐰𝐢𝐭𝐡 𝐝𝐢𝐟𝐟𝐞𝐫𝐞𝐧𝐭 𝐜𝐥𝐢𝐞𝐧𝐭𝐬, 𝐢𝐝𝐞𝐧𝐭𝐢𝐟𝐲 𝐰𝐡𝐢𝐜𝐡 𝐜𝐥𝐢𝐞𝐧𝐭𝐬 𝐡𝐚𝐯𝐞 𝐮𝐬𝐞𝐫𝐬 𝐰𝐡𝐨 𝐚𝐫𝐞 𝐞𝐱𝐜𝐥𝐮𝐬𝐢𝐯𝐞𝐥𝐲 𝐥𝐨𝐲𝐚𝐥 𝐭𝐨 𝐭𝐡𝐞𝐦 (𝐢.𝐞., 𝐭𝐡𝐞𝐲 𝐝𝐨𝐧'𝐭 𝐢𝐧𝐭𝐞𝐫𝐚𝐜𝐭 𝐰𝐢𝐭𝐡 𝐚𝐧𝐲 𝐨𝐭𝐡𝐞𝐫 𝐜𝐥𝐢𝐞𝐧𝐭𝐬).

𝐅𝐨𝐫 𝐞𝐚𝐜𝐡 𝐨𝐟 𝐭𝐡𝐞𝐬𝐞 𝐜𝐥𝐢𝐞𝐧𝐭𝐬, 𝐜𝐚𝐥𝐜𝐮𝐥𝐚𝐭𝐞 𝐭𝐡𝐞 𝐧𝐮𝐦𝐛𝐞𝐫 𝐨𝐟 𝐬𝐮𝐜𝐡 𝐞𝐱𝐜𝐥𝐮𝐬𝐢𝐯𝐞 𝐮𝐬𝐞𝐫𝐬. 𝐓𝐡𝐞 𝐨𝐮𝐭𝐩𝐮𝐭 𝐬𝐡𝐨𝐮𝐥𝐝 𝐢𝐧𝐜𝐥𝐮𝐝𝐞 𝐭𝐡𝐞 𝐜𝐥𝐢𝐞𝐧𝐭_𝐢𝐝 𝐚𝐧𝐝 𝐭𝐡𝐞 𝐜𝐨𝐫𝐫𝐞𝐬𝐩𝐨𝐧𝐝𝐢𝐧𝐠 𝐜𝐨𝐮𝐧𝐭 𝐨𝐟 𝐞𝐱𝐜𝐥𝐮𝐬𝐢𝐯𝐞 𝐮𝐬𝐞𝐫𝐬.
*/

## 𝐦𝐞𝐞𝐭𝐮𝐩_𝐞𝐯𝐞𝐧𝐭𝐬 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE meetup_events (
client_id VARCHAR(255), 
customer_id VARCHAR(255), 
event_id BIGINT, 
event_type VARCHAR(255), 
id BIGINT PRIMARY KEY, 
time_id DATETIME,
user_id VARCHAR(255));

## 𝐦𝐞𝐞𝐭𝐮𝐩_𝐞𝐯𝐞𝐧𝐭𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO meetup_events (client_id, customer_id, event_id, event_type, id, time_id, user_id) 
VALUES ('C001', 'CU001', 101, 'click', 1, '2025-01-01 10:00:00', 'U001'),
('C001', 'CU002', 102, 'view', 2, '2025-01-01 11:00:00', 'U002'),
('C002', 'CU003', 103, 'click', 3, '2025-01-02 10:00:00', 'U003'),
('C002', 'CU003', 104, 'view', 4, '2025-01-02 11:00:00', 'U003'), 
('C003', 'CU004', 105, 'click', 5, '2025-01-03 10:00:00', 'U004'), 
('C001', 'CU001', 106, 'view', 6, '2025-01-04 10:00:00', 'U001'),
('C003', 'CU005', 107, 'click', 7, '2025-01-05 10:00:00', 'U005'), 
('C004', 'CU006', 108, 'view', 8, '2025-01-06 10:00:00', 'U006'),
('C004', 'CU006', 109, 'click', 9, '2025-01-07 10:00:00', 'U006'),
('C001', 'CU007', 110, 'click', 10, '2025-01-08 10:00:00', 'U007');



## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-----------+-------------------+
| 𝐜𝐥𝐢𝐞𝐧𝐭_𝐢𝐝 | 𝐞𝐱𝐜𝐥𝐮𝐬𝐢𝐯𝐞_𝐮𝐬𝐞𝐫𝐬_𝐜𝐧𝐭  |
+-----------+-------------------+
| C001      | 3                 |
| C003      | 2                 |
| C004      | 1                 |
| C002      | 1                 |
+-----------+-------------------+

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟕:- 𝐖𝐫𝐢𝐭𝐞 𝐚 𝐪𝐮𝐞𝐫𝐲 𝐭𝐡𝐚𝐭 𝐫𝐞𝐭𝐮𝐫𝐧𝐬 𝐭𝐡𝐞 𝐜𝐨𝐦𝐩𝐚𝐧𝐲 (𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫 𝐢𝐝 𝐜𝐨𝐥𝐮𝐦𝐧) 𝐰𝐢𝐭𝐡 𝐡𝐢𝐠𝐡𝐞𝐬𝐭 𝐧𝐮𝐦𝐛𝐞𝐫 𝐨𝐟 𝐮𝐬𝐞𝐫𝐬 𝐭𝐡𝐚𝐭 𝐮𝐬𝐞 𝐝𝐞𝐬𝐤𝐭𝐨𝐩 𝐨𝐧𝐥𝐲.
*/

## 𝐅𝐚𝐜𝐭_𝐞𝐯𝐞𝐧𝐭𝐬 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE fact_events (
id INT PRIMARY KEY, 
time_id DATETIME, 
user_id VARCHAR(50), 
customer_id VARCHAR(50), 
client_id VARCHAR(50), 
event_type VARCHAR(50), 
event_id INT);


## 𝐟𝐚𝐜𝐭_𝐞𝐯𝐞𝐧𝐭𝐬 𝐬𝐚𝐦𝐩𝐥𝐞 𝐝𝐚𝐭𝐚:- 
INSERT INTO fact_events (id, time_id, user_id, customer_id, client_id, event_type, event_id) 
VALUES  (1, '2024-12-01 10:00:00', 'U1', 'C1', 'desktop', 'click', 101), 
(2, '2024-12-01 11:00:00', 'U2', 'C1', 'mobile', 'view', 102), 
(3, '2024-12-01 12:00:00', 'U3', 'C2', 'desktop', 'click', 103), 
(4, '2024-12-01 13:00:00', 'U1', 'C1', 'desktop', 'click', 104), 
(5, '2024-12-01 14:00:00', 'U2', 'C1', 'tablet', 'view', 105), 
(6, '2024-12-01 15:00:00', 'U4', 'C3', 'desktop', 'click', 106), 
(7, '2024-12-01 16:00:00', 'U3', 'C2', 'desktop', 'click', 107), 
(8, '2024-12-01 17:00:00', 'U5', 'C4', 'desktop', 'click', 108),
(9, '2024-12-01 18:00:00', 'U6', 'C4', 'mobile', 'view', 109), 
(10, '2024-12-01 19:00:00', 'U7', 'C5', 'desktop', 'click', 110);


## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-------------+------------------------+
| 𝐂𝐮𝐬𝐭𝐨𝐦𝐞𝐫_𝐢𝐝 | 𝐝𝐞𝐬𝐤𝐭𝐨𝐩_𝐨𝐧𝐥𝐲_𝐮𝐬𝐞𝐫_𝐜𝐨𝐮𝐧𝐭 |
+-------------+------------------------+
|     C2      |           1            |
+-------------+------------------------+

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟖:- 𝐅𝐢𝐧𝐝 𝐭𝐡𝐞 𝐭𝐨𝐭𝐚𝐥 𝐧𝐮𝐦𝐛𝐞𝐫 𝐨𝐟 𝐝𝐨𝐰𝐧𝐥𝐨𝐚𝐝𝐬 𝐟𝐨𝐫 𝐩𝐚𝐲𝐢𝐧𝐠 𝐚𝐧𝐝 𝐧𝐨𝐧-𝐩𝐚𝐲𝐢𝐧𝐠 𝐮𝐬𝐞𝐫𝐬 𝐛𝐲 𝐝𝐚𝐭𝐞. 𝐈𝐧𝐜𝐥𝐮𝐝𝐞 𝐨𝐧𝐥𝐲 𝐫𝐞𝐜𝐨𝐫𝐝𝐬 𝐰𝐡𝐞𝐫𝐞 𝐧𝐨𝐧-𝐩𝐚𝐲𝐢𝐧𝐠 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫𝐬 𝐡𝐚𝐯𝐞 𝐦𝐨𝐫𝐞 𝐝𝐨𝐰𝐧𝐥𝐨𝐚𝐝𝐬 𝐭𝐡𝐚𝐧 𝐩𝐚𝐲𝐢𝐧𝐠 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫𝐬. 

𝐓𝐡𝐞 𝐨𝐮𝐭𝐩𝐮𝐭 𝐬𝐡𝐨𝐮𝐥𝐝 𝐛𝐞 𝐬𝐨𝐫𝐭𝐞𝐝 𝐛𝐲 𝐞𝐚𝐫𝐥𝐢𝐞𝐬𝐭 𝐝𝐚𝐭𝐞 𝐟𝐢𝐫𝐬𝐭 𝐚𝐧𝐝 𝐜𝐨𝐧𝐭𝐚𝐢𝐧 𝟑 𝐜𝐨𝐥𝐮𝐦𝐧𝐬 𝐝𝐚𝐭𝐞, 𝐧𝐨𝐧-𝐩𝐚𝐲𝐢𝐧𝐠 𝐝𝐨𝐰𝐧𝐥𝐨𝐚𝐝𝐬, 𝐚𝐧𝐝 𝐩𝐚𝐲𝐢𝐧𝐠 𝐝𝐨𝐰𝐧𝐥𝐨𝐚𝐝𝐬. 
*/

- 𝐂𝐫𝐞𝐚𝐭𝐞 𝐭𝐚𝐛𝐥𝐞 - 1:-
CREATE TABLE ms_user_dimension (
 user_id INT PRIMARY KEY,
 acc_id INT
);

- 𝐂𝐫𝐞𝐚𝐭𝐞 𝐭𝐚𝐛𝐥𝐞 - 2:-
CREATE TABLE ms_acc_dimension (
 acc_id INT PRIMARY KEY,
 paying_customer VARCHAR(3) -- values: 'yes' or 'no'
);

- 𝐂𝐫𝐞𝐚𝐭𝐞 𝐭𝐚𝐛𝐥𝐞 - 3:-
CREATE TABLE ms_download_facts (
 date DATE,
 user_id INT,
 downloads INT
);

𝐃𝐚𝐭𝐚𝐬𝐞𝐭 𝐋𝐢𝐧𝐤:- https://drive.google.com/file/d/1tQDDLvRlsNLJcssOZ684-c1xARpC7oe4/view


## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭

+------------+----------------------+-----------------+
|    date    | non_paying_downloads | paying_downloads|
+------------+----------------------+-----------------+
| 2020-08-16 |         15           |        14       |
+------------+----------------------+-----------------+
| 2020-08-17 |         45           |         9       |
+------------+----------------------+-----------------+
| 2020-08-18 |         10           |         7       |
+------------+----------------------+-----------------+
| 2020-08-21 |         32           |        17       |
+------------+----------------------+-----------------+

--------------------------------------------------------------------------------------------------------------------------------------------------------------------


