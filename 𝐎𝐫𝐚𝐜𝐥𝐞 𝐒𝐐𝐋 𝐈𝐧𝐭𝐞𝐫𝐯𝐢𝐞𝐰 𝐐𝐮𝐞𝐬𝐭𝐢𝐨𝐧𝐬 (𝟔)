                                                              𝐎𝐫𝐚𝐜𝐥𝐞 𝐒𝐐𝐋 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧𝐬

## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝟏: 𝐖𝐡𝐨 𝐌𝐚𝐝𝐞 𝐐𝐮𝐨𝐭𝐚?
𝐀𝐬 𝐚 𝐝𝐚𝐭𝐚 𝐚𝐧𝐚𝐥𝐲𝐬𝐭 𝐨𝐧 𝐭𝐡𝐞 𝐎𝐫𝐚𝐜𝐥𝐞 𝐒𝐚𝐥𝐞𝐬 𝐎𝐩𝐞𝐫𝐚𝐭𝐢𝐨𝐧𝐬 𝐭𝐞𝐚𝐦, 𝐲𝐨𝐮 𝐚𝐫𝐞 𝐠𝐢𝐯𝐞𝐧 𝐚 
𝐥𝐢𝐬𝐭 𝐨𝐟 𝐬𝐚𝐥𝐞𝐬𝐩𝐞𝐨𝐩𝐥𝐞’𝐬 𝐝𝐞𝐚𝐥𝐬, 𝐚𝐧𝐝 𝐭𝐡𝐞 𝐚𝐧𝐧𝐮𝐚𝐥 𝐪𝐮𝐨𝐭𝐚 𝐭𝐡𝐞𝐲 𝐧𝐞𝐞𝐝 𝐭𝐨 𝐡𝐢𝐭.

𝐖𝐫𝐢𝐭𝐞 𝐚 𝐪𝐮𝐞𝐫𝐲 𝐭𝐡𝐚𝐭 𝐨𝐮𝐭𝐩𝐮𝐭𝐬 𝐞𝐚𝐜𝐡 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞 𝐢𝐝 𝐚𝐧𝐝 𝐰𝐡𝐞𝐭𝐡𝐞𝐫 𝐭𝐡𝐞𝐲 𝐡𝐢𝐭 𝐭𝐡𝐞 
𝐪𝐮𝐨𝐭𝐚 𝐨𝐫 𝐧𝐨𝐭 ('𝐲𝐞𝐬' 𝐨𝐫 '𝐧𝐨'). 𝐎𝐫𝐝𝐞𝐫 𝐭𝐡𝐞 𝐫𝐞𝐬𝐮𝐥𝐭𝐬 𝐛𝐲 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞 𝐢𝐝 𝐢𝐧 𝐚𝐬𝐜𝐞𝐧𝐝𝐢𝐧𝐠 𝐨𝐫𝐝𝐞𝐫.
*/

-- 𝐃𝐞𝐚𝐥𝐬 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE deals (
    employee_id INT,
    deal_size INT
);

-- 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐞𝐚𝐥𝐬 𝐃𝐚𝐭𝐚:- 
INSERT INTO deals (employee_id, deal_size) VALUES
(101, 400000),
(101, 300000),
(201, 500000),
(301, 500000);


-- 𝐒𝐚𝐥𝐞𝐬_𝐪𝐮𝐨𝐭𝐚𝐬 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE sales_quotas (
    employee_id INT,
    quota INT
);

-- 𝐒𝐚𝐦𝐩𝐥𝐞 𝐒𝐚𝐥𝐞𝐬_𝐪𝐮𝐨𝐭𝐚𝐬 𝐃𝐚𝐭𝐚:- 
INSERT INTO sales_quotas (employee_id, quota) VALUES
(101, 500000),
(201, 400000),
(301, 600000);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-------------+-------------+
|𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞_𝐢𝐝  | 𝐦𝐚𝐝𝐞_𝐪𝐮𝐨𝐭𝐚  |
+-------------+-------------+
|     101     |     yes     |
+-------------+-------------+
|     201     |     yes     |
+-------------+-------------+
|     301     |     no      |
+-------------+-------------+

-------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝟐:- 𝐀𝐬 𝐭𝐡𝐞 𝐒𝐚𝐥𝐞𝐬 𝐎𝐩𝐞𝐫𝐚𝐭𝐢𝐨𝐧𝐬 𝐀𝐧𝐚𝐥𝐲𝐬𝐭 𝐚𝐭 𝐎𝐫𝐚𝐜𝐥𝐞, 𝐲𝐨𝐮 𝐡𝐚𝐯𝐞 𝐛𝐞𝐞𝐧 𝐭𝐚𝐬𝐤𝐞𝐝 𝐰𝐢𝐭𝐡 𝐚𝐬𝐬𝐢𝐬𝐭𝐢𝐧𝐠 𝐭𝐡𝐞 𝐕𝐏 𝐨𝐟 𝐒𝐚𝐥𝐞𝐬 𝐢𝐧 𝐝𝐞𝐭𝐞𝐫𝐦𝐢𝐧𝐢𝐧𝐠 𝐭𝐡𝐞 𝐟𝐢𝐧𝐚𝐥 𝐜𝐨𝐦𝐩𝐞𝐧𝐬𝐚𝐭𝐢𝐨𝐧 
𝐞𝐚𝐫𝐧𝐞𝐝 𝐛𝐲 𝐞𝐚𝐜𝐡 𝐬𝐚𝐥𝐞𝐬𝐩𝐞𝐫𝐬𝐨𝐧 𝐟𝐨𝐫 𝐭𝐡𝐞 𝐲𝐞𝐚𝐫. 𝐓𝐡𝐞 𝐜𝐨𝐦𝐩𝐞𝐧𝐬𝐚𝐭𝐢𝐨𝐧 𝐬𝐭𝐫𝐮𝐜𝐭𝐮𝐫𝐞 𝐢𝐧𝐜𝐥𝐮𝐝𝐞𝐬 𝐚 𝐟𝐢𝐱𝐞𝐝 𝐛𝐚𝐬𝐞 𝐬𝐚𝐥𝐚𝐫𝐲, 𝐚 𝐜𝐨𝐦𝐦𝐢𝐬𝐬𝐢𝐨𝐧 𝐛𝐚𝐬𝐞𝐝 𝐨𝐧 𝐭𝐨𝐭𝐚𝐥 𝐝𝐞𝐚𝐥𝐬, 𝐚𝐧𝐝 𝐩𝐨𝐭𝐞𝐧𝐭𝐢𝐚𝐥
𝐚𝐜𝐜𝐞𝐥𝐞𝐫𝐚𝐭𝐨𝐫𝐬 𝐟𝐨𝐫 𝐞𝐱𝐜𝐞𝐞𝐝𝐢𝐧𝐠 𝐭𝐡𝐞𝐢𝐫 𝐪𝐮𝐨𝐭𝐚.

𝐄𝐚𝐜𝐡 𝐬𝐚𝐥𝐞𝐬𝐩𝐞𝐫𝐬𝐨𝐧 𝐞𝐚𝐫𝐧𝐬 𝐚 𝐟𝐢𝐱𝐞𝐝 𝐛𝐚𝐬𝐞 𝐬𝐚𝐥𝐚𝐫𝐲 𝐚𝐧𝐝 𝐚 𝐩𝐞𝐫𝐜𝐞𝐧𝐭𝐚𝐠𝐞 𝐨𝐟 𝐜𝐨𝐦𝐦𝐢𝐬𝐬𝐢𝐨𝐧 𝐨𝐧 𝐭𝐡𝐞𝐢𝐫 𝐭𝐨𝐭𝐚𝐥 𝐝𝐞𝐚𝐥𝐬. 𝐀𝐥𝐬𝐨, 𝐢𝐟 𝐭𝐡𝐞𝐲 𝐛𝐞𝐚𝐭 𝐭𝐡𝐞𝐢𝐫 𝐪𝐮𝐨𝐭𝐚, 𝐚𝐧𝐲 𝐬𝐚𝐥𝐞𝐬 𝐚𝐟𝐭𝐞𝐫 𝐭𝐡𝐚𝐭 𝐫𝐞𝐜𝐞𝐢𝐯𝐞 𝐚𝐧 𝐚𝐜𝐜𝐞𝐥𝐞𝐫𝐚𝐭𝐨𝐫, 
𝐰𝐡𝐢𝐜𝐡 𝐢𝐬 𝐣𝐮𝐬𝐭 𝐚 𝐡𝐢𝐠𝐡𝐞𝐫 𝐜𝐨𝐦𝐦𝐢𝐬𝐬𝐢𝐨𝐧 𝐫𝐚𝐭𝐞 𝐚𝐩𝐩𝐥𝐢𝐞𝐝 𝐭𝐨 𝐭𝐡𝐞𝐢𝐫 𝐜𝐨𝐦𝐦𝐢𝐬𝐬𝐢𝐨𝐧𝐬 𝐚𝐟𝐭𝐞𝐫 𝐭𝐡𝐞𝐲 𝐡𝐢𝐭 𝐭𝐡𝐞 𝐪𝐮𝐨𝐭𝐚.

𝐖𝐫𝐢𝐭𝐞 𝐚 𝐪𝐮𝐞𝐫𝐲 𝐭𝐡𝐚𝐭 𝐜𝐚𝐥𝐜𝐮𝐥𝐚𝐭𝐞𝐬 𝐭𝐡𝐞 𝐭𝐨𝐭𝐚𝐥 𝐜𝐨𝐦𝐩𝐞𝐧𝐬𝐚𝐭𝐢𝐨𝐧 𝐞𝐚𝐫𝐧𝐞𝐝 𝐛𝐲 𝐞𝐚𝐜𝐡 𝐬𝐚𝐥𝐞𝐬𝐩𝐞𝐫𝐬𝐨𝐧. 𝐓𝐡𝐞 𝐨𝐮𝐭𝐩𝐮𝐭 𝐬𝐡𝐨𝐮𝐥𝐝 𝐢𝐧𝐜𝐥𝐮𝐝𝐞 𝐭𝐡𝐞 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞 𝐈𝐃 𝐚𝐧𝐝 𝐭𝐡𝐞𝐢𝐫 𝐜𝐨𝐫𝐫𝐞𝐬𝐩𝐨𝐧𝐝𝐢𝐧𝐠 𝐭𝐨𝐭𝐚𝐥 𝐜𝐨𝐦𝐩𝐞𝐧𝐬𝐚𝐭𝐢𝐨𝐧,
𝐬𝐨𝐫𝐭𝐞𝐝 𝐢𝐧 𝐝𝐞𝐬𝐜𝐞𝐧𝐝𝐢𝐧𝐠 𝐨𝐫𝐝𝐞𝐫. 𝐈𝐧 𝐭𝐡𝐞 𝐜𝐚𝐬𝐞 𝐨𝐟 𝐭𝐢𝐞𝐬, 𝐭𝐡𝐞 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞 𝐈𝐃𝐬 𝐬𝐡𝐨𝐮𝐥𝐝 𝐛𝐞 𝐬𝐨𝐫𝐭𝐞𝐝 𝐢𝐧 𝐚𝐬𝐜𝐞𝐧𝐝𝐢𝐧𝐠 𝐨𝐫𝐝𝐞𝐫.
*/


-- 𝐂𝐫𝐞𝐚𝐭𝐞 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞_𝐜𝐨𝐧𝐭𝐫𝐚𝐜𝐭 𝐭𝐚𝐛𝐥𝐞
CREATE TABLE employee_contract (
    employee_id INT PRIMARY KEY,
    base INT,
    commission DECIMAL(4,2),
    quota INT,
    accelerator DECIMAL(4,2)
);

-- 𝐈𝐧𝐬𝐞𝐫𝐭 𝐬𝐚𝐦𝐩𝐥𝐞 𝐝𝐚𝐭𝐚 𝐢𝐧𝐭𝐨 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞_𝐜𝐨𝐧𝐭𝐫𝐚𝐜𝐭
INSERT INTO employee_contract (employee_id, base, commission, quota, accelerator)
VALUES
(101, 60000, 0.10, 500000, 1.5),
(102, 50000, 0.10, 400000, 1.5);

-- 𝐂𝐫𝐞𝐚𝐭𝐞 𝐝𝐞𝐚𝐥𝐬 𝐭𝐚𝐛𝐥𝐞
CREATE TABLE deals (
    employee_id INT,
    deal_size INT,
    FOREIGN KEY (employee_id) REFERENCES employee_contract(employee_id)
);

-- 𝐈𝐧𝐬𝐞𝐫𝐭 𝐬𝐚𝐦𝐩𝐥𝐞 𝐝𝐚𝐭𝐚 𝐢𝐧𝐭𝐨 𝐝𝐞𝐚𝐥𝐬
INSERT INTO deals (employee_id, deal_size)
VALUES
(101, 400000),
(101, 400000),
(102, 100000),
(102, 200000);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-------------+-------------------+
| 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞_𝐢𝐝 | 𝐭𝐨𝐭𝐚𝐥_𝐜𝐨𝐦𝐩𝐞𝐧𝐬𝐚𝐭𝐢𝐨𝐧 |
+-------------+-------------------+
|     101     |       155000      |
+-------------+-------------------+
|     102     |        80000      |
+-------------+-------------------+

------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝟑:- 𝐀𝐬 𝐚 𝐭𝐞𝐜𝐡 𝐜𝐨𝐦𝐩𝐚𝐧𝐲, 𝐎𝐫𝐚𝐜𝐥𝐞 𝐨𝐟𝐟𝐞𝐫𝐬 𝐚 𝐝𝐢𝐯𝐞𝐫𝐬𝐞 𝐫𝐚𝐧𝐠𝐞 𝐨𝐟 𝐩𝐫𝐨𝐝𝐮𝐜𝐭𝐬 𝐢𝐧𝐜𝐥𝐮𝐝𝐢𝐧𝐠 𝐝𝐚𝐭𝐚𝐛𝐚𝐬𝐞𝐬, 𝐜𝐥𝐨𝐮𝐝 𝐬𝐨𝐥𝐮𝐭𝐢𝐨𝐧𝐬, 𝐚𝐧𝐝 𝐨𝐭𝐡𝐞𝐫 𝐬𝐨𝐟𝐭𝐰𝐚𝐫𝐞 𝐬𝐞𝐫𝐯𝐢𝐜𝐞𝐬. 
𝐓𝐡𝐞 𝐜𝐨𝐦𝐩𝐚𝐧𝐲 𝐰𝐨𝐮𝐥𝐝 𝐥𝐢𝐤𝐞𝐥𝐲 𝐛𝐞 𝐢𝐧𝐭𝐞𝐫𝐞𝐬𝐭𝐞𝐝 𝐢𝐧 𝐮𝐧𝐝𝐞𝐫𝐬𝐭𝐚𝐧𝐝𝐢𝐧𝐠 𝐭𝐡𝐞 𝐚𝐯𝐞𝐫𝐚𝐠𝐞 𝐬𝐚𝐥𝐞𝐬 𝐫𝐞𝐯𝐞𝐧𝐮𝐞 𝐛𝐲 𝐩𝐫𝐨𝐝𝐮𝐜𝐭 𝐜𝐚𝐭𝐞𝐠𝐨𝐫𝐲.

𝐓𝐡𝐞 𝐦𝐚𝐫𝐤𝐞𝐭𝐢𝐧𝐠 𝐭𝐞𝐚𝐦 𝐚𝐭 𝐎𝐫𝐚𝐜𝐥𝐞 𝐰𝐚𝐧𝐭𝐬 𝐭𝐨 𝐮𝐧𝐝𝐞𝐫𝐬𝐭𝐚𝐧𝐝 𝐭𝐡𝐞 𝐚𝐯𝐞𝐫𝐚𝐠𝐞 𝐬𝐚𝐥𝐞𝐬 𝐫𝐞𝐯𝐞𝐧𝐮𝐞 𝐦𝐚𝐝𝐞 𝐟𝐨𝐫 𝐞𝐚𝐜𝐡 𝐩𝐫𝐨𝐝𝐮𝐜𝐭 𝐜𝐚𝐭𝐞𝐠𝐨𝐫𝐲 𝐞𝐚𝐜𝐡 𝐦𝐨𝐧𝐭𝐡. 𝐆𝐢𝐯𝐞𝐧 𝐚 𝐫𝐞𝐥𝐚𝐭𝐢𝐨𝐧𝐚𝐥 𝐭𝐚𝐛𝐥𝐞 𝐜𝐚𝐥𝐥𝐞𝐝 '𝐬𝐚𝐥𝐞𝐬' 
𝐰𝐢𝐭𝐡 𝐜𝐨𝐥𝐮𝐦𝐧𝐬 𝐬𝐚𝐥𝐞𝐬_𝐢𝐝(𝐮𝐧𝐢𝐪𝐮𝐞 𝐢𝐝𝐞𝐧𝐭𝐢𝐟𝐢𝐞𝐫 𝐟𝐨𝐫 𝐭𝐡𝐞 𝐬𝐚𝐥𝐞), 𝐩𝐫𝐨𝐝𝐮𝐜𝐭_𝐢𝐝(𝐮𝐧𝐢𝐪𝐮𝐞 𝐢𝐝𝐞𝐧𝐭𝐢𝐟𝐢𝐞𝐫 𝐟𝐨𝐫 𝐭𝐡𝐞 𝐩𝐫𝐨𝐝𝐮𝐜𝐭), 𝐜𝐚𝐭𝐞𝐠𝐨𝐫𝐲_𝐢𝐝(𝐮𝐧𝐢𝐪𝐮𝐞 𝐢𝐝𝐞𝐧𝐭𝐢𝐟𝐢𝐞𝐫 𝐟𝐨𝐫 𝐩𝐫𝐨𝐝𝐮𝐜𝐭 𝐜𝐚𝐭𝐞𝐠𝐨𝐫𝐲), 
𝐬𝐚𝐥𝐞𝐬_𝐝𝐚𝐭𝐞(𝐝𝐚𝐭𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐬𝐚𝐥𝐞), 𝐚𝐧𝐝 𝐫𝐞𝐯𝐞𝐧𝐮𝐞(𝐫𝐞𝐯𝐞𝐧𝐮𝐞 𝐟𝐫𝐨𝐦 𝐬𝐚𝐥𝐞), 𝐰𝐫𝐢𝐭𝐞 𝐚𝐧 𝐒𝐐𝐋 𝐪𝐮𝐞𝐫𝐲 𝐭𝐡𝐚𝐭 𝐫𝐞𝐭𝐫𝐢𝐞𝐯𝐞𝐬 𝐭𝐡𝐞 𝐚𝐯𝐞𝐫𝐚𝐠𝐞 𝐫𝐞𝐯𝐞𝐧𝐮𝐞 𝐩𝐞𝐫 𝐩𝐫𝐨𝐝𝐮𝐜𝐭 𝐜𝐚𝐭𝐞𝐠𝐨𝐫𝐲 𝐟𝐨𝐫 𝐞𝐚𝐜𝐡 𝐦𝐨𝐧𝐭𝐡.
*/

-- 𝐒𝐚𝐥𝐞𝐬 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE Sales (
    sales_id INT PRIMARY KEY,
    product_id INT,
    category_id INT,
    sales_date DATE,
    revenue DECIMAL(10,2) CHECK (revenue >= 0)
);

-- 𝐒𝐚𝐥𝐞𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO Sales (sales_id, product_id, category_id, sales_date, revenue)
VALUES
(1001, 5001, 1, '2022-06-18', 3500.00),
(1002, 6985, 2, '2022-06-18', 4700.00),
(1003, 5001, 1, '2022-07-27', 3700.00),
(1004, 6985, 2, '2022-08-25', 5000.00),
(1005, 5000, 1, '2022-06-18', 3000.00);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-------+----------+-------------+
|  𝐦𝐨𝐧𝐭𝐡 | 𝐜𝐚𝐭𝐞𝐠𝐨𝐫𝐲 | 𝐚𝐯𝐠_𝐫𝐞𝐯𝐞𝐧𝐮𝐞 |
+-------+----------+-------------+
|   6   |    1     |    3250     |
+-------+----------+-------------+
|   6   |    2     |    4700     |
+-------+----------+-------------+
|   7   |    1     |    3700     |
+-------+----------+-------------+
|   8   |    2     |    5000     |
+-------+----------+-------------+

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝟒:- 𝐅𝐢𝐧𝐝 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫𝐬 𝐰𝐢𝐭𝐡 𝐡𝐢𝐠𝐡𝐞𝐬𝐭 𝐬𝐮𝐩𝐩𝐨𝐫𝐭 𝐭𝐢𝐜𝐤𝐞𝐭 𝐟𝐫𝐞𝐪𝐮𝐞𝐧𝐜𝐲 𝐢𝐧 𝐭𝐡𝐞 𝐥𝐚𝐬𝐭 𝐪𝐮𝐚𝐫𝐭𝐞𝐫
*/

-- 𝐒𝐮𝐩𝐩𝐨𝐫𝐭_𝐭𝐢𝐜𝐤𝐞𝐭𝐬 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE support_tickets (
    ticket_id INT PRIMARY KEY,
    customer_id VARCHAR(10),
    ticket_date DATE,
    issue_type VARCHAR(50)
);

-- 𝐒𝐮𝐩𝐩𝐨𝐫𝐭_𝐭𝐢𝐜𝐤𝐞𝐭𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO support_tickets (ticket_id, customer_id, ticket_date, issue_type) VALUES
(101, 'C001', '2024-10-02', 'Login Issue'),
(102, 'C002', '2024-10-15', 'Payment Failed'),
(103, 'C001', '2024-11-05', 'Product Defect'),
(104, 'C003', '2024-12-01', 'Late Delivery'),
(105, 'C002', '2024-12-12', 'Refund Request'),
(106, 'C001', '2024-12-20', 'Account Locked'),
(107, 'C004', '2024-12-25', 'Technical Issue'),
(108, 'C002', '2024-12-29', 'Order Cancelled'),
(109, 'C001', '2024-12-30', 'Warranty Claim'),
(110, 'C005', '2024-10-08', 'Installation');


## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-------------+--------------+
| 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫_𝐢𝐝 | 𝐭𝐢𝐜𝐤𝐞𝐭_𝐜𝐨𝐮𝐧𝐭  |
+-------------+--------------+
| C001        | 4            |
+-------------+--------------+

------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭


/*
𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝟓:-𝐖𝐫𝐢𝐭𝐞 𝐒𝐐𝐋 𝐪𝐮𝐞𝐫𝐢𝐞𝐬 𝐭𝐨 𝐜𝐚𝐥𝐜𝐮𝐥𝐚𝐭𝐞 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫 𝐜𝐡𝐮𝐫𝐧 𝐫𝐚𝐭𝐞
*/

-- 𝐂𝐮𝐬𝐭𝐨𝐦𝐞𝐫 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE customers_data_ (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(100),
    join_date DATE,
    churn_date DATE
);

-- 𝐂𝐮𝐬𝐭𝐨𝐦𝐞𝐫 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO customers_data_ (customer_id, customer_name, join_date, churn_date) VALUES
(1, 'Alice',   '2023-01-10', '2023-07-15'),
(2, 'Bob',     '2023-02-20', NULL),
(3, 'Charlie', '2023-03-05', '2023-12-01'),
(4, 'David',   '2023-04-18', NULL),
(5, 'Eve',     '2023-05-12', '2023-09-25'),
(6, 'Frank',   '2023-06-01', NULL),
(7, 'Grace',   '2023-07-20', '2023-11-10'),
(8, 'Hank',    '2023-08-05', NULL),
(9, 'Ivy',     '2023-09-15', NULL),
(10,'Jake',    '2023-10-10', '2024-01-05');

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-------------+
|  𝐜𝐡𝐮𝐫𝐧_𝐫𝐚𝐭𝐞% |
+-------------+
|     50%     |
+-------------+

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝟔: 𝐀𝐯𝐞𝐫𝐚𝐠𝐞 𝐏𝐮𝐫𝐜𝐡𝐚𝐬𝐞 𝐀𝐦𝐨𝐮𝐧𝐭 𝐛𝐲 𝐀𝐠𝐞 𝐆𝐫𝐨𝐮𝐩𝐬

𝐀 𝐜𝐨𝐦𝐦𝐨𝐧 𝐚𝐧𝐚𝐥𝐲𝐬𝐢𝐬 𝐢𝐬 𝐭𝐨 𝐜𝐚𝐥𝐜𝐮𝐥𝐚𝐭𝐞 𝐭𝐡𝐞 𝐚𝐯𝐞𝐫𝐚𝐠𝐞 𝐩𝐮𝐫𝐜𝐡𝐚𝐬𝐞 𝐚𝐦𝐨𝐮𝐧𝐭 𝐛𝐲
𝐚𝐠𝐞 𝐠𝐫𝐨𝐮𝐩𝐬. 𝐔𝐬𝐞 𝐭𝐡𝐞 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫 𝐚𝐧𝐝 𝐩𝐮𝐫𝐜𝐡𝐚𝐬𝐞𝐬 𝐭𝐚𝐛𝐥𝐞𝐬.

𝐓𝐡𝐞 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫 𝐭𝐚𝐛𝐥𝐞 𝐡𝐚𝐬 𝐬𝐮𝐜𝐡 𝐜𝐨𝐥𝐮𝐦𝐧𝐬: 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫_𝐢𝐝, 𝐟𝐢𝐫𝐬𝐭_𝐧𝐚𝐦𝐞, 𝐥𝐚𝐬𝐭_𝐧𝐚𝐦𝐞, 𝐛𝐢𝐫𝐭𝐡𝐝𝐚𝐭𝐞

𝐓𝐡𝐞 𝐩𝐮𝐫𝐜𝐡𝐚𝐬𝐞𝐬 𝐭𝐚𝐛𝐥𝐞 𝐢𝐧𝐜𝐥𝐮𝐝𝐞𝐬 𝐩𝐮𝐫𝐜𝐡𝐚𝐬𝐞_𝐢𝐝, 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫_𝐢𝐝, 𝐩𝐮𝐫𝐜𝐡𝐚𝐬𝐞_𝐝𝐚𝐭𝐞, 𝐩𝐫𝐨𝐝𝐮𝐜𝐭_𝐢𝐝, 𝐚𝐦𝐨𝐮𝐧𝐭.

𝐖𝐞 𝐰𝐚𝐧𝐭 𝐭𝐨 𝐣𝐨𝐢𝐧 𝐭𝐡𝐞𝐬𝐞 𝐭𝐚𝐛𝐥𝐞𝐬 𝐛𝐚𝐬𝐞𝐝 𝐨𝐧 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫_𝐢𝐝, 𝐜𝐚𝐥𝐜𝐮𝐥𝐚𝐭𝐞 𝐭𝐡𝐞 𝐚𝐠𝐞 
𝐨𝐟 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫𝐬, 𝐠𝐫𝐨𝐮𝐩 𝐭𝐡𝐞𝐦 𝐢𝐧𝐭𝐨 𝐚𝐠𝐞 𝐛𝐢𝐧𝐬, 𝐚𝐧𝐝 𝐜𝐚𝐥𝐜𝐮𝐥𝐚𝐭𝐞 𝐭𝐡𝐞 𝐚𝐯𝐞𝐫𝐚𝐠𝐞
𝐩𝐮𝐫𝐜𝐡𝐚𝐬𝐞 𝐚𝐦𝐨𝐮𝐧𝐭 𝐟𝐨𝐫 𝐞𝐚𝐜𝐡 𝐚𝐠𝐞 𝐠𝐫𝐨𝐮𝐩.
*/

-- 𝐂𝐮𝐬𝐭𝐨𝐦𝐞𝐫𝐬 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE Customers (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    birthdate DATE
);

-- 𝐂𝐮𝐬𝐭𝐨𝐦𝐞𝐫𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO Customers (customer_id, first_name, last_name, birthdate) VALUES
(1001, 'John', 'Doe', '1980-05-01'),
(1002, 'Jane', 'Smith', '1990-10-30'),
(1003, 'Jim', 'Brown', '2000-01-20'),
(1004, 'Jill', 'Jones', '1965-07-05'),
(1005, 'Bob', 'Johnson', '1975-12-15');


-- 𝐏𝐮𝐫𝐜𝐡𝐚𝐬𝐞𝐬 𝐓𝐚𝐛𝐥𝐞:- 
 CREATE TABLE Purchases (
    purchase_id INT PRIMARY KEY,
    customer_id INT,
    purchase_date DATE,
    product_id INT,
    amount DECIMAL(10,2),
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);


-- 𝐏𝐮𝐫𝐜𝐡𝐚𝐬𝐞𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO Purchases (purchase_id, customer_id, purchase_date, product_id, amount) VALUES
(8223, 1001, '2022-07-10', 70001, 200.00),
(8315, 1002, '2022-08-05', 80052, 150.00),
(8236, 1003, '2022-06-18', 70009, 220.00),
(8252, 1004, '2022-05-15', 80952, 180.00),
(8301, 1005, '2022-11-05', 80882, 250.00);


## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-----------+------------+
| 𝐚𝐠𝐞_𝐠𝐫𝐨𝐮𝐩 | 𝐚𝐯𝐠_𝐚𝐦𝐨𝐮𝐧𝐭 |
+-----------+------------+
| > 50      |     180.00 |
| 0-30      |     220.00 |
| 31-50     |     200.00 |
+-----------+------------+

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 


