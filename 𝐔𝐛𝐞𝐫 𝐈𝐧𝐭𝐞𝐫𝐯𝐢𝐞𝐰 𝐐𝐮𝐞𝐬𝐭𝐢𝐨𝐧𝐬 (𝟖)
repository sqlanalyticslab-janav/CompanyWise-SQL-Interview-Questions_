                                                               #  𝐔𝐛𝐞𝐫 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧𝐬

## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟏:- 𝐔𝐬𝐞𝐫𝐬 𝐰𝐡𝐨 𝐛𝐨𝐨𝐤𝐞𝐝 𝐦𝐨𝐫𝐞 𝐭𝐡𝐚𝐧 𝐨𝐧𝐜𝐞 𝐰𝐢𝐭𝐡𝐢𝐧 𝟏𝟎
𝐦𝐢𝐧𝐮𝐭𝐞𝐬
*/

## 𝐑𝐢𝐝𝐞𝐬 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE Rides (
    ride_id INT PRIMARY KEY,
    user_id VARCHAR(10),
    ride_time DATETIME
);

## 𝐑𝐢𝐝𝐞𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO Rides (ride_id, user_id, ride_time)
VALUES
(1, 'U1', '2024-06-01 10:00:00'),
(2, 'U1', '2024-06-01 10:08:00'),
(3, 'U2', '2024-06-01 09:00:00'),
(4, 'U2', '2024-06-01 09:30:00'),
(5, 'U1', '2024-06-01 10:20:00'),
(6, 'U3', '2024-06-01 11:00:00');

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+---------+
| 𝐮𝐬𝐞𝐫_𝐢𝐝 |
+---------+
|   U1    |
+---------+

-----------------------------------------------------------------------------------------------------------------------------------------


## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟐:- 𝐌𝐨𝐬𝐭 𝐅𝐫𝐞𝐪𝐮𝐞𝐧𝐭𝐥𝐲 𝐓𝐫𝐚𝐯𝐞𝐥𝐞𝐝 𝐑𝐨𝐮𝐭𝐞 𝐢𝐧 𝐏𝐚𝐬𝐭 𝟑𝟎 𝐃𝐚𝐲𝐬
*/

## 𝐑𝐢𝐝𝐞𝐬 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE Rides (
    ride_id INT PRIMARY KEY,
    user_id VARCHAR(10),
    pickup_location VARCHAR(50),
    drop_location VARCHAR(50),
    ride_date DATE
);

## 𝐑𝐢𝐝𝐞𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO Rides (ride_id, user_id, pickup_location, drop_location, ride_date)
VALUES
(1, 'U1', 'A', 'B', '2024-06-20'),
(2, 'U2', 'B', 'C', '2024-06-21'),
(3, 'U3', 'A', 'B', '2024-06-22'),
(4, 'U4', 'A', 'B', '2024-06-25'),
(5, 'U5', 'C', 'D', '2024-06-10');

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+----------------+---------------+-------------+
| 𝐩𝐢𝐜𝐤𝐮𝐩_𝐥𝐨𝐜𝐚𝐭𝐢𝐨𝐧| 𝐝𝐫𝐨𝐩_𝐥𝐨𝐜𝐚𝐭𝐢𝐨𝐧 | 𝐫𝐨𝐮𝐭𝐞_𝐜𝐨𝐮𝐧𝐭  |
+----------------+---------------+-------------+
| A              | B             |      3      |
+----------------+---------------+-------------+

-----------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟑:- 𝐃𝐞𝐭𝐞𝐜𝐭 𝐝𝐮𝐩𝐥𝐢𝐜𝐚𝐭𝐞𝐬 𝐛𝐚𝐬𝐞𝐝 𝐨𝐧 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫 𝐈𝐃 𝐚𝐧𝐝
𝐭𝐢𝐦𝐞𝐬𝐭𝐚𝐦𝐩 𝐛𝐮𝐭 𝐫𝐞𝐭𝐮𝐫𝐧 𝐨𝐧𝐥𝐲 𝐭𝐡𝐞 𝐥𝐚𝐭𝐞𝐬𝐭 𝐨𝐧𝐞
*/

## 𝐂𝐮𝐬𝐭𝐨𝐦𝐞𝐫_𝐚𝐜𝐭𝐢𝐯𝐢𝐭𝐲 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE customer_activity (
    id INT PRIMARY KEY,
    customer_id VARCHAR(10),
    activity_time DATETIME
);

## 𝐒𝐚𝐦𝐩𝐥𝐞 𝐂𝐮𝐬𝐭𝐨𝐦𝐞𝐫_𝐚𝐜𝐭𝐢𝐯𝐢𝐭𝐲 𝐃𝐚𝐭𝐚:- 
INSERT INTO customer_activity (id, customer_id, activity_time)
VALUES
(1, 'C1', '2024-06-01 10:00:00'),
(2, 'C1', '2024-06-01 10:00:00'),
(3, 'C1', '2024-06-01 10:00:00'),
(4, 'C2', '2024-06-02 11:30:00'),
(5, 'C2', '2024-06-02 11:30:00'),
(6, 'C3', '2024-06-03 09:00:00');


## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-------------+---------------------+-----------+
| 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫_𝐢𝐝 |    𝐚𝐜𝐭𝐢𝐯𝐢𝐭𝐲_𝐭𝐢𝐦𝐞      | 𝐥𝐚𝐭𝐞𝐬𝐭_𝐢𝐝  |
+-------------+---------------------+-----------+
| C1          | 2024-06-01 10:00:00 |    3      |
| C2          | 2024-06-02 11:30:00 |    5      |
+-------------+---------------------+-----------+

---------------------------------------------------------------------------------------------------------------------------------------------------
## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟒:- 𝐅𝐢𝐧𝐝 𝐭𝐡𝐞 𝐝𝐢𝐟𝐟𝐞𝐫𝐞𝐧𝐜𝐞 𝐢𝐧 𝐭𝐫𝐢𝐩 𝐜𝐨𝐮𝐧𝐭𝐬 𝐛𝐞𝐭𝐰𝐞𝐞𝐧 𝐭𝐰𝐨
𝐜𝐨𝐧𝐬𝐞𝐜𝐮𝐭𝐢𝐯𝐞 𝐰𝐞𝐞𝐤𝐬 𝐟𝐨𝐫 𝐞𝐚𝐜𝐡 𝐝𝐫𝐢𝐯𝐞𝐫
*/

## 𝐑𝐢𝐝𝐞𝐬 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE rides (
    ride_id INT PRIMARY KEY,
    driver_id VARCHAR(10),
    ride_date DATE
);

## 𝐑𝐢𝐝𝐞𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚;- 
INSERT INTO rides (ride_id, driver_id, ride_date)
VALUES
(1, 'D1', '2024-06-01'),
(2, 'D1', '2024-06-02'),
(3, 'D1', '2024-06-08'),
(4, 'D2', '2024-06-03'),
(5, 'D2', '2024-06-10'),
(6, 'D2', '2024-06-11'),
(7, 'D3', '2024-06-12');

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-----------+----------+--------------+------------+-----------+
| 𝐝𝐫𝐢𝐯𝐞𝐫_𝐢𝐝  |𝐰𝐞𝐞𝐤_𝐧𝐮𝐦 | 𝐜𝐮𝐫𝐫𝐞𝐧𝐭_𝐰𝐞𝐞𝐤 | 𝐩𝐫𝐞𝐯_𝐰𝐞𝐞𝐤  | 𝐭𝐫𝐢𝐩_𝐝𝐢𝐟𝐟  |
+-----------+----------+--------------+------------+-----------+
| D1        | 202422   | 2            | 0          | 2         |
| D1        | 202423   | 1            | 2          | -1        |
| D2        | 202423   | 1            | 1          | 0         |
| D2        | 202424   | 2            | 1          | 1         |
| D3        | 202424   | 1            | 0          | 1         |
+-----------+----------+--------------+------------+-----------+


--------------------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟓:- 𝐀𝐬𝐬𝐮𝐦𝐞 𝐲𝐨𝐮 𝐚𝐫𝐞 𝐠𝐢𝐯𝐞𝐧 𝐭𝐡𝐞 𝐭𝐚𝐛𝐥𝐞 𝐛𝐞𝐥𝐨𝐰 𝐨𝐧 𝐔𝐛𝐞𝐫 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧𝐬 𝐦𝐚𝐝𝐞 𝐛𝐲 𝐮𝐬𝐞𝐫𝐬. 𝐖𝐫𝐢𝐭𝐞 𝐚 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐨𝐛𝐭𝐚𝐢𝐧 𝐭𝐡𝐞 𝐭𝐡𝐢𝐫𝐝 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧
𝐨𝐟 𝐞𝐯𝐞𝐫𝐲 𝐮𝐬𝐞𝐫. 𝐎𝐮𝐭𝐩𝐮𝐭 𝐭𝐡𝐞 𝐮𝐬𝐞𝐫 𝐢𝐝, 𝐬𝐩𝐞𝐧𝐝 𝐚𝐧𝐝 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧 𝐝𝐚𝐭𝐞.
*/

## 𝐓𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧𝐬 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE transactions (
    user_id INT,
    spend DECIMAL(10,2) CHECK (spend >= 0),
    transaction_date DATETIME
);

## 𝐓𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:-
INSERT INTO transactions (user_id, spend, transaction_date)
VALUES
(111, 100.50, '2022-01-08 12:00:00'),
(111,  55.00, '2022-01-10 12:00:00'),
(121,  36.00, '2022-01-18 12:00:00'),
(145,  24.99, '2022-01-26 12:00:00'),
(111,  89.60, '2022-02-05 12:00:00');

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+---------+--------+---------------------+
| 𝐮𝐬𝐞𝐫_𝐢𝐝 | 𝐬𝐩𝐞𝐧𝐝  |  𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧_𝐝𝐚𝐭𝐞    |
+---------+--------+---------------------+
|   111   |  89.60 | 02/05/2022 12:00:00 |
+---------+--------+---------------------+

--------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟔:- 𝐀𝐬 𝐚 𝐝𝐚𝐭𝐚 𝐚𝐧𝐚𝐥𝐲𝐬𝐭 𝐚𝐭 𝐔𝐛𝐞𝐫, 𝐢𝐭'𝐬 𝐲𝐨𝐮𝐫 𝐣𝐨𝐛 𝐭𝐨 𝐫𝐞𝐩𝐨𝐫𝐭 𝐭𝐡𝐞 𝐥𝐚𝐭𝐞𝐬𝐭 𝐦𝐞𝐭𝐫𝐢𝐜𝐬 𝐟𝐨𝐫 𝐬𝐩𝐞𝐜𝐢𝐟𝐢𝐜 𝐠𝐫𝐨𝐮𝐩𝐬 𝐨𝐟 𝐔𝐛𝐞𝐫 𝐮𝐬𝐞𝐫𝐬. 𝐒𝐨𝐦𝐞 𝐫𝐢𝐝𝐞𝐫𝐬 𝐜𝐫𝐞𝐚𝐭𝐞 𝐭𝐡𝐞𝐢𝐫 𝐔𝐛𝐞𝐫 𝐚𝐜𝐜𝐨𝐮𝐧𝐭 𝐭𝐡𝐞 𝐬𝐚𝐦𝐞 𝐝𝐚𝐲 𝐭𝐡𝐞𝐲 𝐛𝐨𝐨𝐤
𝐭𝐡𝐞𝐢𝐫 𝐟𝐢𝐫𝐬𝐭 𝐫𝐢𝐝𝐞; 𝐭𝐡𝐞 𝐫𝐢𝐝𝐞𝐫 𝐞𝐧𝐠𝐚𝐠𝐞𝐦𝐞𝐧𝐭 𝐭𝐞𝐚𝐦 𝐜𝐚𝐥𝐥𝐬 𝐭𝐡𝐞𝐦 "𝐢𝐧-𝐭𝐡𝐞-𝐦𝐨𝐦𝐞𝐧𝐭" 𝐮𝐬𝐞𝐫𝐬.

𝐔𝐛𝐞𝐫 𝐰𝐚𝐧𝐭𝐬 𝐭𝐨 𝐤𝐧𝐨𝐰 𝐭𝐡𝐞 𝐚𝐯𝐞𝐫𝐚𝐠𝐞 𝐝𝐞𝐥𝐚𝐲 𝐛𝐞𝐭𝐰𝐞𝐞𝐧 𝐭𝐡𝐞 𝐝𝐚𝐲 𝐨𝐟 𝐮𝐬𝐞𝐫 𝐬𝐢𝐠𝐧-𝐮𝐩 𝐚𝐧𝐝 𝐭𝐡𝐞 𝐝𝐚𝐲 𝐨𝐟 𝐭𝐡𝐞𝐢𝐫 𝟐𝐧𝐝 𝐫𝐢𝐝𝐞. 𝐖𝐫𝐢𝐭𝐞 𝐚 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐩𝐮𝐥𝐥 𝐭𝐡𝐞 𝐚𝐯𝐞𝐫𝐚𝐠𝐞 𝟐𝐧𝐝 𝐫𝐢𝐝𝐞 𝐝𝐞𝐥𝐚𝐲 𝐟𝐨𝐫 
"𝐢𝐧-𝐭𝐡𝐞-𝐦𝐨𝐦𝐞𝐧𝐭" 𝐔𝐛𝐞𝐫 𝐮𝐬𝐞𝐫𝐬. 𝐑𝐨𝐮𝐧𝐝 𝐭𝐡𝐞 𝐚𝐧𝐬𝐰𝐞𝐫 𝐭𝐨 𝟐-𝐝𝐞𝐜𝐢𝐦𝐚𝐥 𝐩𝐥𝐚𝐜𝐞𝐬.
*/

## 𝐔𝐬𝐞𝐫𝐬 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE users (
    user_id INT PRIMARY KEY,
    registration_date DATE
);

## 𝐔𝐬𝐞𝐫𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO users (user_id, registration_date)
VALUES
(1, '2022-08-15'),
(2, '2022-08-21');

## 𝐑𝐢𝐝𝐞𝐬 𝐓𝐚𝐛𝐥𝐞𝐬;- 
CREATE TABLE rides (
    ride_id INT PRIMARY KEY,
    user_id INT,
    ride_date DATE
);

## 𝐑𝐢𝐝𝐞𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO rides (ride_id, user_id, ride_date)
VALUES
(1, 1, '2022-08-15'),
(2, 1, '2022-08-16'),
(3, 2, '2022-09-20'),
(4, 2, '2022-09-23');


## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+----------------+
|  𝐚𝐯𝐞𝐫𝐚𝐠𝐞_𝐝𝐞𝐥𝐚𝐲  |
+----------------+
|       1        |
+----------------+

--------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟕:- 𝐀𝐬 𝐚 𝐝𝐚𝐭𝐚 𝐚𝐧𝐚𝐥𝐲𝐬𝐭 𝐟𝐨𝐫 𝐔𝐛𝐞𝐫, 𝐲𝐨𝐮 𝐚𝐫𝐞 𝐚𝐬𝐤𝐞𝐝 𝐭𝐨 𝐝𝐞𝐭𝐞𝐫𝐦𝐢𝐧𝐞 𝐞𝐚𝐜𝐡 𝐝𝐫𝐢𝐯𝐞𝐫'𝐬 𝐚𝐯𝐞𝐫𝐚𝐠𝐞 𝐫𝐚𝐭𝐢𝐧𝐠𝐬 𝐟𝐨𝐫 𝐞𝐚𝐜𝐡 𝐜𝐢𝐭𝐲. 𝐓𝐡𝐢𝐬 𝐰𝐢𝐥𝐥 𝐡𝐞𝐥𝐩 𝐔𝐛𝐞𝐫 𝐭𝐨 𝐦𝐨𝐧𝐢𝐭𝐨𝐫 𝐩𝐞𝐫𝐟𝐨𝐫𝐦𝐚𝐧𝐜𝐞 
𝐚𝐧𝐝 𝐩𝐞𝐫𝐡𝐚𝐩𝐬 𝐡𝐢𝐠𝐡𝐥𝐢𝐠𝐡𝐭 𝐚𝐧𝐲 𝐩𝐫𝐨𝐛𝐥𝐞𝐦𝐬 𝐭𝐡𝐚𝐭 𝐦𝐢𝐠𝐡𝐭 𝐛𝐞 𝐚𝐫𝐢𝐬𝐢𝐧𝐠 𝐢𝐧 𝐚𝐧𝐲 𝐬𝐩𝐞𝐜𝐢𝐟𝐢𝐜 𝐜𝐢𝐭𝐲.
*/

-- 𝐂𝐫𝐞𝐚𝐭𝐞 𝐫𝐢𝐝𝐞𝐬 𝐭𝐚𝐛𝐥𝐞
CREATE TABLE rides (
    ride_id INT PRIMARY KEY,
    driver_id INT,
    city VARCHAR(50),
    fare_amount DECIMAL(10,2) CHECK (fare_amount >= 0)
);

-- 𝐈𝐧𝐬𝐞𝐫𝐭 𝐬𝐚𝐦𝐩𝐥𝐞 𝐝𝐚𝐭𝐚 𝐢𝐧𝐭𝐨 𝐫𝐢𝐝𝐞𝐬
INSERT INTO rides (ride_id, driver_id, city, fare_amount)
VALUES
(101, 201, 'New York', 25.50),
(102, 202, 'San Francisco', 18.00),
(103, 203, 'Chicago', 22.75),
(104, 201, 'San Francisco', 30.00),
(105, 202, 'New York', 20.00);

-- 𝐂𝐫𝐞𝐚𝐭𝐞 𝐫𝐚𝐭𝐢𝐧𝐠𝐬 𝐭𝐚𝐛𝐥𝐞
CREATE TABLE ratings (
    ride_id INT PRIMARY KEY,
    rating DECIMAL(2,1) CHECK (rating >= 0 AND rating <= 5),
    FOREIGN KEY (ride_id) REFERENCES rides(ride_id)
);

-- 𝐈𝐧𝐬𝐞𝐫𝐭 𝐬𝐚𝐦𝐩𝐥𝐞 𝐝𝐚𝐭𝐚 𝐢𝐧𝐭𝐨 𝐫𝐚𝐭𝐢𝐧𝐠𝐬
INSERT INTO ratings (ride_id, rating)
VALUES
(101, 4.3),
(102, 4.1),
(103, 4.8),
(104, 4.7),
(105, 3.9);


## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-----------+---------------+------------+
| 𝐝𝐫𝐢𝐯𝐞𝐫_𝐢𝐝 | 𝐜𝐢𝐭𝐲            | 𝐚𝐯𝐠_𝐫𝐚𝐭𝐢𝐧𝐠  |
+-----------+---------------+------------+
| 201       | New York      | 4.3        |
| 202       | San Francisco | 4.1        |
| 203       | Chicago       | 4.8        |
| 201       | San Francisco | 4.7        |
| 202       | New York      | 3.9        |
+-----------+---------------+------------+

----------------------------------------------------------------------------------------------------------------------------------

## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟖:- 𝐀𝐬 𝐚𝐧 𝐒𝐐𝐋 𝐚𝐧𝐚𝐥𝐲𝐬𝐭 𝐚𝐭 𝐔𝐛𝐞𝐫, 𝐲𝐨𝐮 𝐚𝐫𝐞 𝐚𝐬𝐬𝐢𝐠𝐧𝐞𝐝 𝐭𝐨 𝐟𝐢𝐥𝐭𝐞𝐫 𝐨𝐮𝐭 𝐭𝐡𝐞 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫𝐬 𝐰𝐡𝐨 𝐡𝐚𝐯𝐞 𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫𝐞𝐝 𝐮𝐬𝐢𝐧𝐠 𝐭𝐡𝐞𝐢𝐫 𝐆𝐦𝐚𝐢𝐥 𝐈𝐃𝐬. 𝐘𝐨𝐮 𝐚𝐫𝐞 𝐠𝐢𝐯𝐞𝐧 𝐚 𝐝𝐚𝐭𝐚𝐛𝐚𝐬𝐞 𝐧𝐚𝐦𝐞𝐝 '𝐮𝐬𝐞𝐫𝐬'. 
𝐓𝐡𝐞 𝐫𝐞𝐜𝐨𝐫𝐝𝐬 𝐢𝐧 𝐭𝐡𝐢𝐬 𝐭𝐚𝐛𝐥𝐞 𝐜𝐨𝐧𝐭𝐚𝐢𝐧 𝐦𝐮𝐥𝐭𝐢𝐩𝐥𝐞 𝐞𝐦𝐚𝐢𝐥 𝐝𝐨𝐦𝐚𝐢𝐧𝐬. 𝐘𝐨𝐮 𝐧𝐞𝐞𝐝 𝐭𝐨 𝐰𝐫𝐢𝐭𝐞 𝐚𝐧 𝐒𝐐𝐋 𝐪𝐮𝐞𝐫𝐲 𝐭𝐡𝐚𝐭 𝐟𝐢𝐥𝐭𝐞𝐫𝐬 𝐨𝐧𝐥𝐲 𝐭𝐡𝐨𝐬𝐞 𝐫𝐞𝐜𝐨𝐫𝐝𝐬 𝐰𝐡𝐞𝐫𝐞 𝐭𝐡𝐞 '𝐞𝐦𝐚𝐢𝐥' 𝐟𝐢𝐞𝐥𝐝 𝐜𝐨𝐧𝐭𝐚𝐢𝐧𝐬 '𝐠𝐦𝐚𝐢𝐥.𝐜𝐨𝐦'.
*/

## 𝐔𝐬𝐞𝐫𝐬 𝐓𝐚𝐛𝐥𝐞:-
CREATE TABLE users (
    user_id INT PRIMARY KEY,
    full_name VARCHAR(100),
    registration_date DATE,
    email VARCHAR(100) UNIQUE
);

## 𝐔𝐬𝐞𝐫𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO users (user_id, full_name, registration_date, email)
VALUES
(7162, 'John Doe', '2019-05-04', 'johndoe@gmail.com'),
(7625, 'Jane Smith', '2020-11-09', 'janesmith@yahoo.com'),
(5273, 'Steve Johnson', '2018-06-20', 'stevejohnson@gmail.com'),
(6322, 'Emily Davis', '2021-08-14', 'emilydavis@hotmail.com'),
(4812, 'Olivia Brown', '2019-09-30', 'oliviabrown@gmail.com');

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭

+---------+---------------+-----------------+----------------------+
|  𝐮𝐬𝐞𝐫_𝐢𝐝 |   𝐟𝐮𝐥𝐥_𝐧𝐚𝐦𝐞   | 𝐫𝐞𝐠𝐢𝐬𝐭𝐫𝐚𝐭𝐢𝐨𝐧_𝐝𝐚𝐭𝐞 |        𝐞𝐦𝐚𝐢𝐥        |
+---------+---------------+-----------------+----------------------+
| 7162    | John Doe      | 05/04/2019      | johndoe@gmail.com    |
| 5273    | Steve Johnson | 06/20/2018      | stevejohnson@gmail.com|
| 4812    | Olivia Brown  | 09/30/2019      | oliviabrown@gmail.com|
+---------+---------------+-----------------+----------------------+

---------------------------------------------------------------------------------------------------------------------------------------------------------





