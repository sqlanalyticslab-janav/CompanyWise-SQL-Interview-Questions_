                                                                      # 🛒 𝐀𝐦𝐚𝐳𝐨𝐧 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧𝐬

## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟏: 𝐈𝐝𝐞𝐧𝐭𝐢𝐟𝐲 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫𝐬 𝐰𝐡𝐨 𝐦𝐚𝐝𝐞 𝐩𝐮𝐫𝐜𝐡𝐚𝐬𝐞𝐬 𝐨𝐧 𝐞𝐱𝐚𝐜𝐭𝐥𝐲 𝐭𝐡𝐫𝐞𝐞
𝐝𝐢𝐟𝐟𝐞𝐫𝐞𝐧𝐭 𝐝𝐚𝐲𝐬 𝐢𝐧 𝐭𝐡𝐞 𝐥𝐚𝐬𝐭 𝐦𝐨𝐧𝐭𝐡.
*/ 

## 𝐏𝐮𝐫𝐜𝐡𝐚𝐬𝐞𝐬 𝐓𝐚𝐛𝐥𝐞
CREATE TABLE Purchases (
    PurchaseID INT PRIMARY KEY,
    CustomerID INT,
    PurchaseDate DATE,
    Amount DECIMAL(10, 2)
);

## 𝐏𝐮𝐫𝐜𝐡𝐚𝐬𝐞𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚
INSERT INTO Purchases (PurchaseID, CustomerID, PurchaseDate, Amount) 
VALUES
(1, 101, '2025-05-01', 200.00),(2, 101, '2025-05-02', 150.00),
(3, 101, '2025-05-03', 100.00),(4, 102, '2025-05-01', 300.00),
(5, 102, '2025-05-01', 50.00),(6, 102, '2025-05-03', 500.00),
(7, 102, '2025-05-05', 250.00),(8, 103, '2025-05-01', 120.00),
(9, 103, '2025-05-02', 80.00),(10, 104, '2025-05-01', 300.00),
(11, 104, '2025-05-02', 200.00),(12, 104, '2025-05-03', 100.00),
(13, 104, '2025-05-04', 100.00),(14, 105, '2025-05-10', 180.00),
(15, 105, '2025-05-15', 220.00),(16, 105, '2025-05-20', 150.00),
(17, 106, '2025-04-28', 300.00),
(18, 106, '2025-06-01', 200.00);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭

| 𝐂𝐮𝐬𝐭𝐨𝐦𝐞𝐫𝐈𝐃 |
|------------|
| 101        |
| 102        |
| 105        |

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/* 𝐐𝟐) 
𝐅𝐢𝐧𝐝 𝐭𝐡𝐞 𝐭𝐨𝐩 𝟐 𝐡𝐢𝐠𝐡𝐞𝐬𝐭-𝐬𝐞𝐥𝐥𝐢𝐧𝐠 𝐩𝐫𝐨𝐝𝐮𝐜𝐭𝐬 𝐟𝐨𝐫 𝐞𝐚𝐜𝐡 𝐜𝐚𝐭𝐞𝐠𝐨𝐫𝐲.
*/

## 𝐂𝐚𝐭𝐞𝐠𝐨𝐫𝐢𝐞𝐬 𝐓𝐚𝐛𝐥𝐞
CREATE TABLE Categories (
    CategoryID INT PRIMARY KEY,
    CategoryName VARCHAR(50)
);

## 𝐂𝐚𝐭𝐞𝐠𝐨𝐫𝐢𝐞𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚 
INSERT INTO Categories (CategoryID, CategoryName) VALUES
(1, 'Electronics'),
(2, 'Clothing'),
(3, 'Groceries');

## 𝐏𝐫𝐨𝐝𝐮𝐜𝐭𝐬 𝐓𝐚𝐛𝐥𝐞
CREATE TABLE Products (
    ProductID INT PRIMARY KEY,
    ProductName VARCHAR(50),
    CategoryID INT,
    FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID)
);

## 𝐏𝐫𝐨𝐝𝐮𝐜𝐭𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚
INSERT INTO Products (ProductID, ProductName, CategoryID) VALUES
(1, 'Laptop', 1),(2, 'Smartphone', 1),
(3, 'Headphones', 1),(4, 'T-shirt', 2),
(5, 'Jeans', 2),(6, 'Jacket', 2),
(7, 'Rice', 3),(8, 'Wheat Flour', 3),
(9, 'Sugar', 3);

## 𝐒𝐚𝐥𝐞𝐬 𝐓𝐚𝐛𝐥𝐞 
CREATE TABLE Sales (
    SaleID INT PRIMARY KEY,
    ProductID INT,
    Quantity INT,
    Price DECIMAL(10,2),
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
);

## 𝐒𝐚𝐥𝐞𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚 
INSERT INTO Sales (SaleID, ProductID, Quantity, Price) VALUES
(1, 1, 5, 50000.00), (2, 2, 10, 30000.00),  (3, 3, 15, 2000.00),   
(4, 4, 20, 500.00), (5, 5, 15, 1500.00),(6, 6, 10, 3000.00),  
(7, 7, 50, 80.00), (8, 8, 60, 50.00),    
(9, 9, 40, 60.00); 

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭

| 𝐂𝐚𝐭𝐞𝐠𝐨𝐫𝐲𝐧𝐚𝐦𝐞     | 𝐏𝐫𝐨𝐝𝐮𝐜𝐭𝐧𝐚𝐦𝐞     | 𝐓𝐨𝐭𝐚𝐥_𝐀𝐦𝐨𝐮𝐧𝐭|
|------------------|----------------- |-----------|
| Clothing         | Jacket           | 30000.00  |
| Clothing         | Jeans            | 22500.00  |
| Electronics      | Smartphone       | 300000.00 |
| Electronics      | Laptop           | 250000.00 |
| Groceries        | Rice             | 4000.00   |
| Groceries        | Wheat Flour      | 3000.00   |

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/* 𝐐𝟑)
𝐃𝐞𝐭𝐞𝐜𝐭 𝐚𝐧𝐨𝐦𝐚𝐥𝐢𝐞𝐬 𝐰𝐡𝐞𝐫𝐞 𝐬𝐚𝐥𝐞𝐬 𝐟𝐨𝐫 𝐚 𝐩𝐫𝐨𝐝𝐮𝐜𝐭 𝐚𝐫𝐞 𝟓𝟎% 𝐥𝐨𝐰𝐞𝐫 𝐭𝐡𝐚𝐧 𝐭𝐡𝐞 𝐚𝐯𝐞𝐫𝐚𝐠𝐞 𝐟𝐨𝐫
𝐭𝐡𝐚𝐭 𝐩𝐫𝐨𝐝𝐮𝐜𝐭
*/

## 𝐏𝐫𝐨𝐝𝐮𝐜𝐭𝐬 𝐓𝐚𝐛𝐥𝐞
CREATE TABLE Products_ (
    ProductID INT PRIMARY KEY,
    ProductName VARCHAR(50)
);

## 𝐒𝐚𝐦𝐩𝐥𝐞 𝐏𝐫𝐨𝐝𝐮𝐜𝐭𝐬 𝐃𝐚𝐭𝐚
INSERT INTO Products_ (ProductID, ProductName) VALUES
(1, 'Smartphone'),
(2, 'Laptop'),
(3, 'Tablet');

## 𝐒𝐚𝐥𝐞𝐬_𝐃𝐚𝐭𝐚 𝐓𝐚𝐛𝐥𝐞
CREATE TABLE Sales_Data (
    SaleID INT PRIMARY KEY,
    ProductID INT,
    SaleDate DATE,
    SaleAmount DECIMAL(10,2)
);

## 𝐒𝐚𝐦𝐩𝐥𝐞 𝐒𝐚𝐥𝐞𝐬_𝐃𝐚𝐭𝐚 
INSERT INTO Sales_Data (SaleID, ProductID, SaleDate, SaleAmount) VALUES
(1, 1, '2025-06-01', 21000),   (2, 1, '2025-06-05', 20000),    
(3, 1, '2025-06-10', 19000),   (4, 1, '2025-06-15', 9000),
(5, 2, '2025-06-01', 50000),   (6, 2, '2025-06-07', 45000),    
(7, 2, '2025-06-20', 34000),   (8, 2, '2025-06-25', 20000),
(9, 3, '2025-06-03', 15000),   (10, 3, '2025-06-08', 15500),   
(11, 3, '2025-06-13', 14500),  (12, 3, '2025-06-18', 6000);   

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭

|  𝐩𝐫𝐨𝐝𝐮𝐜𝐭𝐢𝐝 | 𝐩𝐫𝐨𝐝𝐮𝐜𝐭𝐧𝐚𝐦𝐞 | 𝐬𝐚𝐥𝐞𝐬𝐚𝐦𝐨𝐮𝐧𝐭 | 𝐚𝐯𝐠_𝐬𝐚𝐥𝐞𝐬    |
|-----------|-------------|-------------|--------------|
| 3         | Tablet      | 6000.00     | 12750.000000 |

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/* 𝐐𝟒)
𝐅𝐢𝐧𝐝 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐰𝐡𝐨 𝐡𝐚𝐯𝐞 𝐧𝐞𝐯𝐞𝐫 𝐛𝐞𝐞𝐧 𝐚 𝐦𝐚𝐧𝐚𝐠𝐞𝐫 𝐚𝐧𝐝 𝐡𝐚𝐯𝐞 𝐰𝐨𝐫𝐤𝐞𝐝 𝐢𝐧 𝐦𝐨𝐫𝐞
𝐭𝐡𝐚𝐧 𝐨𝐧𝐞 𝐝𝐞𝐩𝐚𝐫𝐭𝐦𝐞𝐧𝐭.
*/

## 𝐄𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐓𝐚𝐛𝐥𝐞 
CREATE TABLE Employees (
    EmpID INT PRIMARY KEY,
    EmpName VARCHAR(50)
);

## 𝐒𝐚𝐦𝐩𝐥𝐞 𝐄𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐃𝐚𝐭𝐚
INSERT INTO Employees VALUES
(1, 'Alice'),(2, 'Bob'),
(3, 'Charlie'),(4, 'David'),
(5, 'Eve');

## 𝐃𝐞𝐩𝐚𝐫𝐭𝐦𝐞𝐧𝐭 𝐓𝐚𝐛𝐥𝐞
CREATE TABLE Departments_Data (
    DeptID INT PRIMARY KEY,
    DeptName VARCHAR(50)
);

## 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐞𝐩𝐚𝐫𝐭𝐦𝐞𝐧𝐭 𝐃𝐚𝐭𝐚
INSERT INTO Departments_Data VALUES
(101, 'HR'),
(102, 'Finance'),
(103, 'IT');

## 𝐄𝐦𝐩 𝐃𝐞𝐩𝐭 𝐓𝐚𝐛𝐥𝐞
CREATE TABLE Emp_Dept (
    EmpID INT,
    DeptID INT,
    FromDate DATE,
    ToDate DATE,
    FOREIGN KEY (EmpID) REFERENCES Employees(EmpID),
    FOREIGN KEY (DeptID) REFERENCES Departments_Data(DeptID)
);

## 𝐒𝐚𝐦𝐩𝐥𝐞 𝐄𝐦𝐩 𝐃𝐞𝐩𝐭 𝐃𝐚𝐭𝐚 
INSERT INTO Emp_Dept VALUES
(1, 101, '2021-01-01', '2022-01-01'),(1, 102, '2022-02-01', '2023-01-01'),
(2, 101, '2021-05-01', '2022-06-01'),(3, 103, '2022-01-01', '2023-01-01'),
(3, 101, '2023-02-01', '2024-01-01'),(4, 102, '2021-01-01', '2023-01-01'),
(5, 103, '2021-01-01', '2023-01-01');

## 𝐌𝐚𝐧𝐚𝐠𝐞𝐫𝐬 𝐓𝐚𝐛𝐥𝐞
CREATE TABLE Managers (
    EmpID INT PRIMARY KEY,
    DeptID INT,
    FOREIGN KEY (EmpID) REFERENCES Employees(EmpID),
    FOREIGN KEY (DeptID) REFERENCES Departments_Data(DeptID)
);

## 𝐒𝐚𝐦𝐩𝐥𝐞 𝐌𝐚𝐧𝐚𝐠𝐞𝐫𝐬 𝐃𝐚𝐭𝐚 
INSERT INTO Managers VALUES
(2, 101),
(5, 103);


## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭

| 𝐄𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐈𝐃 | 𝐄𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐍𝐚𝐦𝐞|
|------------|--------------|
| 1          | Alice        |
| 3          | Charlie      |

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟓: 𝐈𝐝𝐞𝐧𝐭𝐢𝐟𝐲 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫𝐬 𝐰𝐡𝐨 𝐩𝐮𝐫𝐜𝐡𝐚𝐬𝐞𝐝 𝐩𝐫𝐨𝐝𝐮𝐜𝐭𝐬 𝐟𝐫𝐨𝐦 𝐚𝐥𝐥 𝐚𝐯𝐚𝐢𝐥𝐚𝐛𝐥𝐞 𝐜𝐚𝐭𝐞𝐠𝐨𝐫𝐢𝐞𝐬.
*/

## 𝐂𝐚𝐭𝐞𝐠𝐨𝐫𝐲 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE Categories_Data_ ( 
CategoryID INT PRIMARY KEY,
 CategoryName VARCHAR(50) );

## 𝐂𝐚𝐭𝐞𝐠𝐨𝐫𝐲 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO Categories_Data_
VALUES (1, 'Electronics'),
(2, 'Books'),
(3, 'Clothing');
 
## 𝐏𝐫𝐨𝐝𝐮𝐜𝐭𝐬 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE Products_Data_ ( 
ProductID INT PRIMARY KEY,
 ProductName VARCHAR(100), 
CategoryID INT FOREIGN KEY REFERENCES Categories_Data_(CategoryID) );
 
## 𝐏𝐫𝐨𝐝𝐮𝐜𝐭𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚 :- 
INSERT INTO Products_Data_
VALUES 
(1, 'Laptop', 1),(2, 'Smartphone', 1),(3, 'Novel', 2),(4, 'T-Shirt', 3),
(5, 'Jeans', 3),(6, 'Textbook', 2);

## 𝐂𝐮𝐬𝐭𝐨𝐦𝐞𝐫𝐬 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE Customers_ ( 
CustomerID INT PRIMARY KEY,
 CustomerName VARCHAR(100)
);

## 𝐂𝐮𝐬𝐭𝐨𝐦𝐞𝐫𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO Customers_ 
VALUES (101, 'Alice'), 
(102, 'Bob'),
(103, 'Charlie');
 
## 𝐏𝐮𝐫𝐜𝐡𝐚𝐬𝐞 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE Purchases_data_ (
 PurchaseID INT PRIMARY KEY,
 CustomerID INT FOREIGN KEY REFERENCES Customers(CustomerID),
 ProductID INT FOREIGN KEY REFERENCES Products_Data(ProductID),
 PurchaseDate DATE
);

## 𝐏𝐮𝐫𝐜𝐡𝐚𝐬𝐞 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO Purchases_data_
VALUES
(1, 101, 1, '2024-01-10'), (2, 101, 3, '2024-01-12'), 
(3, 101, 4, '2024-01-15'),  (4, 102, 1, '2024-02-10'), 
(5, 102, 3, '2024-02-12'),  (6, 103, 4, '2024-03-10'), 
(7, 103, 6, '2024-03-12'),  (8, 103, 2, '2024-03-14');


## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭

+-------------+--------------+
| 𝐂𝐮𝐬𝐭𝐨𝐦𝐞𝐫𝐈𝐃  |𝐂𝐮𝐬𝐭𝐨𝐦𝐞𝐫𝐍𝐚𝐦𝐞|
+-------------+--------------+
| 101         | Alice        |
| 103         | Charlie      |
+-------------+--------------+

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟔: 𝐂𝐚𝐥𝐜𝐮𝐥𝐚𝐭𝐞 𝐭𝐡𝐞 𝐜𝐮𝐦𝐮𝐥𝐚𝐭𝐢𝐯𝐞 𝐬𝐚𝐥𝐞𝐬 𝐟𝐨𝐫 𝐞𝐚𝐜𝐡 𝐬𝐭𝐨𝐫𝐞, 𝐛𝐮𝐭 𝐨𝐧𝐥𝐲 
𝐢𝐧𝐜𝐥𝐮𝐝𝐞 𝐝𝐚𝐭𝐞𝐬 𝐰𝐡𝐞𝐫𝐞 𝐭𝐡𝐞 𝐝𝐚𝐢𝐥𝐲 𝐬𝐚𝐥𝐞𝐬 𝐞𝐱𝐜𝐞𝐞𝐝𝐞𝐝 𝐭𝐡𝐞 𝐬𝐭𝐨𝐫𝐞'𝐬 𝐚𝐯𝐞𝐫𝐚𝐠𝐞 𝐝𝐚𝐢𝐥𝐲 𝐬𝐚𝐥𝐞𝐬.
*/

## 𝐒𝐚𝐥𝐞𝐬 𝐓𝐚𝐛𝐥𝐞
CREATE TABLE Sales_Data_ (
    Store_ID INT,
    Sale_Date DATE,
    Daily_Sales INT
);

## 𝐒𝐚𝐦𝐩𝐥𝐞 𝐒𝐚𝐥𝐞𝐬 𝐃𝐚𝐭𝐚
INSERT INTO Sales_Data_ (Store_ID, Sale_Date, Daily_Sales) VALUES
(1, '2024-06-01', 1000),(1, '2024-06-02', 1200),(1, '2024-06-03', 800),
(1, '2024-06-04', 1500),(2, '2024-06-01', 500),
(2, '2024-06-02', 700),(2, '2024-06-03', 900),
(2, '2024-06-04', 400);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+----------+------------+-------------+-------------+
| 𝐬𝐭𝐨𝐫𝐞_𝐢𝐝  | 𝐬𝐚𝐥𝐞_𝐝𝐚𝐭𝐞   | 𝐝𝐚𝐢𝐥𝐲_𝐬𝐚𝐥𝐞𝐬  | 𝐜𝐮𝐦𝐦𝐮_𝐬𝐮𝐦 |
+----------+------------+-------------+-------------+
|    1     | 2024-06-02 |    1200     |    1200     |
|    1     | 2024-06-04 |    1500     |    2700     |
|    2     | 2024-06-02 |     700     |     700     |
|    2     | 2024-06-03 |     900     |    1600     |
+----------+------------+-------------+-------------+

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟕: 𝐋𝐢𝐬𝐭 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐰𝐡𝐨 𝐞𝐚𝐫𝐧 𝐦𝐨𝐫𝐞 𝐭𝐡𝐚𝐧 𝐭𝐡𝐞𝐢𝐫 𝐝𝐞𝐩𝐚𝐫𝐭𝐦𝐞𝐧𝐭 𝐚𝐯𝐞𝐫𝐚𝐠𝐞.
*/

## 𝐃𝐞𝐩𝐚𝐫𝐭𝐦𝐞𝐧𝐭 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE Departments_ (
    DeptID INT PRIMARY KEY,
    DeptName VARCHAR(50)
);

## 𝐃𝐞𝐩𝐚𝐫𝐭𝐞𝐦𝐞𝐧𝐭 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚 
INSERT INTO Departments_ (DeptID, DeptName) VALUES
(1, 'IT'),
(2, 'HR'),
(3, 'Finance');

## 𝐄𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE Employees_Data (
    EmpID INT PRIMARY KEY,
    EmpName VARCHAR(50),
    Salary INT,
    DeptID INT,
    FOREIGN KEY (DeptID) REFERENCES Departments(DeptID)
);

## 𝐄𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO Employees_Data (EmpID, EmpName, Salary, DeptID) VALUES
(101, 'Alice', 70000, 1),(102, 'Bob', 80000, 1),
(103, 'Charlie', 60000, 1),(104, 'David', 40000, 2),
(105, 'Eve', 50000, 2),(106, 'Frank', 90000, 3),
(107, 'Grace', 85000, 3),
(108, 'Hank', 75000, 3);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+------------+--------------+--------+---------+
|  𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐈𝐃| 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐧𝐚𝐦𝐞| 𝐬𝐚𝐥𝐚𝐫𝐲 |𝐝𝐞𝐩𝐭_𝐢𝐝|
+------------+--------------+--------+---------+
|    102     |     Bob      | 80000  |    1    |
|    105     |     Eve      | 50000  |    2    |
|    106     |    Frank     | 90000  |    3    |
|    107     |    Grace     | 85000  |    3    |
+------------+--------------+--------+---------+

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟖: 𝐈𝐝𝐞𝐧𝐭𝐢𝐟𝐲 𝐩𝐫𝐨𝐝𝐮𝐜𝐭𝐬 𝐭𝐡𝐚𝐭 𝐡𝐚𝐯𝐞 𝐛𝐞𝐞𝐧 𝐬𝐨𝐥𝐝 𝐛𝐮𝐭 𝐡𝐚𝐯𝐞 𝐧𝐨 𝐫𝐞𝐜𝐨𝐫𝐝 𝐢𝐧 𝐭𝐡𝐞 𝐩𝐫𝐨𝐝𝐮𝐜𝐭𝐬 𝐭𝐚𝐛𝐥𝐞
𝐚𝐧𝐝 𝐚𝐥𝐬𝐨 𝐜𝐚𝐥𝐜𝐮𝐥𝐚𝐭𝐞 𝐡𝐨𝐰 𝐦𝐚𝐧𝐲 𝐭𝐢𝐦𝐞𝐬 𝐞𝐚𝐜𝐡 𝐦𝐢𝐬𝐬𝐢𝐧𝐠 𝐩𝐫𝐨𝐝𝐮𝐜𝐭 𝐡𝐚𝐬 𝐛𝐞𝐞𝐧 𝐬𝐨𝐥𝐝.
*/

## 𝐏𝐫𝐨𝐝𝐮𝐜𝐭𝐬 𝐃𝐞𝐭𝐚𝐢𝐥𝐬 𝐓𝐚𝐛𝐥𝐞
CREATE TABLE Products_details (
    ProductID INT PRIMARY KEY,
    ProductName VARCHAR(50)
);

## 𝐏𝐫𝐨𝐝𝐮𝐜𝐭𝐬 𝐃𝐞𝐭𝐚𝐢𝐥𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚 
INSERT INTO Products_details (ProductID, ProductName) VALUES
(1, 'Smartphone'),
(2, 'Laptop'),
(3, 'Tablet');

## 𝐒𝐚𝐥𝐞𝐬 𝐃𝐞𝐭𝐚𝐢𝐥𝐬 𝐓𝐚𝐛𝐥𝐞
CREATE TABLE Sales_details (
    SaleID INT PRIMARY KEY,
    ProductID INT,
    SaleDate DATE,
    SaleAmount DECIMAL(10,2)
);

## 𝐒𝐚𝐥𝐞𝐬 𝐃𝐞𝐭𝐚𝐢𝐥𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚 
INSERT INTO Sales_details (SaleID, ProductID, SaleDate, SaleAmount) VALUES
(101, 1, '2024-06-01', 15000.00),
(102, 4, '2024-06-02', 20000.00),  
(103, 5, '2024-06-03', 30000.00),  
(104, 4, '2024-06-04', 20000.00),
(105, 1, '2024-06-05', 15000.00),
(106, 5, '2024-06-06', 30000.00),
(107, 2, '2024-06-07', 25000.00);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-----------------+--------------------------+
| 𝐒𝐨𝐥𝐝_𝐩𝐫𝐨𝐝𝐮𝐜𝐭𝐈𝐃  | 𝐌𝐢𝐬𝐬𝐢𝐧𝐠_𝐏𝐫𝐨𝐝𝐮𝐜𝐭_𝐒𝐚𝐥𝐞_𝐜𝐧𝐭   |
+-----------------+--------------------------+
|        4        |            2             |
|        5        |            2             |
+-----------------+--------------------------+

-------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟗: 𝐈𝐝𝐞𝐧𝐭𝐢𝐟𝐲 𝐬𝐮𝐩𝐩𝐥𝐢𝐞𝐫𝐬 𝐰𝐡𝐨𝐬𝐞 𝐚𝐯𝐞𝐫𝐚𝐠𝐞 𝐝𝐞𝐥𝐢𝐯𝐞𝐫𝐲 𝐭𝐢𝐦𝐞 𝐢𝐬 𝐥𝐞𝐬𝐬
𝐭𝐡𝐚𝐧 𝟐 𝐝𝐚𝐲𝐬, 𝐛𝐮𝐭 𝐨𝐧𝐥𝐲 𝐜𝐨𝐧𝐬𝐢𝐝𝐞𝐫 𝐝𝐞𝐥𝐢𝐯𝐞𝐫𝐢𝐞𝐬 𝐰𝐢𝐭𝐡 𝐪𝐮𝐚𝐧𝐭𝐢𝐭𝐢𝐞𝐬 𝐠𝐫𝐞𝐚𝐭𝐞𝐫 𝐭𝐡𝐚𝐧 𝟏𝟎𝟎 𝐮𝐧𝐢𝐭𝐬.
*/

## 𝐒𝐮𝐩𝐩𝐥𝐢𝐞𝐫𝐬 𝐃𝐚𝐭𝐚 𝐓𝐚𝐛𝐥𝐞 :- 
CREATE TABLE Suppliers_Data (
    SupplierID INT PRIMARY KEY,
    SupplierName VARCHAR(100)
);

## 𝐒𝐮𝐩𝐩𝐥𝐢𝐞𝐫𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚 :-
INSERT INTO Suppliers_Data (SupplierID, SupplierName)
VALUES 
(1, 'Alpha Supplies'),
(2, 'Beta Traders'),
(3, 'Gamma Distributors'),
(4, 'Delta Logistics');

## 𝐃𝐞𝐥𝐢𝐯𝐞𝐫𝐢𝐞𝐬 𝐓𝐚𝐛𝐥𝐞:-
CREATE TABLE Deliveries (
    DeliveryID INT PRIMARY KEY,
    SupplierID INT,
    OrderDate DATE,
    DeliveryDate DATE,
    Quantity INT,
    FOREIGN KEY (SupplierID) REFERENCES Suppliers_Data(SupplierID)
);

## 𝐃𝐞𝐥𝐢𝐯𝐞𝐫𝐢𝐞𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚 :-
INSERT INTO Deliveries (DeliveryID, SupplierID, OrderDate, DeliveryDate, Quantity)
VALUES 
(101, 1, '2024-06-01', '2024-06-02', 120),(102, 1, '2024-06-03', '2024-06-05', 80),    
(103, 1, '2024-06-05', '2024-06-06', 150),(104, 2, '2024-06-02', '2024-06-05', 200),   
(105, 2, '2024-06-04', '2024-06-06', 110),(106, 3, '2024-06-03', '2024-06-04', 130),  
(107, 3, '2024-06-06', '2024-06-08', 140), (108, 4, '2024-06-07', '2024-06-08', 90),    
(109, 4, '2024-06-09', '2024-06-12', 160); 


## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+------------+-------------------+
| 𝐒𝐮𝐩𝐩𝐥𝐢𝐞𝐫𝐈𝐃  | 𝐒𝐮𝐩𝐩𝐥𝐢𝐞𝐫𝐍𝐚𝐦𝐞      |
+------------+-------------------+
| 1          | Alpha Supplies    |
| 3          | Gamma Distributors|
+------------+-------------------+

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟏𝟎: 𝐅𝐢𝐧𝐝 𝐭𝐡𝐞 𝐭𝐨𝐩 𝟐 𝐦𝐨𝐬𝐭 𝐟𝐫𝐞𝐪𝐮𝐞𝐧𝐭 𝐩𝐫𝐨𝐝𝐮𝐜𝐭 𝐜𝐨𝐦𝐛𝐢𝐧𝐚𝐭𝐢𝐨𝐧𝐬 𝐛𝐨𝐮𝐠𝐡𝐭 𝐭𝐨𝐠𝐞𝐭𝐡𝐞𝐫.
*/

## 𝐎𝐫𝐝𝐞𝐫𝐬 𝐓𝐚𝐛𝐥𝐞:-
CREATE TABLE Orders_details_ (
    OrderID INT,
    ProductName VARCHAR(50)
);

## 𝐎𝐫𝐝𝐞𝐫𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO Orders_details_ (OrderID, ProductName)
VALUES
(1, 'Milk'),(1, 'Bread'),(1, 'Butter'),(2, 'Milk'),
(2, 'Bread'),(3, 'Milk'),(3, 'Butter'),(4, 'Bread'),
(4, 'Butter'),(5, 'Milk'),(5, 'Bread'),(5, 'Butter'),
(6, 'Milk'),(6, 'Bread'),(7, 'Bread'),(7, 'Butter'),
(8, 'Milk'), (8, 'Butter');

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+----------+----------+---------------+
| 𝐩𝐫𝐨𝐝𝐮𝐜𝐭𝟏 | 𝐩𝐫𝐨𝐝𝐮𝐜𝐭𝟐  | 𝐩𝐚𝐢𝐫𝐟𝐫𝐞𝐪𝐮𝐞𝐧𝐜𝐲 |
+----------+----------+---------------+
| Butter   | Milk     | 4             |
| Bread    | Milk     | 4             |
+----------+----------+---------------+

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟏𝟏: 𝐂𝐚𝐥𝐜𝐮𝐥𝐚𝐭𝐞 𝐭𝐡𝐞 𝐦𝐨𝐯𝐢𝐧𝐠 𝐚𝐯𝐞𝐫𝐚𝐠𝐞 𝐨𝐟 𝐬𝐚𝐥𝐞𝐬 𝐟𝐨𝐫 𝐞𝐚𝐜𝐡 𝐩𝐫𝐨𝐝𝐮𝐜𝐭 𝐨𝐯𝐞𝐫 𝐚 𝟕-𝐝𝐚𝐲 𝐰𝐢𝐧𝐝𝐨𝐰.
*/

## 𝐏𝐫𝐨𝐝𝐮𝐜𝐭 𝐒𝐚𝐥𝐞𝐬 𝐓𝐚𝐛𝐥𝐞:-
CREATE TABLE product_sales (
    sale_id INT PRIMARY KEY,
    product_id VARCHAR(10),
    sale_date DATE,
    sales_amount INT
);

## 𝐏𝐫𝐨𝐝𝐮𝐜𝐭 𝐒𝐚𝐥𝐞𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO product_sales VALUES
(1, 'P001', '2024-01-01', 100),(2, 'P001', '2024-01-03', 150),
(3, 'P001', '2024-01-05', 200),(4, 'P001', '2024-01-06', 180),
(5, 'P001', '2024-01-07', 170),(6, 'P001', '2024-01-08', 190),
(7, 'P001', '2024-01-09', 210),(8, 'P001', '2024-01-10', 220),
(9, 'P002', '2024-01-01', 120),(10, 'P002', '2024-01-04', 130),
(11, 'P002', '2024-01-06', 160),(12, 'P002', '2024-01-09', 140),
(13, 'P002', '2024-01-10', 150);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+---------+------------+------------------------+
| sale_id | product_id | avg_sales_last_7_entries |
+---------+------------+------------------------+
| 1       | P001       | 100                    |
| 2       | P001       | 125                    |
| 3       | P001       | 150                    |
| 4       | P001       | 157                    |
| 5       | P001       | 160                    |
| 6       | P001       | 165                    |
| 7       | P001       | 171                    |
| 8       | P001       | 188                    |
| 9       | P002       | 120                    |
| 10      | P002       | 125                    |
| 11      | P002       | 136                    |
| 12      | P002       | 137                    |
| 13      | P002       | 140                    |
+---------+------------+------------------------+

---------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟏𝟐: 𝐑𝐚𝐧𝐤 𝐬𝐭𝐨𝐫𝐞𝐬 𝐛𝐲 𝐭𝐡𝐞𝐢𝐫 𝐦𝐨𝐧𝐭𝐡𝐥𝐲 𝐬𝐚𝐥𝐞𝐬 𝐩𝐞𝐫𝐟𝐨𝐫𝐦𝐚𝐧𝐜𝐞.
*/

## 𝐒𝐭𝐨𝐫𝐞 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE store_sales (
    sale_id INT,
    store_id INT,
    store_name VARCHAR(50),
    sale_date DATE,
    sales_amount DECIMAL(10, 2)
);

## 𝐒𝐭𝐨𝐫𝐞 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO store_sales VALUES
(1, 101, 'Store A', '2024-01-15', 10000.00),
(2, 102, 'Store B', '2024-01-20', 15000.00),
(3, 103, 'Store C', '2024-01-25', 12000.00),
(4, 101, 'Store A', '2024-02-10', 14000.00),
(5, 102, 'Store B', '2024-02-18', 13000.00),
(6, 103, 'Store C', '2024-02-25', 16000.00),
(7, 101, 'Store A', '2024-03-05', 11000.00),
(8, 102, 'Store B', '2024-03-15', 9000.00),
(9, 103, 'Store C', '2024-03-20', 12500.00);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-------+----------+------------+-----------+-----+
| month | store_id | store_name | total_amt | rnk |
+-------+----------+------------+-----------+-----+
| 1     | 102      | Store B    | 15000.00  | 1   |
| 1     | 103      | Store C    | 12000.00  | 2   |
| 1     | 101      | Store A    | 10000.00  | 3   |
| 2     | 103      | Store C    | 16000.00  | 1   |
| 2     | 101      | Store A    | 14000.00  | 2   |
| 2     | 102      | Store B    | 13000.00  | 3   |
| 3     | 103      | Store C    | 12500.00  | 1   |
| 3     | 101      | Store A    | 11000.00  | 2   |
| 3     | 102      | Store B    | 9000.00   | 3   |
+-------+----------+------------+-----------+-----+

--------------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟏𝟑: 𝐅𝐢𝐧𝐝 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫𝐬 𝐰𝐡𝐨 𝐩𝐥𝐚𝐜𝐞𝐝 𝐦𝐨𝐫𝐞 𝐭𝐡𝐚𝐧 𝟓𝟎% 𝐨𝐟 𝐭𝐡𝐞𝐢𝐫 𝐨𝐫𝐝𝐞𝐫𝐬 𝐢𝐧 𝐭𝐡𝐞 𝐥𝐚𝐬𝐭 𝐦𝐨𝐧𝐭𝐡.
*/

## 𝐂𝐮𝐬𝐭𝐨𝐦𝐞𝐫𝐬 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE customers_data_ (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(100)
);

## 𝐂𝐮𝐬𝐭𝐨𝐦𝐞𝐫𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚
INSERT INTO customers_data_ (customer_id, customer_name) VALUES
(1, 'Alice'),
(2, 'Bob'),
(3, 'Charlie'),
(4, 'David');

-- 𝐎𝐫𝐝𝐞𝐫𝐬 𝐓𝐚𝐛𝐥𝐞
CREATE TABLE orders_data_ (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    FOREIGN KEY (customer_id) REFERENCES customers_data_(customer_id)
);

-- 𝐈𝐧𝐬𝐞𝐫𝐭 𝐬𝐚𝐦𝐩𝐥𝐞 𝐨𝐫𝐝𝐞𝐫𝐬  
INSERT INTO orders_data_ (order_id, customer_id, order_date) VALUES
(101, 1, '2025-06-05'),(102, 1, '2025-05-10'),(103, 1, '2025-06-15'),
(104, 1, '2025-04-20'),(105, 2, '2025-06-02'),(106, 2, '2025-06-08'),
(107, 3, '2025-04-01'),(108, 3, '2025-05-03'),(109, 3, '2025-06-25'),
(110, 4, '2025-05-18'),
(111, 4, '2025-05-25');

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-------------+-------------+---------------+
| 𝐎𝐫𝐝𝐞𝐫_𝐦𝐨𝐧𝐭𝐡 | 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫_𝐢𝐝 | 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫_𝐧𝐚𝐦𝐞|
+-------------+-------------+---------------+
| May         | 4           | David         |
+-------------+-------------+---------------+

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


