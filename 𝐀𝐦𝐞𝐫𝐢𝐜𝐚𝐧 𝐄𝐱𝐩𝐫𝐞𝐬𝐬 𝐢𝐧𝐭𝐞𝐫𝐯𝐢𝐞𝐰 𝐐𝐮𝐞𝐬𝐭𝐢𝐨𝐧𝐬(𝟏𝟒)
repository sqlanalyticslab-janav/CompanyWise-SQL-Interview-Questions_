                                                                   # 𝐀𝐦𝐞𝐫𝐢𝐜𝐚𝐧 𝐄𝐱𝐩𝐫𝐞𝐬𝐬 𝐢𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧𝐬

## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟏:𝐖𝐫𝐢𝐭𝐞 𝐚 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐟𝐢𝐧𝐝 𝐝𝐮𝐩𝐥𝐢𝐜𝐚𝐭𝐞 𝐫𝐨𝐰𝐬 𝐢𝐧 𝐚 𝐭𝐚𝐛𝐥𝐞.
/*

## 𝐓𝐚𝐛𝐥𝐞
CREATE DATABASE American_Express;

USE American_Express;
CREATE TABLE employees (
    emp_id INT PRIMARY KEY,
    name VARCHAR(50),
    department VARCHAR(50),
    salary INT
);

## 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚
INSERT INTO employees (emp_id, name, department, salary) VALUES
(101, 'Alice', 'HR', 50000),
(102, 'Bob', 'IT', 60000),
(103, 'Alice', 'HR', 50000),
(104, 'Charlie', 'Finance', 70000),
(105, 'David', 'IT', 60000),
(106, 'Alice', 'HR', 50000),
(107, 'Eve', 'Marketing', 55000);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+--------+-------------+-----+
| name   | department  | cnt |
+--------+-------------+-----+
| Alice  | HR          | 3   |
+--------+-------------+-----+

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/* 𝐐𝟐)𝐖𝐫𝐢𝐭𝐞 𝐚 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐟𝐞𝐭𝐜𝐡 𝐭𝐡𝐞 𝐬𝐞𝐜𝐨𝐧𝐝-𝐡𝐢𝐠𝐡𝐞𝐬𝐭 𝐬𝐚𝐥𝐚𝐫𝐲 𝐟𝐫𝐨𝐦 𝐚𝐧 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞 𝐭𝐚𝐛𝐥𝐞.*/

## 𝐓𝐚𝐛𝐥𝐞
CREATE DATABASE American_Express;

USE American_Express;
CREATE TABLE employees (
    emp_id INT PRIMARY KEY,
    name VARCHAR(50),
    department VARCHAR(50),
    salary INT
);

## 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚
INSERT INTO employees (emp_id, name, department, salary) VALUES
(101, 'Alice', 'HR', 50000),
(102, 'Bob', 'IT', 60000),
(103, 'Alice', 'HR', 50000),
(104, 'Charlie', 'Finance', 70000),
(105, 'David', 'IT', 60000),
(106, 'Alice', 'HR', 50000),
(107, 'Eve', 'Marketing', 55000);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-------+--------+-------------+--------+
| empid | name   | department  | salary |
+-------+--------+-------------+--------+
| 105   | David  | IT          | 60000  |
+-------+--------+-------------+--------+
| 102   | Bob    | IT          | 60000  |
+-------+--------+-------------+--------+

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/* 𝐐𝟑)𝐇𝐨𝐰 𝐝𝐨 𝐲𝐨𝐮 𝐮𝐬𝐞 𝐆𝐑𝐎𝐔𝐏 𝐁𝐘 𝐚𝐧𝐝 𝐇𝐀𝐕𝐈𝐍𝐆 𝐭𝐨𝐠𝐞𝐭𝐡𝐞𝐫.*/

## 𝐓𝐚𝐛𝐥𝐞
CREATE DATABASE American_Express;

USE American_Express;
CREATE TABLE employees (
    emp_id INT PRIMARY KEY,
    name VARCHAR(50),
    department VARCHAR(50),
    salary INT
);

## 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚
INSERT INTO employees (emp_id, name, department, salary) VALUES
(101, 'Alice', 'HR', 50000),
(102, 'Bob', 'IT', 60000),
(103, 'Alice', 'HR', 50000),
(104, 'Charlie', 'Finance', 70000),
(105, 'David', 'IT', 60000),
(106, 'Alice', 'HR', 50000),
(107, 'Eve', 'Marketing', 55000);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+------------+-----------+
| department | emp_count |
+------------+-----------+
| Finance    | 1         |
+------------+-----------+
| HR         | 3         |
+------------+-----------+
| IT         | 2         |
+------------+-----------+
| Marketing  | 1         |
+------------+-----------+

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/* 𝐐𝟒). 𝐖𝐫𝐢𝐭𝐞 𝐚 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐟𝐢𝐧𝐝 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐞𝐚𝐫𝐧𝐢𝐧𝐠 𝐦𝐨𝐫𝐞 𝐭𝐡𝐚𝐧 𝐭𝐡𝐞𝐢𝐫 𝐦𝐚𝐧𝐚𝐠𝐞𝐫𝐬.*/

## 𝐓𝐚𝐛𝐥𝐞
CREATE TABLE employees_data (
    emp_id INT PRIMARY KEY,
    name VARCHAR(50),
    salary INT,
    manager_id INT
);

## 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚
INSERT INTO employees_data (emp_id, name, salary, manager_id) VALUES
(1, 'Alice', 80000, NULL),        
(2, 'Bob', 60000, 1),
(3, 'Charlie', 90000, 1),        
(4, 'David', 55000, 2),
(5, 'Eve', 62000, 2),             
(6, 'Frank', 50000, 3);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+--------+---------------+----------------+--------------+----------------+
| emp_id | employee_name | employee_salary| manager_name | manager_salary |
+--------+---------------+----------------+--------------+----------------+
| 3      | Charlie       | 90000          | Alice        | 80000          |
+--------+---------------+----------------+--------------+----------------+
| 5      | Eve           | 62000          | Bob          | 60000          |
+--------+---------------+----------------+--------------+----------------+

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟓:𝐖𝐫𝐢𝐭𝐞 𝐚 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐢𝐝𝐞𝐧𝐭𝐢𝐟𝐲 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫𝐬 𝐰𝐡𝐨 𝐡𝐚𝐯𝐞 𝐦𝐚𝐝𝐞
𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧𝐬 𝐚𝐛𝐨𝐯𝐞 $𝟓,𝟎𝟎𝟎 𝐦𝐮𝐥𝐭𝐢𝐩𝐥𝐞 𝐭𝐢𝐦𝐞𝐬.
*/
## 𝐓𝐚𝐛𝐥𝐞
CREATE TABLE transactions (
    transaction_id INT PRIMARY KEY,
    customer_id INT,
    transaction_amount DECIMAL(10, 2),
    transaction_date DATE
);

## 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚
INSERT INTO transactions (transaction_id, customer_id, transaction_amount, transaction_date) VALUES
(1, 101, 4500.00, '2024-01-10'),
(2, 102, 5200.00, '2024-01-12'),
(3, 101, 7000.00, '2024-01-15'),
(4, 103, 3000.00, '2024-01-18'),
(5, 102, 5100.00, '2024-01-20'),
(6, 104, 9000.00, '2024-01-22'),
(7, 102, 1500.00, '2024-01-25'),
(8, 105, 6000.00, '2024-01-27'),
(9, 101, 5100.00, '2024-01-30'),
(10, 104, 2500.00, '2024-02-01');

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-------------+-----------------------+
| customer_id | high_value_txn_count  |
+-------------+-----------------------+
| 101         | 2                     |
+-------------+-----------------------+
| 102         | 2                     |
+-------------+-----------------------+

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟔:𝐖𝐫𝐢𝐭𝐞 𝐚 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐜𝐚𝐥𝐜𝐮𝐥𝐚𝐭𝐞 𝐭𝐡𝐞 𝐜𝐮𝐦𝐮𝐥𝐚𝐭𝐢𝐯𝐞 𝐬𝐮𝐦 𝐨𝐟 𝐬𝐚𝐥𝐞𝐬.
*/

## 𝐓𝐚𝐛𝐥𝐞
CREATE TABLE transactions (
    transaction_id INT PRIMARY KEY,
    customer_id INT,
    transaction_amount DECIMAL(10, 2),
    transaction_date DATE

## 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚
INSERT INTO transactions (transaction_id, customer_id, transaction_amount, transaction_date) VALUES
(1, 101, 4500.00, '2024-01-10'),
(2, 102, 5200.00, '2024-01-12'),
(3, 101, 7000.00, '2024-01-15'),
(4, 103, 3000.00, '2024-01-18'),
(5, 102, 5100.00, '2024-01-20'),
(6, 104, 9000.00, '2024-01-22'),
(7, 102, 1500.00, '2024-01-25'),
(8, 105, 6000.00, '2024-01-27'),
(9, 101, 5100.00, '2024-01-30'),
(10, 104, 2500.00, '2024-02-01');


## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+----------------+-------------+----------------+--------------------+-----------------+
| transaction_id | customer_id | transaction_date| transaction_amount | cumulative_sales|
+----------------+-------------+----------------+--------------------+-----------------+
| 1              | 101         | 2024-01-10     | 4500.00            | 4500.00         |
+----------------+-------------+----------------+--------------------+-----------------+
| 2              | 102         | 2024-01-12     | 5200.00            | 9700.00         |
+----------------+-------------+----------------+--------------------+-----------------+
| 3              | 101         | 2024-01-15     | 7000.00            | 16700.00        |
+----------------+-------------+----------------+--------------------+-----------------+
| 4              | 103         | 2024-01-18     | 3000.00            | 19700.00        |
+----------------+-------------+----------------+--------------------+-----------------+
| 5              | 102         | 2024-01-20     | 5100.00            | 24800.00        |
+----------------+-------------+----------------+--------------------+-----------------+
| 6              | 104         | 2024-01-22     | 9000.00            | 33800.00        |
+----------------+-------------+----------------+--------------------+-----------------+
| 7              | 102         | 2024-01-25     | 1500.00            | 35300.00        |
+----------------+-------------+----------------+--------------------+-----------------+
| 8              | 105         | 2024-01-27     | 6000.00            | 41300.00        |
+----------------+-------------+----------------+--------------------+-----------------+
| 9              | 101         | 2024-01-30     | 5100.00            | 46400.00        |
+----------------+-------------+----------------+--------------------+-----------------+
| 10             | 104         | 2024-02-01     | 2500.00            | 48900.00        |
+----------------+-------------+----------------+--------------------+-----------------+

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟕:𝐖𝐫𝐢𝐭𝐞 𝐚 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐜𝐚𝐥𝐜𝐮𝐥𝐚𝐭𝐞 𝐭𝐡𝐞 𝐜𝐮𝐦𝐮𝐥𝐚𝐭𝐢𝐯𝐞 𝐬𝐮𝐦 𝐨𝐟 𝐬𝐚𝐥𝐞𝐬.
*/

## 𝐓𝐚𝐛𝐥𝐞
CREATE TABLE transactions (
    transaction_id INT PRIMARY KEY,
    customer_id INT,
    transaction_amount DECIMAL(10, 2),
    transaction_date DATE

## 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚
INSERT INTO transactions (transaction_id, customer_id, transaction_amount, transaction_date) VALUES
(1, 101, 4500.00, '2024-01-10'),
(2, 102, 5200.00, '2024-01-12'),
(3, 101, 7000.00, '2024-01-15'),
(4, 103, 3000.00, '2024-01-18'),
(5, 102, 5100.00, '2024-01-20'),
(6, 104, 9000.00, '2024-01-22'),
(7, 102, 1500.00, '2024-01-25'),
(8, 105, 6000.00, '2024-01-27'),
(9, 101, 5100.00, '2024-01-30'),
(10, 104, 2500.00, '2024-02-01');

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+----------------+-------------+----------------+--------------------+-----------------+
| transaction_id | customer_id | transaction_date| transaction_amount | cumulative_sales|
+----------------+-------------+----------------+--------------------+-----------------+
| 1              | 101         | 2024-01-10     | 4500.00            | 4500.00         |
+----------------+-------------+----------------+--------------------+-----------------+
| 2              | 102         | 2024-01-12     | 5200.00            | 9700.00         |
+----------------+-------------+----------------+--------------------+-----------------+
| 3              | 101         | 2024-01-15     | 7000.00            | 16700.00        |
+----------------+-------------+----------------+--------------------+-----------------+
| 4              | 103         | 2024-01-18     | 3000.00            | 19700.00        |
+----------------+-------------+----------------+--------------------+-----------------+
| 5              | 102         | 2024-01-20     | 5100.00            | 24800.00        |
+----------------+-------------+----------------+--------------------+-----------------+
| 6              | 104         | 2024-01-22     | 9000.00            | 33800.00        |
+----------------+-------------+----------------+--------------------+-----------------+
| 7              | 102         | 2024-01-25     | 1500.00            | 35300.00        |
+----------------+-------------+----------------+--------------------+-----------------+
| 8              | 105         | 2024-01-27     | 6000.00            | 41300.00        |
+----------------+-------------+----------------+--------------------+-----------------+
| 9              | 101         | 2024-01-30     | 5100.00            | 46400.00        |
+----------------+-------------+----------------+--------------------+-----------------+
| 10             | 104         | 2024-02-01     | 2500.00            | 48900.00        |
+----------------+-------------+----------------+--------------------+-----------------+

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟖:𝐖𝐫𝐢𝐭𝐞 𝐚 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐟𝐢𝐧𝐝 𝐚𝐥𝐥 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫𝐬 𝐰𝐡𝐨 𝐡𝐚𝐯𝐞 𝐧𝐨𝐭 𝐦𝐚𝐝𝐞
𝐚𝐧𝐲 𝐩𝐮𝐫𝐜𝐡𝐚𝐬𝐞𝐬 𝐢𝐧 𝐭𝐡𝐞 𝐥𝐚𝐬𝐭 𝟔 𝐦𝐨𝐧𝐭𝐡𝐬.
*/

## 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫𝐬 𝐓𝐚𝐛𝐥𝐞
CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(50)
);

## 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚
INSERT INTO customers (customer_id, customer_name) VALUES
(1, 'Alice'),
(2, 'Bob'),
(3, 'Charlie'),
(4, 'David'),
(5, 'Eve');

## 𝐩𝐮𝐫𝐜𝐡𝐚𝐬𝐞𝐬 𝐓𝐚𝐛𝐥𝐞
CREATE TABLE purchases (
    purchase_id INT PRIMARY KEY,
    customer_id INT,
    purchase_date DATE
);

## 𝐩𝐮𝐫𝐜𝐡𝐚𝐬𝐞𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚
INSERT INTO purchases (purchase_id, customer_id, purchase_date) VALUES
(101, 1, '2024-10-10'),
(102, 2, '2024-11-05'),
(103, 3, '2025-01-20'),
(104, 1, '2025-03-15'),
(105, 2, '2025-04-01');


## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-------------+----------------+
| customer_id | customer_name  |
+-------------+----------------+
| 4           | David          |
+-------------+----------------+
| 5           | Eve            |
+-------------+----------------+
 

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟗:𝐇𝐨𝐰 𝐰𝐨𝐮𝐥𝐝 𝐲𝐨𝐮 𝐝𝐞𝐭𝐞𝐫𝐦𝐢𝐧𝐞 𝐭𝐡𝐞 𝐀𝐯𝐞𝐫𝐚𝐠𝐞 𝐑𝐞𝐯𝐞𝐧𝐮𝐞 𝐏𝐞𝐫 𝐔𝐬𝐞𝐫
(𝐀𝐑𝐏𝐔) 𝐟𝐫𝐨𝐦 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧 𝐝𝐚𝐭𝐚?
*/

## 𝐓𝐚𝐛𝐥𝐞
CREATE TABLE transactions_data (
    transaction_id INT PRIMARY KEY,
    customer_id INT,
    transaction_amount DECIMAL(10, 2),
    transaction_date DATE
);

## 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚
INSERT INTO transactions_data (transaction_id, customer_id, transaction_amount, transaction_date) VALUES
(1, 101, 200.00, '2025-01-05'),
(2, 102, 500.00, '2025-01-06'),
(3, 101, 150.00, '2025-01-10'),
(4, 103, 300.00, '2025-01-12'),
(5, 104, 250.00, '2025-01-15'),
(6, 102, 350.00, '2025-01-18'),
(7, 105, 400.00, '2025-01-20'),
(8, 106, 100.00, '2025-01-22');

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+--------+
| ARPU   |
+--------+
| 375.00 |
+--------+

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟏𝟎: 𝐖𝐫𝐢𝐭𝐞 𝐚 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐜𝐚𝐥𝐜𝐮𝐥𝐚𝐭𝐞 𝐘𝐨𝐘 (𝐘𝐞𝐚𝐫-𝐨𝐯𝐞𝐫-𝐘𝐞𝐚𝐫) 𝐠𝐫𝐨𝐰𝐭𝐡
𝐟𝐨𝐫 𝐚 𝐬𝐞𝐭 𝐨𝐟 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧𝐬.
*/

## 𝐓𝐚𝐛𝐥𝐞
CREATE TABLE transactions_ (
    transaction_id INT PRIMARY KEY,
    customer_id INT,
    transaction_amount DECIMAL(10, 2),
    transaction_date DATE
);

## 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚
INSERT INTO transactions_ (transaction_id, customer_id, transaction_amount, transaction_date) VALUES
-- Transactions in 2023
(1, 101, 1000.00, '2023-02-10'),
(2, 102, 1500.00, '2023-05-15'),
(3, 103, 2000.00, '2023-09-25'),

-- Transactions in 2024
(4, 101, 2200.00, '2024-01-05'),
(5, 104, 1800.00, '2024-04-12'),
(6, 105, 2500.00, '2024-08-30');

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+------+---------------+------------------+---------------------+
| year | total_revenue | prev_year_revenue| yoy_growth_percentage|
+------+---------------+------------------+---------------------+
| 2023 |        4500.00|             NULL |                NULL |
| 2024 |        6500.00|          4500.00 |               44.44 |
+------+---------------+------------------+---------------------+

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟏𝟏: 𝐖𝐫𝐢𝐭𝐞 𝐚 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐟𝐢𝐧𝐝 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫𝐬 𝐰𝐡𝐨 𝐡𝐚𝐯𝐞 𝐮𝐬𝐞𝐝 𝐦𝐨𝐫𝐞 𝐭𝐡𝐚𝐧 𝟐 𝐜𝐫𝐞𝐝𝐢𝐭 𝐜𝐚𝐫𝐝𝐬 𝐟𝐨𝐫 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧𝐬 𝐢𝐧 𝐚 𝐠𝐢𝐯𝐞𝐧 𝐦𝐨𝐧𝐭𝐡.
*/

## 𝐓𝐚𝐛𝐥𝐞
CREATE TABLE transactions_records (
    transaction_id INT PRIMARY KEY,
    customer_id INT,
    credit_card_number VARCHAR(20),
    transaction_date DATE,
    transaction_amount DECIMAL(10, 2)
);

## 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚
INSERT INTO transactions_records (transaction_id, customer_id, credit_card_number, transaction_date, transaction_amount) VALUES
-- Customer 101 used 3 cards in May 2024
(1, 101, '1111-2222-3333-4444', '2024-05-02', 500.00),
(2, 101, '2222-3333-4444-5555', '2024-05-10', 600.00),
(3, 101, '3333-4444-5555-6666', '2024-05-20', 700.00),

-- Customer 102 used only 2 cards in May 2024
(4, 102, '4444-5555-6666-7777', '2024-05-05', 400.00),
(5, 102, '5555-6666-7777-8888', '2024-05-15', 450.00),

-- Customer 103 used 3 cards, but in different months
(6, 103, '6666-7777-8888-9999', '2024-04-12', 300.00),
(7, 103, '7777-8888-9999-0000', '2024-05-12', 350.00),
(8, 103, '8888-9999-0000-1111', '2024-06-01', 375.00),

-- Customer 104 used 3 cards in May 2024
(9, 104, '9999-0000-1111-2222', '2024-05-03', 200.00),
(10, 104, '0000-1111-2222-3333', '2024-05-08', 220.00),
(11, 104, '1111-2222-3333-4444', '2024-05-20', 250.00);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-------------+-----------------+------------------+
| customer_id | transaction_month | unique_cards_used |
+-------------+-----------------+------------------+
|        101  | 2024-05         |        3         |
|        104  | 2024-05         |        3         |
+-------------+-----------------+------------------+

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟏𝟐: 𝐅𝐨𝐫 𝐭𝐡𝐢𝐬 𝐩𝐫𝐨𝐛𝐥𝐞𝐦, 𝐰𝐞 𝐰𝐢𝐥𝐥 𝐜𝐨𝐧𝐬𝐢𝐝𝐞𝐫 𝐚 𝐦𝐚𝐧𝐚𝐠𝐞𝐫 𝐚𝐧 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞 𝐰𝐡𝐨 𝐡𝐚𝐬 𝐚𝐭 
𝐥𝐞𝐚𝐬𝐭 𝟏 𝐨𝐭𝐡𝐞𝐫 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞 𝐫𝐞𝐩𝐨𝐫𝐭𝐢𝐧𝐠 𝐭𝐨 𝐭𝐡𝐞𝐦.

𝐖𝐫𝐢𝐭𝐞 𝐚 𝐬𝐨𝐥𝐮𝐭𝐢𝐨𝐧 𝐭𝐨 𝐫𝐞𝐩𝐨𝐫𝐭 𝐭𝐡𝐞 𝐢𝐝𝐬 𝐚𝐧𝐝 𝐭𝐡𝐞 𝐧𝐚𝐦𝐞𝐬 𝐨𝐟 𝐚𝐥𝐥 𝐦𝐚𝐧𝐚𝐠𝐞𝐫𝐬, 
𝐭𝐡𝐞 𝐧𝐮𝐦𝐛𝐞𝐫 𝐨𝐟 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐰𝐡𝐨 𝐫𝐞𝐩𝐨𝐫𝐭 𝐝𝐢𝐫𝐞𝐜𝐭𝐥𝐲 𝐭𝐨 𝐭𝐡𝐞𝐦, 𝐚𝐧𝐝 𝐭𝐡𝐞 𝐚𝐯𝐞𝐫𝐚𝐠𝐞 
𝐚𝐠𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐫𝐞𝐩𝐨𝐫𝐭𝐬 𝐫𝐨𝐮𝐧𝐝𝐞𝐝 𝐭𝐨 𝐭𝐡𝐞 𝐧𝐞𝐚𝐫𝐞𝐬𝐭 𝐢𝐧𝐭𝐞𝐠𝐞𝐫.

𝐑𝐞𝐭𝐮𝐫𝐧 𝐭𝐡𝐞 𝐫𝐞𝐬𝐮𝐥𝐭 𝐭𝐚𝐛𝐥𝐞 𝐨𝐫𝐝𝐞𝐫𝐞𝐝 𝐛𝐲 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞_𝐢𝐝.
*/

## 𝐓𝐚𝐛𝐥𝐞
CREATE TABLE Employees_ (
 employee_id INT PRIMARY KEY,
 name VARCHAR(50),
 reports_to INT NULL,
 age INT, );

## 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚
INSERT INTO Employees_ (employee_id, name, reports_to, age) VALUES
(1, 'Michael', NULL, 45),(2, 'Alice', 1, 38),
(3, 'Bob', 1, 42),(4, 'Charlie', 2, 34),
(5, 'David', 2, 40),(6, 'Eve', 3, 37),
(7, 'Frank', NULL, 50),(8, 'Grace', NULL, 48);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-------------+--------------+---------------------+----------------+
| employee_id | manager_name | direct_reports_count| avg_report_age |
+-------------+--------------+---------------------+----------------+
|      1      | Michael      |          2          |       40       |
|      2      | Alice        |          2          |       37       |
|      3      | Bob          |          1          |       37       |
+-------------+--------------+---------------------+----------------+

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟏𝟑: 𝐀𝐧𝐚𝐥𝐲𝐳𝐢𝐧𝐠 𝐌𝐨𝐧𝐭𝐡𝐥𝐲 𝐀𝐯𝐞𝐫𝐚𝐠𝐞 𝐒𝐩𝐞𝐧𝐝𝐢𝐧𝐠 𝐨𝐧 𝐂𝐫𝐞𝐝𝐢𝐭 𝐂𝐚𝐫𝐝𝐬
𝐀𝐭 𝐂𝐚𝐩𝐢𝐭𝐚𝐥 𝐎𝐧𝐞, 𝐨𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐦𝐚𝐭𝐭𝐞𝐫𝐬 𝐭𝐡𝐚𝐭 𝐢𝐧𝐭𝐞𝐫𝐞𝐬𝐭 𝐭𝐡𝐞 𝐛𝐚𝐧𝐤 𝐢𝐬 
𝐮𝐧𝐝𝐞𝐫𝐬𝐭𝐚𝐧𝐝𝐢𝐧𝐠 𝐭𝐡𝐞𝐢𝐫 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫𝐬' 𝐬𝐩𝐞𝐧𝐝𝐢𝐧𝐠 𝐡𝐚𝐛𝐢𝐭𝐬. 𝐋𝐞𝐭'𝐬 𝐬𝐚𝐲 𝐲𝐨𝐮'𝐫𝐞 
𝐠𝐢𝐯𝐞𝐧 𝐚 𝐝𝐚𝐭𝐚𝐬𝐞𝐭 𝐨𝐟 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧𝐬 𝐦𝐚𝐝𝐞 𝐛𝐲 𝐜𝐫𝐞𝐝𝐢𝐭 𝐜𝐚𝐫𝐝 𝐡𝐨𝐥𝐝𝐞𝐫𝐬. 𝐓𝐡𝐞 𝐝𝐚𝐭𝐚𝐬𝐞𝐭
𝐩𝐫𝐨𝐯𝐢𝐝𝐞𝐬 𝐭𝐡𝐞 𝐮𝐬𝐞𝐫_𝐢𝐝, 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧 𝐚𝐦𝐨𝐮𝐧𝐭, 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧 𝐝𝐚𝐭𝐞, 𝐚𝐧𝐝 𝐭𝐡𝐞 𝐜𝐚𝐫𝐝 𝐭𝐲𝐩𝐞.

𝐓𝐨 𝐚𝐬𝐬𝐢𝐬𝐭 𝐭𝐡𝐞 𝐛𝐚𝐧𝐤 𝐢𝐧 𝐮𝐧𝐝𝐞𝐫𝐬𝐭𝐚𝐧𝐝𝐢𝐧𝐠 𝐭𝐡𝐞𝐢𝐫 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫𝐬' 𝐛𝐞𝐡𝐚𝐯𝐢𝐨𝐫 𝐛𝐞𝐭𝐭𝐞𝐫,
𝐜𝐚𝐧 𝐲𝐨𝐮 𝐰𝐫𝐢𝐭𝐞 𝐚 𝐒𝐐𝐋 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐜𝐚𝐥𝐜𝐮𝐥𝐚𝐭𝐞 𝐭𝐡𝐞 𝐦𝐨𝐧𝐭𝐡𝐥𝐲 𝐚𝐯𝐞𝐫𝐚𝐠𝐞
𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧 𝐚𝐦𝐨𝐮𝐧𝐭𝐬 𝐟𝐨𝐫 𝐞𝐚𝐜𝐡 𝐜𝐚𝐫𝐝 𝐭𝐲𝐩𝐞 𝐟𝐫𝐨𝐦 𝐉𝐚𝐧𝐮𝐚𝐫𝐲 𝟐𝟎𝟐𝟐 𝐭𝐨 𝐃𝐞𝐜𝐞𝐦𝐛𝐞𝐫 𝟐𝟎𝟐𝟐?
*/

## 𝐓𝐚𝐛𝐥𝐞
CREATE TABLE Capital_One_Transactions_Data (
    transaction_id INT PRIMARY KEY,
    user_id INT,
    transaction_date DATE,
    card_type VARCHAR(20),
    transaction_amount INT
);

## 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚
INSERT INTO Capital_One_Transactions_Data
(transaction_id, user_id, transaction_date, card_type, transaction_amount)
VALUES
(91872, 458, '2022-01-05', 'Visa', 50),
(87263, 321, '2022-01-18', 'Mastercard', 100),
(78142, 156, '2022-02-02', 'Visa', 500),
(81005, 156, '2022-02-12', 'Visa', 300),
(88364, 983, '2022-03-10', 'Mastercard', 200);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+---------+-------------+----------------------+
| month   | card_type   | avg_transaction_amount|
+---------+-------------+----------------------+
| 2022-01 | Mastercard  |        100.00        |
| 2022-01 | Visa        |         50.00        |
| 2022-02 | Visa        |        400.00        |
| 2022-03 | Mastercard  |        200.00        |
+---------+-------------+----------------------+

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/*
𝐐𝟏𝟒)𝐓𝐨𝐩 𝐃𝐞𝐩𝐚𝐫𝐭𝐦𝐞𝐧𝐭 𝐒𝐚𝐥𝐚𝐫𝐢𝐞𝐬

𝐈𝐦𝐚𝐠𝐢𝐧𝐞 𝐲𝐨𝐮 𝐡𝐚𝐝 𝐚 𝐭𝐚𝐛𝐥𝐞 𝐨𝐟 𝐂𝐚𝐩𝐢𝐭𝐚𝐥 𝐎𝐧𝐞 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞 𝐬𝐚𝐥𝐚𝐫𝐲 𝐝𝐚𝐭𝐚.
𝐖𝐫𝐢𝐭𝐞 𝐚 𝐒𝐐𝐋 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐟𝐢𝐧𝐝 𝐭𝐡𝐞 𝐭𝐨𝐩 𝟑 𝐡𝐢𝐠𝐡𝐞𝐬𝐭 𝐞𝐚𝐫𝐧𝐢𝐧𝐠 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐰𝐢𝐭𝐡𝐢𝐧 𝐞𝐚𝐜𝐡 𝐝𝐞𝐩𝐚𝐫𝐭𝐦𝐞𝐧𝐭.
*/

𝐓𝐚𝐛𝐥𝐞 𝐃𝐞𝐩𝐚𝐫𝐭𝐦𝐞𝐧𝐭 
CREATE TABLE Department (
    department_id INT PRIMARY KEY,
    department_name VARCHAR(50)
);

𝐒𝐚𝐦𝐩𝐥𝐞 𝐝𝐚𝐭𝐚 𝐃𝐞𝐩𝐚𝐫𝐭𝐦𝐞𝐧𝐭 𝐭𝐚𝐛𝐥𝐞
INSERT INTO Department (department_id, department_name)
VALUES 
(1, 'Data Analytics'),
(2, 'Data Science');

𝐓𝐚𝐛𝐥𝐞 𝐄𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 
CREATE TABLE CapitalOne_Employees (
    employee_id INT PRIMARY KEY,
    name VARCHAR(100),
    salary INT,
    department_id INT FOREIGN KEY REFERENCES Department(department_id)
);

𝐒𝐚𝐦𝐩𝐥𝐞 𝐝𝐚𝐭𝐚 𝐄𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐭𝐚𝐛𝐥𝐞 
INSERT INTO CapitalOne_Employees (employee_id, name, salary, department_id)
VALUES
(1, 'Emma Thompson', 3800, 1),
(2, 'Daniel Rodriguez', 2230, 1),
(3, 'Olivia Smith', 2000, 1),
(4, 'Noah Johnson', 6800, 2),
(5, 'Sophia Martinez', 1750, 1),
(8, 'William Davis', 6800, 2),
(10, 'James Anderson', 4000, 1);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-------------+------------------+--------+----------------+
| employee_id | name             | salary | department_name|
+-------------+------------------+--------+----------------+
| 10          | James Anderson   | 4000   | Data Analytics |
| 1           | Emma Thompson    | 3800   | Data Analytics |
| 2           | Daniel Rodriguez | 2230   | Data Analytics |
| 4           | Noah Johnson     | 6800   | Data Science   |
| 8           | William Davis    | 6800   | Data Science   |
+-------------+------------------+--------+----------------+







































