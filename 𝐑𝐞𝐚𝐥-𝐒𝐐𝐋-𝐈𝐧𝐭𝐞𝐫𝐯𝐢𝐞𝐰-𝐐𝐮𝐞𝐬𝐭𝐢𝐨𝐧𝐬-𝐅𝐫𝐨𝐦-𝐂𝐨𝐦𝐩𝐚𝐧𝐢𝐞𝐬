                                                              𝐑𝐞𝐚𝐥-𝐒𝐐𝐋-𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰-𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧𝐬-𝐅𝐫𝐨𝐦-𝐂𝐨𝐦𝐩𝐚𝐧𝐢𝐞𝐬

## 📌 𝟏) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐊𝐏𝐌𝐆 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

/*
𝐆𝐢𝐯𝐞𝐧 𝐚 𝐬𝐭𝐮𝐝𝐞𝐧𝐭 𝐭𝐚𝐛𝐥𝐞, 𝐟𝐢𝐧𝐝 𝐨𝐮𝐭 𝐭𝐡𝐞 𝐭𝐨𝐭𝐚𝐥 𝐦𝐚𝐫𝐤𝐬 𝐨𝐟 𝐭𝐡𝐞 𝐭𝐨𝐩 𝟐 𝐬𝐮𝐛𝐣𝐞𝐜𝐭𝐬 𝐟𝐨𝐫 𝐞𝐚𝐜𝐡 𝐬𝐭𝐮𝐝𝐞𝐧𝐭 (𝐬𝐧𝐚𝐦𝐞) 𝐛𝐚𝐬𝐞𝐝 𝐨𝐧 𝐦𝐚𝐫𝐤𝐬.
*/

## 𝐒𝐭𝐮𝐝𝐞𝐧𝐭𝐬 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE Students ( 
sname VARCHAR(1), 
sid VARCHAR(1), 
marks INT ); 

## 𝐒𝐭𝐮𝐝𝐞𝐧𝐭𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO Students (sname, sid, marks) 
VALUES ('A', 'X', 75), ('A', 'Y', 75), ('A', 'Z', 80),
('B', 'X', 90), ('B', 'Y', 91), ('B', 'Z', 75);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+--------+--------------+
| sname  | total_marks_ |
+--------+--------------+
| A      |     155      |
+--------+--------------+
| B      |     181      |
+--------+--------------+

-------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟐) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐇𝐞𝐱𝐚𝐰𝐚𝐫𝐞 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

/*
𝐅𝐢𝐧𝐝 𝐭𝐡𝐞 𝐦𝐚𝐱𝐢𝐦𝐮𝐦 𝐈𝐃 𝐛𝐲 𝐞𝐱𝐜𝐥𝐮𝐝𝐢𝐧𝐠 𝐝𝐮𝐩𝐥𝐢𝐜𝐚𝐭𝐞𝐬.
*/

## 𝐄𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE employees (
id INT);

## 𝐄𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO employees VALUES (2),(5),(6),(6),(7),(8),(8);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+----------------+
| Maximum Number |
+----------------+
|       7        |
+----------------+

---------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟑) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐏𝐖𝐂 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

/*
𝐜𝐚𝐥𝐜𝐮𝐥𝐚𝐭𝐢𝐧𝐠 𝐭𝐡𝐞 𝐩𝐞𝐫𝐜𝐞𝐧𝐭𝐚𝐠𝐞 𝐨𝐟 𝐠𝐞𝐧𝐝𝐞𝐫𝐬 𝐢𝐧 𝐚𝐧 𝐄𝐦𝐩𝐥𝐨𝐲𝐞𝐞 𝐭𝐚𝐛𝐥𝐞.
*/

## 𝐄𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE employ ( 
eid INT PRIMARY KEY, 
ename VARCHAR(50), 
gender VARCHAR(10) );

## 𝐄𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO employ (eid, ename, gender) 
VALUES (1, 'John Doe', 'Male'), (2, 'Jane Smith', 'Female'),
(3, 'Michael Johnson', 'Male'), (4, 'Emily Davis', 'Female'), 
(5, 'Robert Brown', 'Male'), (6, 'Sophia Wilson', 'Female'), 
(7, 'David Lee', 'Male'), (8, 'Emma White', 'Female'), 
(9, 'James Taylor', 'Male'), (10, 'William Clark', 'Male'); 


## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+------------------+------------+
| Gender           | Percentage |
+------------------+------------+
| Male             |    60%     |
+------------------+------------+
| Female           |    40%     |
+------------------+------------+

-------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟒) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐃𝐞𝐥𝐨𝐢𝐭𝐭𝐞 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

/*
𝐟𝐢𝐧𝐝 𝐭𝐡𝐞 𝐡𝐢𝐠𝐡𝐞𝐬𝐭 𝐩𝐚𝐢𝐝 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞 𝐢𝐧 𝐞𝐚𝐜𝐡 𝐝𝐞𝐩𝐚𝐫𝐭𝐦𝐞𝐧𝐭
*/

## 𝐃𝐞𝐩𝐚𝐫𝐭𝐦𝐞𝐧𝐭 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE Departments_ (
 DepartmentID INT PRIMARY KEY,
 DepartmentName VARCHAR(100)
);

## 𝐃𝐞𝐩𝐚𝐫𝐭𝐦𝐞𝐧𝐭 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO Departments_ (DepartmentID, DepartmentName) VALUES
(1, 'HR'),
(2, 'Engineering'),
(3, 'Sales');

## 𝐄𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE Employees_ (
 EmployeeID INT PRIMARY KEY,
 FirstName VARCHAR(50),
 LastName VARCHAR(50),
 DepartmentID INT,
 Salary DECIMAL(10, 2),
 DateHired DATE,
 FOREIGN KEY (DepartmentID) REFERENCES Departments_(DepartmentID)
);

## 𝐄𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO Employees_ (EmployeeID, FirstName, LastName, DepartmentID, Salary, DateHired) VALUES
(1, 'Alice', 'Smith', 1, 50000, '2020-01-15'),
(2, 'Bob', 'Johnson', 1, 60000, '2018-03-22'),
(3, 'Charlie', 'Williams', 2, 70000, '2019-07-30'),
(4, 'David', 'Brown', 2, 80000, '2017-11-11'),
(5, 'Eve', 'Davis', 3, 90000, '2021-02-25'),
(6, 'Frank', 'Miller', 3, 55000, '2020-09-10'),
(7, 'Grace', 'Wilson', 2, 75000, '2016-04-05'),
(8, 'Henry', 'Moore', 1, 65000, '2022-06-17');

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+------------+----------------+
| full_name  | DepartmentName |
+------------+----------------+
| Henry Moore| HR             |
+------------+----------------+
| David Brown| Engineering    |
+------------+----------------+
| Eve Davis  | Sales          |
+------------+----------------+

-------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟓) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐀𝐦𝐚𝐳𝐨𝐧 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

/*
𝐈𝐃𝐄𝐍𝐓𝐈𝐅𝐘 𝐏𝐑𝐎𝐃𝐔𝐂𝐓𝐒 𝐓𝐇𝐓 𝐇𝐀𝐕𝐄 𝐁𝐄𝐄𝐍 𝐒𝐎𝐋𝐃 𝐁𝐔𝐓 𝐇𝐀𝐕𝐄 𝐍𝐎 𝐑𝐄𝐂𝐎𝐑𝐃 𝐈𝐍 𝐓𝐇𝐄
𝐏𝐑𝐎𝐃𝐔𝐂𝐓𝐒 𝐓𝐀𝐁𝐋𝐄 𝐀𝐍𝐃 𝐀𝐋𝐒𝐎 𝐂𝐀𝐋𝐂𝐔𝐋𝐀𝐓𝐄 𝐇𝐎𝐖 𝐌𝐀𝐍𝐘 𝐓𝐈𝐌𝐄 𝐄𝐀𝐂𝐇 𝐌𝐈𝐒𝐒𝐈𝐍𝐆 𝐏𝐑𝐎𝐃𝐔𝐂𝐓 𝐇𝐀𝐕𝐄 𝐁𝐄𝐄𝐍 𝐒𝐎𝐋𝐃
*/

## 𝐏𝐫𝐨𝐝𝐮𝐜𝐭𝐬 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE PRODUCTS (
PRODUCT_ID INT PRIMARY KEY,
PRODUCT_NAME VARCHAR(100)
);

## 𝐏𝐫𝐨𝐝𝐮𝐜𝐭𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO PRODUCTS (PRODUCT_ID, PRODUCT_NAME)
VALUES
(101, 'Laptop'),
(102, 'Mobile'),
(103, 'Tablet');

## 𝐒𝐚𝐥𝐞𝐬 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE SALES (
PRODUCT_ID INT
);

## 𝐒𝐚𝐥𝐞𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO SALES (PRODUCT_ID)
VALUES
(101),(101),(104),(104),(104),(105),(102),(106);


## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+------------+-------+
| product_id | count |
+------------+-------+
|    104     |   3   |
+------------+-------+
|    105     |   1   |
+------------+-------+
|    106     |   1   |
+------------+-------+


------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟓) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐂𝐨𝐠𝐧𝐢𝐳𝐚𝐧𝐭 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

/*
𝐅𝐢𝐧𝐝 𝐨𝐮𝐭 𝐭𝐡𝐞 𝐬𝐭𝐮𝐝𝐞𝐧𝐭 𝐰𝐢𝐬𝐞 𝐭𝐨𝐭𝐚𝐥 𝐦𝐚𝐫𝐤𝐬 𝐟𝐨𝐫 𝐓𝐨𝐩 𝟐 𝐬𝐮𝐛𝐣𝐞𝐜𝐭𝐬.
*/

## 𝐒𝐭𝐮𝐝𝐞𝐧𝐭 𝐌𝐚𝐫𝐤𝐬 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE StudentMarks (
 student_name VARCHAR(50),
 subject VARCHAR(50),
 marks INT
);

## 𝐒𝐭𝐮𝐝𝐞𝐧𝐭 𝐌𝐚𝐫𝐤𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:-  
INSERT INTO StudentMarks (student_name, subject, marks) VALUES
('Alice', 'Math', 65),
('Alice', 'Science', 80),
('Alice', 'English', 78),
('Bob', 'Math', 82),
('Bob', 'Science', 85),
('Bob', 'English', 88),
('Catherine', 'Math', 70),
('Catherine', 'Science', 72),
('Catherine', 'English', 68),
('Daniel', 'Math', 99);


## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+---------------+------------+
| student_name  | total_marks|
+---------------+------------+
| Alice         |    158     |
+---------------+------------+
| Bob           |    173     |
+---------------+------------+
| Catherine     |    142     |
+---------------+------------+
| Daniel        |     99     |
+---------------+------------+

------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟔) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐃𝐞𝐥𝐨𝐢𝐭𝐭𝐞 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

/*
𝐄𝐱𝐭𝐫𝐚𝐜𝐭 𝐭𝐡𝐞 𝐃𝐨𝐦𝐚𝐢𝐧 𝐟𝐫𝐨𝐦 𝐭𝐡𝐞 𝐄𝐦𝐚𝐢𝐥 𝐜𝐨𝐥𝐮𝐦𝐧 𝐢𝐧 𝐄𝐦𝐩𝐥𝐨𝐲𝐞𝐞 𝐓𝐚𝐛𝐥𝐞.
*/

## 𝐔𝐬𝐞𝐫𝐬 𝐓𝐚𝐛𝐥𝐞;- 
CREATE TABLE Users (
 id INT PRIMARY KEY,
 name VARCHAR(50),
 email VARCHAR(50)
);

## 𝐔𝐬𝐞𝐫𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚;- 
INSERT INTO Users (id, name, email) VALUES
(1, 'John Doe', 'john.doe@example.com'),
(2, 'Jane Smith', 'jane.smith@company.com'),
(3, 'Alice Johnson', 'alice.johnson@business.org'),
(4, 'Robert Brown', 'robert.brown@enterprise.net'),
(5, 'Emily Davis', 'emily.davis@startup.io'),
(6, 'Michael Wilson', 'michael.wilson@web.co'),
(7, 'Sophia Taylor', 'sophia.taylor@tech.dev'),
(8, 'David Anderson', 'david.anderson@service.us');

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+----+----------------+---------------+
| id | name           | domain        |
+----+----------------+---------------+
|  1 | John Doe       | example.com   |
+----+----------------+---------------+
|  2 | Jane Smith     | company.com   |
+----+----------------+---------------+
|  3 | Alice Johnson  | business.org  |
+----+----------------+---------------+
|  4 | Robert Brown   | enterprise.net|
+----+----------------+---------------+
|  5 | Emily Davis    | startup.io    |
+----+----------------+---------------+
|  6 | Michael Wilson | web.co        |
+----+----------------+---------------+
|  7 | Sophia Taylor  | tech.dev      |
+----+----------------+---------------+
|  8 | David Anderson | service.us    |
+----+----------------+---------------+

--------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟕) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐀𝐜𝐜𝐞𝐧𝐭𝐮𝐫𝐞 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

/*
𝐰𝐫𝐢𝐭𝐞 𝐚 𝐒𝐐𝐋 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐟𝐢𝐧𝐝 𝐭𝐡𝐞 𝐝𝐚𝐭𝐞 𝐰𝐡𝐞𝐧 𝐭𝐞𝐦𝐩𝐞𝐫𝐚𝐭𝐮𝐫𝐞 𝐰𝐚𝐬 𝐡𝐢𝐠𝐡 𝐭𝐡𝐞𝐧 𝐩𝐫𝐞𝐯𝐢𝐨𝐮𝐬 𝐝𝐚𝐲.
*/

## 𝐰𝐞𝐚𝐭𝐡𝐞𝐫 𝐓𝐚𝐛𝐥𝐞;- 
CREATE TABLE weather (
 id INT,
 recorddate DATE,
 temperature INT
);

## 𝐰𝐞𝐚𝐭𝐡𝐞𝐫 𝐬𝐚𝐦𝐩𝐥𝐞 𝐝𝐚𝐭𝐚;- 
INSERT INTO weather (id, recorddate, temperature) VALUES
(1, '2015-01-01', 10),
(2, '2015-01-02', 25),
(3, '2015-01-03', 20),
(4, '2015-01-04', 30);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+----+------------+-------------+
| id | recorddate | temperature |
+----+------------+-------------+
|  2 | 2015-01-02 |     25      |
+----+------------+-------------+
|  4 | 2015-01-04 |     30      |
+----+------------+-------------+

 ----------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟖) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐖𝐚𝐥𝐦𝐚𝐫𝐭 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

/*
𝐁𝐚𝐬𝐞𝐝 𝐨𝐧 𝐭𝐡𝐞𝐢𝐫 𝐦𝐨𝐬𝐭 𝐫𝐞𝐜𝐞𝐧𝐭 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧 𝐝𝐚𝐭𝐞, 𝐰𝐫𝐢𝐭𝐞 𝐚 𝐪𝐮𝐞𝐫𝐲 𝐭𝐡𝐚𝐭 𝐫𝐞𝐭𝐫𝐢𝐞𝐯𝐞𝐬 𝐭𝐡𝐞 𝐮𝐬𝐞𝐫𝐬 𝐚𝐥𝐨𝐧𝐠 𝐰𝐢𝐭𝐡 𝐭𝐡𝐞 𝐧𝐮𝐦𝐛𝐞𝐫 𝐨𝐟 𝐩𝐫𝐨𝐝𝐮𝐜𝐭𝐬 𝐭𝐡𝐞𝐲 𝐛𝐨𝐮𝐠𝐡𝐭. 
𝐎𝐮𝐭𝐩𝐮𝐭 𝐭𝐡𝐞 𝐮𝐬𝐞𝐫'𝐬 𝐦𝐨𝐬𝐭 𝐫𝐞𝐜𝐞𝐧𝐭 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧 𝐝𝐚𝐭𝐞, 𝐮𝐬𝐞𝐫 𝐈𝐃, 𝐚𝐧𝐝 𝐭𝐡𝐞 𝐧𝐮𝐦𝐛𝐞𝐫 𝐨𝐟 𝐩𝐫𝐨𝐝𝐮𝐜𝐭𝐬 𝐬𝐨𝐫𝐭𝐞𝐝 𝐨𝐫𝐝𝐞𝐫 𝐛𝐲 𝐭𝐡𝐞 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧 𝐝𝐚𝐭𝐞.
*/

## transaction Table;- 
CREATE TABLE transactions (
 product_id INT,
 userid INT,
 spend DECIMAL(10, 2),
 transaction_date DATETIME
);

## 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧 𝐬𝐚𝐦𝐩𝐥𝐞 𝐝𝐚𝐭𝐚;- 
INSERT INTO transactions (product_id, userid, spend, transaction_date) VALUES
(3673, 123, 68.9, '2022-07-08 10:00:00'),
(9623, 123, 274.1, '2022-07-08 10:00:00'),
(1467, 115, 19.9, '2022-07-08 10:00:00'),
(2513, 159, 25.0, '2022-07-08 10:00:00'),
(1452, 159, 74.5, '2022-07-10 10:00:00'),
(1452, 123, 74.5, '2022-07-10 10:00:00'),
(9765, 123, 100.15, '2022-07-11 10:00:00'),
(6536, 115, 57.0, '2022-07-12 10:00:00'),
(7384, 159, 15.5, '2022-07-12 10:00:00'),
(1247, 159, 23.4, '2022-07-12 10:00:00');

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-------------------------+--------+-------+
|     transaction_date    | userid | count |
+-------------------------+--------+-------+
| 2022-07-11 10:00:00.000 |  123   |   1   |
+-------------------------+--------+-------+
| 2022-07-12 10:00:00.000 |  115   |   1   |
+-------------------------+--------+-------+
| 2022-07-12 10:00:00.000 |  159   |   2   |
+-------------------------+--------+-------+

---------------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟗) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐅𝐥𝐢𝐩𝐤𝐚𝐫𝐭 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

/*
𝐖𝐫𝐢𝐭𝐞 𝐚𝐧 𝐒𝐐𝐋 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐫𝐞𝐭𝐫𝐢𝐞𝐯𝐞 𝐭𝐡𝐞 𝐭𝐨𝐭𝐚𝐥 𝐬𝐚𝐥𝐞𝐬 𝐚𝐦𝐨𝐮𝐧𝐭 𝐢𝐧 𝐞𝐚𝐜𝐡 𝐜𝐚𝐭𝐞𝐠𝐨𝐫𝐲.
𝐈𝐧𝐜𝐥𝐮𝐝𝐞 𝐚𝐥𝐥 𝐜𝐚𝐭𝐞𝐠𝐨𝐫𝐢𝐞𝐬, 𝐢𝐟 𝐧𝐨 𝐩𝐫𝐨𝐝𝐮𝐜𝐭𝐬 𝐰𝐞𝐫𝐞 𝐬𝐨𝐥𝐝 𝐢𝐧 𝐚 𝐜𝐚𝐭𝐞𝐠𝐨𝐫𝐲 (𝐝𝐢𝐬𝐩𝐥𝐚𝐲 𝐚𝐬 𝟎). 𝐃𝐢𝐬𝐩𝐥𝐚𝐲 𝐭𝐡𝐞 𝐨𝐮𝐭𝐩𝐮𝐭 𝐢𝐧 𝐚𝐬𝐜𝐞𝐧𝐝𝐢𝐧𝐠 𝐨𝐫𝐝𝐞𝐫 𝐨𝐟 𝐭𝐨𝐭𝐚𝐥_𝐬𝐚𝐥𝐞𝐬.
*/


-- 𝐂𝐫𝐞𝐚𝐭𝐢𝐧𝐠 𝐭𝐡𝐞 𝐜𝐚𝐭𝐞𝐠𝐨𝐫𝐢𝐞𝐬 𝐭𝐚𝐛𝐥𝐞
CREATE TABLE categories (
 category_id INT PRIMARY KEY,
 category_name VARCHAR(50)
);

-- 𝐈𝐧𝐬𝐞𝐫𝐭𝐢𝐧𝐠 𝐯𝐚𝐥𝐮𝐞𝐬 𝐢𝐧𝐭𝐨 𝐭𝐡𝐞 𝐜𝐚𝐭𝐞𝐠𝐨𝐫𝐢𝐞𝐬 𝐭𝐚𝐛𝐥𝐞
INSERT INTO categories (category_id, category_name)
VALUES 
(1, 'Electronics'),(2, 'Clothing'),
(3, 'Books'),(4, 'Home Decor');

-- 𝐂𝐫𝐞𝐚𝐭𝐢𝐧𝐠 𝐭𝐡𝐞 𝐬𝐚𝐥𝐞𝐬 𝐭𝐚𝐛𝐥𝐞
CREATE TABLE sales (
 sale_id INT PRIMARY KEY,
 category_id INT,
 amount INT,
 sale_date DATE,
 FOREIGN KEY (category_id) REFERENCES categories(category_id)
);

-- 𝐈𝐧𝐬𝐞𝐫𝐭𝐢𝐧𝐠 𝐯𝐚𝐥𝐮𝐞𝐬 𝐢𝐧𝐭𝐨 𝐭𝐡𝐞 𝐬𝐚𝐥𝐞𝐬 𝐭𝐚𝐛𝐥𝐞
INSERT INTO sales (sale_id, category_id, amount, sale_date)
VALUES 
(1, 1, 500, '2022-01-05'),(2, 1, 800, '2022-02-10'),
(4, 3, 200, '2022-02-20'),(5, 3, 150, '2022-03-01'),
(6, 4, 400, '2022-02-25'),(7, 4, 600, '2022-03-05');

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+---------------+--------------+
| category_name | total_amount |
+---------------+--------------+
| Clothing      |      0       |
+---------------+--------------+
| Books         |     350      |
+---------------+--------------+
| Home Decor    |    1000      |
+---------------+--------------+
| Electronics   |    1300      |
+---------------+--------------+

---------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟏𝟎) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐂𝐚𝐩𝐠𝐞𝐦𝐢𝐧𝐢 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

 /*
𝐖𝐫𝐢𝐭𝐞 𝐚 𝐒𝐐𝐋 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐟𝐢𝐧𝐝 𝐞𝐦𝐩 𝐰𝐡𝐨 𝐢𝐬 𝐢𝐧𝐬𝐢𝐝𝐞 𝐭𝐡𝐞 𝐨𝐟𝐟𝐢𝐜𝐞..
*/

## 𝐎𝐟𝐟𝐢𝐜𝐞 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE office (
emp_id INT, 
emp_status VARCHAR(10), 
time_id DATETIME);

## 𝐎𝐟𝐟𝐢𝐜𝐞 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO office VALUES 
('1', 'in', '2023-12-22 09:00:00'),('1', 'out', '2023-12-22 09:15:00'),
('2', 'in', '2023-12-22 09:00:00'), ('2', 'out', '2023-12-22 09:15:00'),
('2', 'in', '2023-12-22 09:30:00'),('3', 'out', '2023-12-22 09:00:00'),
('3', 'in', '2023-12-22 09:15:00'), ('3', 'out', '2023-12-22 09:30:00'), 
('3', 'in', '2023-12-22 09:45:00'), ('4', 'in', '2023-12-22 09:45:00'),
('5', 'out', '2023-12-22 09:40:00');

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+--------+
| emp_id |
+--------+
|   2    |
+--------+
|   3    |
+--------+
|   4    |
+--------+

---------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟏𝟏) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐌𝐢𝐧𝐝𝐭𝐫𝐞𝐞 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

/*
𝐰𝐫𝐢𝐭𝐞 𝐚 𝐒𝐐𝐋 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐟𝐢𝐧𝐝 𝐭𝐡𝐞 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞 𝐧𝐚𝐦𝐞𝐬 𝐰𝐡𝐨 𝐡𝐚𝐯𝐞 𝐭𝐡𝐞 𝐬𝐚𝐦𝐞 𝐬𝐚𝐥𝐚𝐫𝐲 
𝐚𝐧𝐨𝐭𝐡𝐞𝐫 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞 𝐢𝐧 𝐭𝐡𝐞 𝐬𝐚𝐦𝐞 𝐝𝐞𝐩𝐚𝐫𝐭𝐦𝐞𝐧𝐭
*/

## 𝐄𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐓𝐚𝐛𝐥𝐞:- 
create table emp_info(
id int,
name varchar(10),
dept varchar(10),
salary int);

## 𝐄𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
insert into emp_info 
values(1,'Akash','Sales',100),(2,'John','Sales',110),
(3,'Rohit','Sales',100),(4,'Tom','IT',200),
(5,'Subham','IT',205),(6,'Vabna','IT',200),
(7,'Prativa','Marketing',150),(8,'Rahul','Marketing',155),
(9,'yash','Marketing',160);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+----+--------+-------+--------+
| id | name   | dept  | salary |
+----+--------+-------+--------+
|  4 | Tom    | IT    |  200   |
+----+--------+-------+--------+
|  6 | Vabna  | IT    |  200   |
+----+--------+-------+--------+
|  1 | Akash  | Sales |  100   |
+----+--------+-------+--------+
|  3 | Rohit  | Sales |  100   |
+----+--------+-------+--------+

---------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟏𝟐) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐈𝐁𝐌 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

/*
𝐰𝐫𝐢𝐭𝐞 𝐚 𝐬𝐪𝐥 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐟𝐢𝐧𝐝 𝐭𝐡𝐞 𝐚𝐜𝐭𝐮𝐚𝐥 𝐰𝐨𝐫𝐤𝐢𝐧𝐠 𝐝𝐚𝐲𝐬 𝐛𝐞𝐭𝐰𝐞𝐞𝐧 𝐢𝐬𝐬𝐮𝐞_𝐝𝐚𝐭𝐞 𝐚𝐧𝐝 𝐫𝐞𝐬𝐨𝐥𝐯𝐞_𝐝𝐚𝐭𝐞 𝐛𝐲 𝐞𝐱𝐜𝐥𝐮𝐝𝐢𝐧𝐠 𝐭𝐡𝐞 𝐡𝐨𝐥𝐢𝐝𝐚𝐲𝐬 𝐚𝐧𝐝 𝐰𝐞𝐞𝐤𝐞𝐧𝐝𝐬.
*/

## 𝐓𝐢𝐜𝐤𝐞𝐭 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE ticket(
ticket_id INT,
issue_date DATE,
resolve_date DATE);

## 𝐓𝐢𝐜𝐤𝐞𝐭 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO ticket VALUES
(1,'2024-12-18','2025-01-7'),(2,'2024-12-20','2025-01-10'),
(3,'2024-12-22','2025-01-11'),(4,'2025-01-02','2025-01-13');

## 𝐇𝐨𝐥𝐢𝐝𝐚𝐲 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE holiday_cal(
holiday_date DATE,
occasion VARCHAR(15));

## 𝐇𝐨𝐥𝐢𝐝𝐚𝐲 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO holiday_cal 
VALUES('2024-12-25','christmas'),
('2025-01-01','new_year');

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-----------+------------+-------------+-------------+
| ticket_id | issue_date | resolve_date| working_days|
+-----------+------------+-------------+-------------+
|     1     | 2024-12-18 | 2025-01-07  |     12      |
+-----------+------------+-------------+-------------+
|     2     | 2024-12-20 | 2025-01-10  |     13      |
+-----------+------------+-------------+-------------+
|     3     | 2024-12-22 | 2025-01-11  |     14      |
+-----------+------------+-------------+-------------+
|     4     | 2025-01-02 | 2025-01-13  |      7      |
+-----------+------------+-------------+-------------+

 ---------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟏𝟑) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐅𝐚𝐜𝐞𝐛𝐨𝐨𝐤 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

/*
𝐀𝐬𝐬𝐮𝐦𝐞 𝐲𝐨𝐮 𝐡𝐚𝐯𝐞 𝐚𝐧 𝐞𝐯𝐞𝐧𝐭𝐬 𝐭𝐚𝐛𝐥𝐞 𝐨𝐧 𝐅𝐚𝐜𝐞𝐛𝐨𝐨𝐤 𝐚𝐩𝐩 𝐚𝐧𝐚𝐥𝐲𝐭𝐢𝐜𝐬. 𝐖𝐫𝐢𝐭𝐞 𝐚 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐜𝐚𝐥𝐜𝐮𝐥𝐚𝐭𝐞 𝐭𝐡𝐞 𝐜𝐥𝐢𝐜𝐤-𝐭𝐡𝐫𝐨𝐮𝐠𝐡 𝐫𝐚𝐭𝐞 (𝐂𝐓𝐑) 𝐟𝐨𝐫 𝐭𝐡𝐞 𝐚𝐩𝐩
𝐢𝐧 𝟐𝟎𝟐𝟐 𝐚𝐧𝐝 𝐫𝐨𝐮𝐧𝐝 𝐭𝐡𝐞 𝐫𝐞𝐬𝐮𝐥𝐭𝐬 𝐭𝐨 𝟐 𝐝𝐞𝐜𝐢𝐦𝐚𝐥 𝐩𝐥𝐚𝐜𝐞𝐬.
*/

## 𝐄𝐯𝐞𝐧𝐭𝐬 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE Events (
 app_id INT,
 event_type VARCHAR(50),
 timestamp_ DATETIME
);

## 𝐄𝐯𝐞𝐧𝐭𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO Events (app_id, event_type, timestamp_)
VALUES 
(123, 'impression', '2022-07-18 11:36:12'),(123, 'impression', '2022-07-18
11:37:12'),
(123, 'click', '2022-07-18 11:37:42'),(234, 'impression', '2022-08-18 14:15:12'),
(234, 'click', '2022-08-18 14:16:12'),(123, 'impression', '2021-10-23 12:11:56'),
(123, 'click', '2021-10-23 12:22:12'),(123, 'impression', '2022-04-06 13:13:13'),
(123, 'click', '2022-04-07 12:20:30'),(234, 'impression', '2022-02-09 10:05:02'),
(234, 'impression', '2022-05-20 12:00:00');


## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+--------+-------+
| app_id |  CTR  |
+--------+-------+
|  123   | 66.67 |
+--------+-------+
|  234   | 33.33 |
+--------+-------+

---------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟏𝟒) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐜𝐯𝐬𝐡𝐞𝐚𝐥𝐭𝐡 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

/*
𝐂𝐕𝐒 𝐇𝐞𝐚𝐥𝐭𝐡 𝐰𝐚𝐧𝐭𝐬 𝐭𝐨 𝐠𝐚𝐢𝐧 𝐚 𝐜𝐥𝐞𝐚𝐫𝐞𝐫 𝐮𝐧𝐝𝐞𝐫𝐬𝐭𝐚𝐧𝐝𝐢𝐧𝐠 𝐨𝐟 𝐢𝐭𝐬 𝐩𝐡𝐚𝐫𝐦𝐚𝐜𝐲 𝐬𝐚𝐥𝐞𝐬 𝐚𝐧𝐝 𝐭𝐡𝐞 𝐩𝐞𝐫𝐟𝐨𝐫𝐦𝐚𝐧𝐜𝐞 𝐨𝐟 𝐯𝐚𝐫𝐢𝐨𝐮𝐬 𝐩𝐫𝐨𝐝𝐮𝐜𝐭𝐬.

𝐖𝐫𝐢𝐭𝐞 𝐚 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐜𝐚𝐥𝐜𝐮𝐥𝐚𝐭𝐞 𝐭𝐡𝐞 𝐭𝐨𝐭𝐚𝐥 𝐝𝐫𝐮𝐠 𝐬𝐚𝐥𝐞𝐬 𝐟𝐨𝐫 𝐞𝐚𝐜𝐡 𝐦𝐚𝐧𝐮𝐟𝐚𝐜𝐭𝐮𝐫𝐞𝐫.
𝐑𝐨𝐮𝐧𝐝 𝐭𝐡𝐞 𝐚𝐧𝐬𝐰𝐞𝐫 𝐭𝐨 𝐭𝐡𝐞 𝐧𝐞𝐚𝐫𝐞𝐬𝐭 𝐦𝐢𝐥𝐥𝐢𝐨𝐧 𝐚𝐧𝐝 𝐫𝐞𝐩𝐨𝐫𝐭 𝐲𝐨𝐮𝐫 𝐫𝐞𝐬𝐮𝐥𝐭𝐬 𝐢𝐧 𝐝𝐞𝐬𝐜𝐞𝐧𝐝𝐢𝐧𝐠 𝐨𝐫𝐝𝐞𝐫 𝐨𝐟 𝐭𝐨𝐭𝐚𝐥 𝐬𝐚𝐥𝐞𝐬. 𝐈𝐧 𝐜𝐚𝐬𝐞 𝐨𝐟 𝐚𝐧𝐲 𝐝𝐮𝐩𝐥𝐢𝐜𝐚𝐭𝐞𝐬, 𝐬𝐨𝐫𝐭 𝐭𝐡𝐞𝐦 𝐚𝐥𝐩𝐡𝐚𝐛𝐞𝐭𝐢𝐜𝐚𝐥𝐥𝐲 𝐛𝐲 𝐭𝐡𝐞 𝐦𝐚𝐧𝐮𝐟𝐚𝐜𝐭𝐮𝐫𝐞𝐫 𝐧𝐚𝐦𝐞.

𝐒𝐢𝐧𝐜𝐞 𝐭𝐡𝐢𝐬 𝐝𝐚𝐭𝐚 𝐰𝐢𝐥𝐥 𝐛𝐞 𝐝𝐢𝐬𝐩𝐥𝐚𝐲𝐞𝐝 𝐨𝐧 𝐚 𝐝𝐚𝐬𝐡𝐛𝐨𝐚𝐫𝐝 𝐯𝐢𝐞𝐰𝐞𝐝 𝐛𝐲 𝐛𝐮𝐬𝐢𝐧𝐞𝐬𝐬 𝐬𝐭𝐚𝐤𝐞𝐡𝐨𝐥𝐝𝐞𝐫𝐬, 𝐩𝐥𝐞𝐚𝐬𝐞 𝐟𝐨𝐫𝐦𝐚𝐭 𝐲𝐨𝐮𝐫 𝐫𝐞𝐬𝐮𝐥𝐭𝐬 𝐚𝐬 𝐟𝐨𝐥𝐥𝐨𝐰𝐬:- 𝐄𝐠:- "$𝟑𝟔 𝐦𝐢𝐥𝐥𝐢𝐨𝐧".
*/

## 𝐏𝐡𝐚𝐫𝐦𝐚𝐜𝐲 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE pharmacy_sales (
 product_id INT,
 units_sold INT,
 total_sales DECIMAL(15, 2),
 cogs DECIMAL(15, 2),
 manufacturer VARCHAR(100),
 drug VARCHAR(100)
);

## 𝐏𝐡𝐚𝐫𝐦𝐚𝐜𝐲 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO ProductSales (product_id, units_sold, total_sales, cogs, manufacturer, drug)
VALUES 
(94, 132362, 2041758.41, 1373721.70, 'Biogen', 'UP and UP'),
(9, 37410, 293452.54, 208876.01, 'Eli Lilly', 'Zyprexa'),
(50, 90484, 2521023.73, 2742445.90, 'Eli Lilly', 'Dermasorb'),
(61, 77023, 500101.61, 419174.97, 'Biogen', 'Varicose Relief'),
(136, 144814, 1084258.00, 1006447.73, 'Biogen', 'Burkhart');

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+--------------+------------+
| manufacturer |    sale    |
+--------------+------------+
| Biogen       | $4 million |
+--------------+------------+
| Eli Lilly    | $3 million |
+--------------+------------+

---------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟏𝟓) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐔𝐛𝐞𝐫 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

/*
𝐀𝐬𝐬𝐮𝐦𝐞 𝐲𝐨𝐮 𝐚𝐫𝐞 𝐠𝐢𝐯𝐞𝐧 𝐭𝐡𝐞 𝐭𝐚𝐛𝐥𝐞 𝐛𝐞𝐥𝐨𝐰 𝐨𝐧 𝐔𝐛𝐞𝐫 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧𝐬 𝐦𝐚𝐝𝐞 𝐛𝐲 𝐮𝐬𝐞𝐫𝐬. 𝐖𝐫𝐢𝐭𝐞 𝐚 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐨𝐛𝐭𝐚𝐢𝐧 𝐭𝐡𝐞 𝐭𝐡𝐢𝐫𝐝 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧 
𝐨𝐟 𝐞𝐯𝐞𝐫𝐲 𝐮𝐬𝐞𝐫. 𝐎𝐮𝐭𝐩𝐮𝐭 𝐭𝐡𝐞 𝐮𝐬𝐞𝐫 𝐢𝐝, 𝐬𝐩𝐞𝐧𝐝 𝐚𝐧𝐝 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧 𝐝𝐚𝐭𝐞.
*/

## 𝐓𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧𝐬 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE transactions_ (
 user_id INT,
 spend DECIMAL(10, 2),
 transaction_date DATETIME
);

## 𝐓𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO transactions_ (user_id, spend, transaction_date) VALUES
(111, 100.50, '2022-01-08 12:00:00'),(111, 55.00, '2022-01-10 12:00:00'),
(121, 36.00, '2022-01-18 12:00:00'),(145, 24.99, '2022-01-26 12:00:00'),
(111, 89.60, '2022-02-05 12:00:00'),(145, 45.30, '2022-02-28 12:00:00'),
(121, 22.20, '2022-04-01 12:00:00'),(121, 67.90, '2022-04-03 12:00:00'),
(263, 156.00, '2022-04-11 12:00:00'),(230, 78.30, '2022-06-14 12:00:00'),
(263, 68.12, '2022-07-11 12:00:00'),(263, 100.00, '2022-07-12 12:00:00');

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+---------+--------+-------------------------+
| user_id | spend  |    transaction_date     |
+---------+--------+-------------------------+
|  111    | 89.60  | 2022-02-05 12:00:00.000 |
+---------+--------+-------------------------+
|  121    | 67.90  | 2022-04-03 12:00:00.000 |
+---------+--------+-------------------------+
|  263    | 100.00 | 2022-07-12 12:00:00.000 |
+---------+--------+-------------------------+

---------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟏𝟔) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐦𝐲𝐧𝐭𝐫𝐚 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

/*
𝐓𝐡𝐢𝐬 𝐭𝐚𝐛𝐥𝐞 𝐜𝐨𝐧𝐭𝐚𝐢𝐧𝐬 𝐥𝐨𝐠𝐬 𝐨𝐟 𝐭𝐡𝐞 𝐝𝐚𝐭𝐞𝐬 𝐭𝐡𝐚𝐭 𝐮𝐬𝐞𝐫𝐬 𝐯𝐢𝐬𝐢𝐭𝐞𝐝 𝐚 𝐜𝐞𝐫𝐭𝐚𝐢𝐧 𝐫𝐞𝐭𝐚𝐢𝐥𝐞𝐫.
𝐀𝐬𝐬𝐮𝐦𝐞 𝐭𝐨𝐝𝐚𝐲’𝐬 𝐝𝐚𝐭𝐞 𝐢𝐬 '𝟐𝟎𝟐𝟏-𝟏-𝟏'.

𝐖𝐫𝐢𝐭𝐞 𝐚𝐧 𝐒𝐐𝐋 𝐪𝐮𝐞𝐫𝐲 𝐭𝐡𝐚𝐭 𝐰𝐢𝐥𝐥, 𝐟𝐨𝐫 𝐞𝐚𝐜𝐡 𝐮𝐬𝐞𝐫_𝐢𝐝, 𝐟𝐢𝐧𝐝 𝐨𝐮𝐭 𝐭𝐡𝐞 𝐥𝐚𝐫𝐠𝐞𝐬𝐭 𝐰𝐢𝐧𝐝𝐨𝐰 𝐨𝐟 𝐝𝐚𝐲𝐬 𝐛𝐞𝐭𝐰𝐞𝐞𝐧 𝐞𝐚𝐜𝐡 𝐯𝐢𝐬𝐢𝐭 𝐚𝐧𝐝 𝐭𝐡𝐞 𝐨𝐧𝐞 𝐫𝐢𝐠𝐡𝐭 𝐚𝐟𝐭𝐞𝐫 𝐢𝐭 (𝐨𝐫 𝐭𝐨𝐝𝐚𝐲 𝐢𝐟 𝐲𝐨𝐮 𝐚𝐫𝐞 𝐜𝐨𝐧𝐬𝐢𝐝𝐞𝐫𝐢𝐧𝐠 𝐭𝐡𝐞 𝐥𝐚𝐬𝐭 𝐯𝐢𝐬𝐢𝐭).
𝐑𝐞𝐭𝐮𝐫𝐧 𝐭𝐡𝐞 𝐫𝐞𝐬𝐮𝐥𝐭 𝐭𝐚𝐛𝐥𝐞 𝐨𝐫𝐝𝐞𝐫𝐞𝐝 𝐛𝐲 𝐮𝐬𝐞𝐫_𝐢𝐝.
*/

## 𝐔𝐬𝐞𝐫𝐕𝐢𝐬𝐢𝐭𝐬 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE UserVisits (
 user_id INT,
 visit_date DATE
);

## 𝐔𝐬𝐞𝐫𝐕𝐢𝐬𝐢𝐭𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO UserVisits (user_id, visit_date)
VALUES 
(1, '2020-11-28'),(1, '2020-10-20'),
(1, '2020-12-03'),(2, '2020-10-05'),
(2, '2020-12-09'),(3, '2020-11-11');

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+---------+-------------+
| user_id | largest_gap |
+---------+-------------+
|    1    |     39      |
+---------+-------------+
|    2    |     65      |
+---------+-------------+
|    3    |     51      |
+---------+-------------+

---------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟏𝟕) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐬𝐰𝐢𝐠𝐠𝐲 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

/*
𝐖𝐫𝐢𝐭𝐞 𝐚 𝐒𝐐𝐋 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐝𝐞𝐭𝐞𝐫𝐦𝐢𝐧𝐞 𝐭𝐡𝐞 𝐜𝐨𝐮𝐧𝐭 𝐨𝐟 𝐝𝐞𝐥𝐚𝐲𝐞𝐝 𝐨𝐫𝐝𝐞𝐫𝐬 𝐟𝐨𝐫 𝐞𝐚𝐜𝐡 𝐝𝐞𝐥𝐢𝐯𝐞𝐫𝐲 𝐩𝐚𝐫𝐭𝐧𝐞𝐫.
*/

## 𝐎𝐫𝐝𝐞𝐫𝐬 𝐓𝐚𝐛𝐥𝐞:-
CREATE TABLE order_details (orderid INT PRIMARY KEY,custid INT,
city VARCHAR(50),order_date DATE,del_partner VARCHAR(50),
 order_time TIME,deliver_time TIME,predicted_time INT,
aov DECIMAL(10, 2)
);

## 𝐎𝐫𝐝𝐞𝐫𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:-
INSERT INTO order_details 
VALUES
(1, 101, 'Bangalore', '2024-01-01', 'PartnerA', '10:00:00', '11:30:00', 60, 100.00),
(2, 102, 'Chennai', '2024-01-02', 'PartnerB', '12:00:00', '13:15:00', 45, 200.00),
(3, 103, 'Bangalore', '2024-01-03', 'PartnerA', '14:00:00', '15:45:00', 60, 300.00),
(4, 104, 'Chennai', '2024-01-04', 'PartnerB', '16:00:00', '17:30:00', 90, 400.00);
 
## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-------------+--------------------+
| del_partner | delayed_order_count|
+-------------+--------------------+
| partnerA    |         2          |
+-------------+--------------------+
| partnerB    |         1          |
+-------------+--------------------+

---------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟏𝟖) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐅𝐥𝐢𝐩𝐤𝐚𝐫𝐭 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

/* 𝐖𝐫𝐢𝐭𝐞 𝐚𝐧 𝐒𝐐𝐋 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐟𝐢𝐧𝐝 𝐭𝐡𝐞 𝐜𝐨𝐧𝐟𝐢𝐫𝐦𝐚𝐭𝐢𝐨𝐧 𝐫𝐚𝐭𝐞 𝐨𝐟 𝐞𝐚𝐜𝐡 𝐮𝐬𝐞𝐫.
𝐓𝐡𝐞 𝐜𝐨𝐧𝐟𝐢𝐫𝐦𝐚𝐭𝐢𝐨𝐧 𝐫𝐚𝐭𝐞 𝐨𝐟 𝐚 𝐮𝐬𝐞𝐫 𝐢𝐬 𝐭𝐡𝐞 𝐧𝐮𝐦𝐛𝐞𝐫 𝐨𝐟 '𝐜𝐨𝐧𝐟𝐢𝐫𝐦𝐞𝐝' 
𝐦𝐞𝐬𝐬𝐚𝐠𝐞𝐬 𝐝𝐢𝐯𝐢𝐝𝐞𝐝 𝐛𝐲 𝐭𝐡𝐞 𝐭𝐨𝐭𝐚𝐥 𝐧𝐮𝐦𝐛𝐞𝐫 𝐨𝐟 𝐫𝐞𝐪𝐮𝐞𝐬𝐭𝐞𝐝 𝐜𝐨𝐧𝐟𝐢𝐫𝐦𝐚𝐭𝐢𝐨𝐧 𝐦𝐞𝐬𝐬𝐚𝐠𝐞𝐬. 𝐓𝐡𝐞 𝐜𝐨𝐧𝐟𝐢𝐫𝐦𝐚𝐭𝐢𝐨𝐧 𝐫𝐚𝐭𝐞 𝐨𝐟 𝐚 𝐮𝐬𝐞𝐫 𝐭𝐡𝐚𝐭 𝐝𝐢𝐝 𝐧𝐨𝐭 𝐫𝐞𝐪𝐮𝐞𝐬𝐭 𝐚𝐧𝐲 𝐜𝐨𝐧𝐟𝐢𝐫𝐦𝐚𝐭𝐢𝐨𝐧 𝐦𝐞𝐬𝐬𝐚𝐠𝐞𝐬 𝐢𝐬 𝟎. 
𝐑𝐨𝐮𝐧𝐝 𝐭𝐡𝐞 𝐜𝐨𝐧𝐟𝐢𝐫𝐦𝐚𝐭𝐢𝐨𝐧 𝐫𝐚𝐭𝐞 𝐭𝐨 𝐭𝐰𝐨 𝐝𝐞𝐜𝐢𝐦𝐚𝐥 𝐩𝐥𝐚𝐜𝐞𝐬. 
*/

## 𝐒𝐢𝐠𝐧𝐮𝐩𝐬 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE Signups (user_id INT PRIMARY KEY, time_stamp
DATETIME );

## 𝐒𝐢𝐠𝐧𝐮𝐩𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO Signups (user_id, time_stamp)
VALUES (3, '2020-03-21 10:16:13'),(7, '2020-01-04 13:57:59'),
(2, '2020-07-29 23:09:44'),(6, '2020-12-09 10:39:37');

## 𝐂𝐨𝐧𝐟𝐢𝐫𝐦𝐚𝐭𝐢𝐨𝐧𝐬 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE Confirmations (user_id INT,time_stamp DATETIME,
action VARCHAR(10) CHECK (action IN ('confirmed', 'timeout')),
PRIMARY KEY (user_id, time_stamp),
FOREIGN KEY (user_id) REFERENCES Signups(user_id) );

## 𝐂𝐨𝐧𝐟𝐢𝐫𝐦𝐚𝐭𝐢𝐨𝐧𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO Confirmations (user_id, time_stamp, action)
VALUES 
(3, '2021-01-06 03:30:46', 'timeout'),(3, '2021-07-14 14:00:00', 'timeout'),
(7, '2021-06-12 11:57:29', 'confirmed'),(7, '2021-06-13 12:58:28', 'confirmed'),
(7, '2021-06-14 13:59:27', 'confirmed'),(2, '2021-01-22 00:00:00', 'confirmed'),
(2, '2021-02-28 23:59:59', 'timeout');

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+---------+------------------+
| user_id | confirmation_rate|
+---------+------------------+
|    2    |       0.50       |
+---------+------------------+
|    3    |       0.00       |
+---------+------------------+
|    6    |       0.00       |
+---------+------------------+
|    7    |       1.00       |
+---------+------------------+

---------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟏𝟗) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐌𝐞𝐞𝐬𝐡𝐨 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

/*
𝐑𝐢𝐬𝐤 𝐢𝐬 𝐜𝐚𝐥𝐜𝐮𝐥𝐚𝐭𝐞𝐝 𝐛𝐲 𝐭𝐡𝐞 𝐚𝐝𝐝𝐢𝐭𝐢𝐨𝐧 𝐨𝐟 𝐂𝐁𝐂, 𝐑𝐁𝐇, 𝐚𝐧𝐝 𝐋𝐁𝐇. 𝐈𝐟 𝐭𝐡𝐞 𝐬𝐮𝐦 𝐢𝐬 𝐦𝐨𝐫𝐞 𝐭𝐡𝐚𝐧 𝟐𝟎,  "𝐇𝐢𝐠𝐡", 𝐛𝐞𝐭𝐰𝐞𝐞𝐧 𝟏𝟔-𝟐𝟎 𝐭𝐡𝐞𝐧 "𝐌𝐞𝐝𝐢𝐮𝐦", 𝐞𝐥𝐬𝐞 "𝐋𝐨𝐰"
*/

## 𝐈𝐧𝐬𝐮𝐫𝐚𝐧𝐜𝐞 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE insurance (
 Patient_id INT PRIMARY KEY,
 Insurance_id INT,
 Insurance_Name VARCHAR(50)
);

## 𝐈𝐧𝐬𝐮𝐫𝐚𝐧𝐜𝐞 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO insurance (Patient_id, Insurance_id, Insurance_Name)
VALUES 
 (1, 1001, 'India Insurance'),(2, 1002, 'ICICI Lombard'),
 (3, 1001, 'India Insurance'),(4, 1003, 'Star Health'),
 (5, 1003, 'Star Health');

# 𝐓𝐞𝐬𝐭 𝐓𝐚𝐛𝐥𝐞:-  
CREATE TABLE test (
 Patient_id INT,
 Test_type VARCHAR(10),
 Test_score INT,
 FOREIGN KEY (Patient_id) REFERENCES insurance(Patient_id)
);

# 𝐓𝐞𝐬𝐭 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:-  
INSERT INTO test (Patient_id, Test_type, Test_score)
VALUES 
(1, 'CBC', 7),(1, 'RBC', 6),(1, 'LBH', 6),(2, 'CBC', 7),(2, 'RBC', 8),(2, 'LBH', 8),
(3, 'CBC', 5),(3, 'RBC', 4),(3, 'LBH', 4),(4, 'CBC', 4),(4, 'RBC', 6),(4, 'LBH', 6),
(5, 'CBC', 5),(5, 'RBC', 6),(5, 'LBH', 7);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-----------+-------------+----------------+-----+-----+-----+--------+
| patient_id| insurance_id| insurance_name | CBC | RBC | LBM |  Risk  |
+-----------+-------------+----------------+-----+-----+-----+--------+
|     1     |    1002     | India Insurance|  7  |  6  |  6  | Medium |
+-----------+-------------+----------------+-----+-----+-----+--------+
|     2     |    1002     | ICICI Lombard  |  7  |  8  |  8  | High   |
+-----------+-------------+----------------+-----+-----+-----+--------+
|     3     |    1001     | India Insurance|  5  |  4  |  4  | Low    |
+-----------+-------------+----------------+-----+-----+-----+--------+
|     4     |    1003     | Star Health    |  4  |  6  |  6  | Medium |
+-----------+-------------+----------------+-----+-----+-----+--------+
|     5     |    1003     | Star Health    |  5  |  6  |  7  | Medium |
+-----------+-------------+----------------+-----+-----+-----+--------+


---------------------------------------------------------------------------------------------------------------------------------------------------------


## 📌 𝟐𝟎) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐆𝐨𝐨𝐠𝐥𝐞 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

/*
𝐀𝐬𝐬𝐮𝐦𝐞 𝐲𝐨𝐮'𝐫𝐞 𝐠𝐢𝐯𝐞𝐧 𝐚 𝐭𝐚𝐛𝐥𝐞 𝐰𝐢𝐭𝐡 𝐦𝐞𝐚𝐬𝐮𝐫𝐞𝐦𝐞𝐧𝐭 𝐯𝐚𝐥𝐮𝐞𝐬 𝐨𝐛𝐭𝐚𝐢𝐧𝐞𝐝 𝐟𝐫𝐨𝐦 𝐚 𝐆𝐨𝐨𝐠𝐥𝐞 𝐬𝐞𝐧𝐬𝐨𝐫 𝐨𝐯𝐞𝐫 
𝐦𝐮𝐥𝐭𝐢𝐩𝐥𝐞 𝐝𝐚𝐲𝐬 𝐰𝐢𝐭𝐡 𝐦𝐞𝐚𝐬𝐮𝐫𝐞𝐦𝐞𝐧𝐭𝐬 𝐭𝐚𝐤𝐞𝐧 𝐦𝐮𝐥𝐭𝐢𝐩𝐥𝐞 𝐭𝐢𝐦𝐞𝐬 𝐰𝐢𝐭𝐡𝐢𝐧 𝐞𝐚𝐜𝐡 𝐝𝐚𝐲.

𝐖𝐫𝐢𝐭𝐞 𝐚 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐜𝐚𝐥𝐜𝐮𝐥𝐚𝐭𝐞 𝐭𝐡𝐞 𝐬𝐮𝐦 𝐨𝐟 𝐨𝐝𝐝-𝐧𝐮𝐦𝐛𝐞𝐫𝐞𝐝 𝐚𝐧𝐝 𝐞𝐯𝐞𝐧-𝐧𝐮𝐦𝐛𝐞𝐫𝐞𝐝 𝐦𝐞𝐚𝐬𝐮𝐫𝐞𝐦𝐞𝐧𝐭𝐬 
𝐬𝐞𝐩𝐚𝐫𝐚𝐭𝐞𝐥𝐲 𝐟𝐨𝐫 𝐚 𝐩𝐚𝐫𝐭𝐢𝐜𝐮𝐥𝐚𝐫 𝐝𝐚𝐲 𝐚𝐧𝐝 𝐝𝐢𝐬𝐩𝐥𝐚𝐲 𝐭𝐡𝐞 𝐫𝐞𝐬𝐮𝐥𝐭𝐬 𝐢𝐧 𝐭𝐰𝐨 𝐝𝐢𝐟𝐟𝐞𝐫𝐞𝐧𝐭 𝐜𝐨𝐥𝐮𝐦𝐧𝐬. 
𝐑𝐞𝐟𝐞𝐫 𝐭𝐨 𝐭𝐡𝐞 𝐄𝐱𝐚𝐦𝐩𝐥𝐞 𝐎𝐮𝐭𝐩𝐮𝐭 𝐛𝐞𝐥𝐨𝐰 𝐟𝐨𝐫 𝐭𝐡𝐞 𝐝𝐞𝐬𝐢𝐫𝐞𝐝 𝐟𝐨𝐫𝐦𝐚𝐭.
*/

## 𝐌𝐞𝐚𝐬𝐮𝐫𝐞𝐦𝐞𝐧𝐭𝐬 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE Measurements (
 measurement_id INT,
 measurement_value DECIMAL(10, 2),
 measurement_time DATETIME
);

## 𝐌𝐞𝐚𝐬𝐮𝐫𝐞𝐦𝐞𝐧𝐭𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO Measurements (measurement_id, measurement_value, measurement_time) VALUES
(131233, 1109.51, '2022-07-10 09:00:00'),(135211, 1662.74, '2022-07-10 11:00:00'),
(143562, 1124.50, '2022-07-11 13:15:00'),(346462, 1234.14, '2022-07-11 15:00:00'),
(124245, 1252.62, '2022-07-11 16:45:00'),(523542, 1246.24, '2022-07-10 14:30:00'),
(143251, 1246.56, '2022-07-11 18:00:00'),(141565, 1452.40, '2022-07-12 08:00:00'),
(253622, 1244.30, '2022-07-12 14:00:00'),(353625, 1451.00, '2022-07-12 15:00:00');

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+----------------+-----------+-----------+
| measurement_day| odd_sum   | even_sum  |
+----------------+-----------+-----------+
| 2022-07-10     | 2552.75   | 1652.74   |
+----------------+-----------+-----------+
| 2022-07-11     | 2377.12   | 2480.70   |
+----------------+-----------+-----------+
| 2022-07-12     | 2903.40   | 1244.30   |
+----------------+-----------+-----------+

---------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟐𝟏) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐛𝐥𝐨𝐨𝐦𝐛𝐞𝐫𝐠 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

/*
𝐓𝐡𝐞 𝐁𝐥𝐨𝐨𝐦𝐛𝐞𝐫𝐠 𝐭𝐞𝐫𝐦𝐢𝐧𝐚𝐥 𝐢𝐬 𝐭𝐡𝐞 𝐠𝐨-𝐭𝐨 𝐫𝐞𝐬𝐨𝐮𝐫𝐜𝐞 𝐟𝐨𝐫 𝐟𝐢𝐧𝐚𝐧𝐜𝐢𝐚𝐥 𝐩𝐫𝐨𝐟𝐞𝐬𝐬𝐢𝐨𝐧𝐚𝐥𝐬, 𝐨𝐟𝐟𝐞𝐫𝐢𝐧𝐠 𝐜𝐨𝐧𝐯𝐞𝐧𝐢𝐞𝐧𝐭 𝐚𝐜𝐜𝐞𝐬𝐬 𝐭𝐨 𝐚 𝐰𝐢𝐝𝐞 𝐚𝐫𝐫𝐚𝐲 𝐨𝐟 𝐟𝐢𝐧𝐚𝐧𝐜𝐢𝐚𝐥 𝐝𝐚𝐭𝐚𝐬𝐞𝐭𝐬. 
𝐀𝐬 𝐚 𝐃𝐚𝐭𝐚 𝐀𝐧𝐚𝐥𝐲𝐬𝐭 𝐚𝐭 𝐁𝐥𝐨𝐨𝐦𝐛𝐞𝐫𝐠,𝐲𝐨𝐮 𝐡𝐚𝐯𝐞 𝐚𝐜𝐜𝐞𝐬𝐬 𝐭𝐨 𝐡𝐢𝐬𝐭𝐨𝐫𝐢𝐜𝐚𝐥 𝐝𝐚𝐭𝐚 𝐨𝐧 𝐬𝐭𝐨𝐜𝐤 𝐩𝐞𝐫𝐟𝐨𝐫𝐦𝐚𝐧𝐜𝐞.

𝐂𝐮𝐫𝐫𝐞𝐧𝐭𝐥𝐲, 𝐲𝐨𝐮'𝐫𝐞 𝐚𝐧𝐚𝐥𝐲𝐳𝐢𝐧𝐠 𝐭𝐡𝐞 𝐡𝐢𝐠𝐡𝐞𝐬𝐭 𝐚𝐧𝐝 𝐥𝐨𝐰𝐞𝐬𝐭 𝐨𝐩𝐞𝐧 𝐩𝐫𝐢𝐜𝐞𝐬 𝐟𝐨𝐫 𝐞𝐚𝐜𝐡 𝐅𝐀𝐀𝐍𝐆 𝐬𝐭𝐨𝐜𝐤 𝐛𝐲 𝐦𝐨𝐧𝐭𝐡 𝐨𝐯𝐞𝐫 𝐭𝐡𝐞 𝐲𝐞𝐚𝐫𝐬.

𝐅𝐨𝐫 𝐞𝐚𝐜𝐡 𝐅𝐀𝐀𝐍𝐆 𝐬𝐭𝐨𝐜𝐤, 𝐝𝐢𝐬𝐩𝐥𝐚𝐲 𝐭𝐡𝐞 𝐭𝐢𝐜𝐤𝐞𝐫 𝐬𝐲𝐦𝐛𝐨𝐥, 𝐭𝐡𝐞 𝐦𝐨𝐧𝐭𝐡 𝐚𝐧𝐝 𝐲𝐞𝐚𝐫 ('𝐌𝐨𝐧-𝐘𝐘𝐘𝐘') 𝐰𝐢𝐭𝐡 𝐭𝐡𝐞 𝐜𝐨𝐫𝐫𝐞𝐬𝐩𝐨𝐧𝐝𝐢𝐧𝐠 𝐡𝐢𝐠𝐡𝐞𝐬𝐭 𝐚𝐧𝐝 𝐥𝐨𝐰𝐞𝐬𝐭 𝐨𝐩𝐞𝐧 𝐩𝐫𝐢𝐜𝐞𝐬
(𝐫𝐞𝐟𝐞𝐫 𝐭𝐨 𝐭𝐡𝐞 𝐄𝐱𝐚𝐦𝐩𝐥𝐞 𝐎𝐮𝐭𝐩𝐮𝐭 𝐟𝐨𝐫𝐦𝐚𝐭).𝐄𝐧𝐬𝐮𝐫𝐞 𝐭𝐡𝐚𝐭 𝐭𝐡𝐞 𝐫𝐞𝐬𝐮𝐥𝐭𝐬 𝐚𝐫𝐞 𝐬𝐨𝐫𝐭𝐞𝐝 𝐛𝐲 𝐭𝐢𝐜𝐤𝐞𝐫 𝐬𝐲𝐦𝐛𝐨𝐥.
*/

-- 𝐂𝐫𝐞𝐚𝐭𝐞 𝐭𝐡𝐞 𝐭𝐚𝐛𝐥𝐞
CREATE TABLE StockPrices (
    trade_date DATETIME,
    ticker VARCHAR(10),
    open_price DECIMAL(10,2),
    high_price DECIMAL(10,2),
    low_price DECIMAL(10,2),
    close_price DECIMAL(10,2)
);

-- 𝐈𝐧𝐬𝐞𝐫𝐭 𝐭𝐡𝐞 𝐝𝐚𝐭𝐚
INSERT INTO StockPrices (trade_date, ticker, open_price, high_price, low_price, close_price)
VALUES
('2023-01-31 00:00:00', 'AAPL', 142.28, 142.70, 144.34, 144.29),
('2023-02-28 00:00:00', 'AAPL', 146.83, 147.05, 149.08, 147.41),
('2023-03-31 00:00:00', 'AAPL', 161.91, 162.44, 165.00, 164.90),
('2023-04-30 00:00:00', 'AAPL', 167.88, 168.49, 169.85, 169.68),
('2023-05-31 00:00:00', 'AAPL', 176.76, 177.33, 179.35, 177.25);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+--------+-------------+--------------+-------------+-------------+
| ticker | highest_mth | highest_open | lowest_mth  | lowest_open |
+--------+-------------+--------------+-------------+-------------+
| AAPL   | May-2023    |    176.76    | Jan-2023    |    142.28   |
+--------+-------------+--------------+-------------+-------------+

---------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟐𝟐) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐌𝐚𝐤𝐞𝐌𝐲𝐓𝐫𝐢𝐩 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

/*
𝐖𝐫𝐢𝐭𝐞 𝐚𝐧 𝐒𝐐𝐋 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐟𝐢𝐧𝐝 𝐭𝐡𝐞 𝐩𝐞𝐫𝐜𝐞𝐧𝐭𝐚𝐠𝐞 𝐨𝐟 𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞 𝐨𝐫𝐝𝐞𝐫𝐬 𝐢𝐧 
𝐭𝐡𝐞 𝐟𝐢𝐫𝐬𝐭 𝐨𝐫𝐝𝐞𝐫𝐬 𝐨𝐟 𝐚𝐥𝐥 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫𝐬, 𝐫𝐨𝐮𝐧𝐝𝐞𝐝 𝐭𝐨 𝟐 𝐝𝐞𝐜𝐢𝐦𝐚𝐥 𝐩𝐥𝐚𝐜𝐞𝐬.

𝐓𝐡𝐞 𝐟𝐢𝐫𝐬𝐭 𝐨𝐫𝐝𝐞𝐫 𝐨𝐟 𝐚 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫 𝐢𝐬 𝐭𝐡𝐞 𝐨𝐫𝐝𝐞𝐫 𝐰𝐢𝐭𝐡 𝐭𝐡𝐞 𝐞𝐚𝐫𝐥𝐢𝐞𝐬𝐭 𝐨𝐫𝐝𝐞𝐫
𝐝𝐚𝐭𝐞 𝐭𝐡𝐚𝐭 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫 𝐦𝐚𝐝𝐞. 𝐈𝐭 𝐢𝐬 𝐠𝐮𝐚𝐫𝐚𝐧𝐭𝐞𝐞𝐝 𝐭𝐡𝐚𝐭 𝐚 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫 𝐡𝐚𝐬 𝐞𝐱𝐚𝐜𝐭𝐥𝐲 𝐨𝐧𝐞 𝐟𝐢𝐫𝐬𝐭 𝐨𝐫𝐝𝐞𝐫.

𝐈𝐟 𝐭𝐡𝐞 𝐩𝐫𝐞𝐟𝐞𝐫𝐫𝐞𝐝 𝐝𝐞𝐥𝐢𝐯𝐞𝐫𝐲 𝐝𝐚𝐭𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫 𝐢𝐬 𝐭𝐡𝐞 𝐬𝐚𝐦𝐞 𝐚𝐬 
𝐭𝐡𝐞 𝐨𝐫𝐝𝐞𝐫 𝐝𝐚𝐭𝐞 𝐭𝐡𝐞𝐧 𝐭𝐡𝐞 𝐨𝐫𝐝𝐞𝐫 𝐢𝐬 𝐜𝐚𝐥𝐥𝐞𝐝 𝐢𝐦𝐦𝐞𝐝𝐢𝐚𝐭𝐞 𝐨𝐭𝐡𝐞𝐫𝐰𝐢𝐬𝐞 𝐢𝐭'𝐬 𝐜𝐚𝐥𝐥𝐞𝐝 𝐬𝐜𝐡𝐞𝐝𝐮𝐥𝐞𝐝.
*/

## 𝐃𝐞𝐥𝐢𝐯𝐞𝐫𝐲 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE Delivery (
 delivery_id INT PRIMARY KEY,
 customer_id INT NOT NULL,
 order_date DATE NOT NULL,
 customer_pref_delivery_date DATE NOT NULL
)

## 𝐃𝐞𝐥𝐢𝐯𝐞𝐫𝐲 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO Delivery (delivery_id, customer_id, order_date, customer_pref_delivery_date) VALUES
(1, 1, '2019-08-01', '2019-08-02'),(2, 2, '2019-08-02', '2019-08-02'),
(3, 1, '2019-08-11', '2019-08-12'),(4, 3, '2019-08-24', '2019-08-24'),
(5, 3, '2019-08-21', '2019-08-22'),(6, 2, '2019-08-11', '2019-08-13'),
(7, 4, '2019-08-09', '2019-08-09');

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+---------------------+  
| immediate_percentage|  
+---------------------+  
|        50.00        |  
+---------------------+  

---------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟐𝟑) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐓𝐂𝐒 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

/*
𝐖𝐫𝐢𝐭𝐞 𝐚𝐧 𝐒𝐐𝐋 𝐐𝐮𝐞𝐫𝐲 𝐭𝐨 𝐟𝐢𝐧𝐝 𝐨𝐮𝐭 𝐜𝐚𝐥𝐥 𝐝𝐮𝐫𝐚𝐭𝐢𝐨𝐧 (𝐢𝐧 𝐦𝐢𝐧𝐮𝐭𝐞) 𝐟𝐨𝐫 𝐞𝐯𝐞𝐫𝐲 𝐜𝐚𝐥𝐥.
*/

## 𝐂𝐚𝐥𝐥 𝐒𝐭𝐚𝐫𝐭 𝐓𝐚𝐛𝐥𝐞
CREATE TABLE call_start(
ph_no varchar(10),
start_time DATETIME);

## 𝐂𝐚𝐥𝐥 𝐒𝐭𝐚𝐫𝐭 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO call_start VALUES
('contact_1','2024-05-01 10:20:00'),
('contact_1','2024-05-01 16:25:00'),
('contact_2','2024-05-01 12:30:00'),
('contact_3','2024-05-02 10:00:00'),
('contact_3','2024-05-02 12:30:00'),
('contact_3','2024-05-03 09:20:00');

## 𝐂𝐚𝐥𝐥 𝐞𝐧𝐝 𝐓𝐚𝐛𝐥𝐞:- 
 CREATE TABLE call_end(
ph_no VARCHAR(10),
end_time DATETIME);

## 𝐂𝐚𝐥𝐥 𝐞𝐧𝐝 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO call_end VALUES
('contact_1','2024-05-01 10:45:00'),
('contact_1','2024-05-01 17:05:00'),
('contact_2','2024-05-01 12:55:00'),
('contact_3','2024-05-02 10:20:00'),
('contact_3','2024-05-02 12:50:00'),
('contact_3','2024-05-03 09:40:00');

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+------------+-------------------------+-------------------------+-----------------+
| ph_no      | start_time              | end_time                | call_duration_m |
+------------+-------------------------+-------------------------+-----------------+
| contact_1  | 2024-05-01 10:20:00.000 | 2024-05-01 10:45:00.000 | 25              |
| contact_1  | 2024-05-01 16:25:00.000 | 2024-05-01 17:05:00.000 | 40              |
| contact_2  | 2024-05-01 12:30:00.000 | 2024-05-01 12:55:00.000 | 25              |
| contact_3  | 2024-05-02 10:20:00.000 | 2024-05-02 10:40:00.000 | 20              |
| contact_3  | 2024-05-02 12:30:00.000 | 2024-05-02 12:50:00.000 | 20              |
| contact_3  | 2024-05-03 09:20:00.000 | 2024-05-03 09:40:00.000 | 20              |
+------------+-------------------------+-------------------------+-----------------+

---------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟐𝟒) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐇𝐒𝐁𝐂 𝐚𝐧𝐝 𝐀𝐭𝐥𝐚𝐬𝐬𝐢𝐚𝐧 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

/*
𝐖𝐫𝐢𝐭𝐞 𝐚𝐧 𝐒𝐐𝐋 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐟𝐢𝐧𝐝 𝐭𝐡𝐞 𝐬𝐚𝐥𝐚𝐫𝐢𝐞𝐬 𝐨𝐟 𝐭𝐡𝐞 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐚𝐟𝐭𝐞𝐫 𝐚𝐩𝐩𝐥𝐲𝐢𝐧𝐠 𝐭𝐚𝐱𝐞𝐬.

𝐓𝐡𝐞 𝐭𝐚𝐱 𝐫𝐚𝐭𝐞 𝐢𝐬 𝐜𝐚𝐥𝐜𝐮𝐥𝐚𝐭𝐞𝐝 𝐟𝐨𝐫 𝐞𝐚𝐜𝐡 𝐜𝐨𝐦𝐩𝐚𝐧𝐲 𝐛𝐚𝐬𝐞𝐝 𝐨𝐧 𝐭𝐡𝐞 𝐟𝐨𝐥𝐥𝐨𝐰𝐢𝐧𝐠 𝐜𝐫𝐢𝐭𝐞𝐫𝐢𝐚:
𝟎% 𝐈𝐟 𝐭𝐡𝐞 𝐦𝐚𝐱 𝐬𝐚𝐥𝐚𝐫𝐲 𝐨𝐟 𝐚𝐧𝐲 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞 𝐢𝐧 𝐭𝐡𝐞 𝐜𝐨𝐦𝐩𝐚𝐧𝐲 𝐢𝐬 𝐥𝐞𝐬𝐬 𝐭𝐡𝐚𝐧 𝟏𝟎𝟎𝟎$. 𝟐𝟒% 𝐈𝐟 𝐭𝐡𝐞 𝐦𝐚𝐱 𝐬𝐚𝐥𝐚𝐫𝐲 𝐨𝐟 𝐚𝐧𝐲 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞 𝐢𝐧 𝐭𝐡𝐞 𝐜𝐨𝐦𝐩𝐚𝐧𝐲 𝐢𝐬
𝐢𝐧 𝐭𝐡𝐞 𝐫𝐚𝐧𝐠𝐞 [𝟏𝟎𝟎𝟎, 𝟏𝟎𝟎𝟎𝟎] 𝐢𝐧𝐜𝐥𝐮𝐬𝐢𝐯𝐞. 𝟒𝟗% 𝐈𝐟 𝐭𝐡𝐞 𝐦𝐚𝐱 𝐬𝐚𝐥𝐚𝐫𝐲 𝐨𝐟 𝐚𝐧𝐲 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞 𝐢𝐧 𝐭𝐡𝐞 𝐜𝐨𝐦𝐩𝐚𝐧𝐲 𝐢𝐬 𝐠𝐫𝐞𝐚𝐭𝐞𝐫 𝐭𝐡𝐚𝐧 𝟏𝟎𝟎𝟎𝟎$.

𝐑𝐞𝐭𝐮𝐫𝐧 𝐭𝐡𝐞 𝐫𝐞𝐬𝐮𝐥𝐭 𝐭𝐚𝐛𝐥𝐞 𝐢𝐧 𝐚𝐧𝐲 𝐨𝐫𝐝𝐞𝐫. 𝐑𝐨𝐮𝐧𝐝 𝐭𝐡𝐞 𝐬𝐚𝐥𝐚𝐫𝐲 𝐭𝐨 𝐭𝐡𝐞 𝐧𝐞𝐚𝐫𝐞𝐬𝐭 𝐢𝐧𝐭𝐞𝐠𝐞𝐫.
*/

## 𝐒𝐚𝐥𝐚𝐫𝐢𝐞𝐬 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE Salaries (
 company_id INT,
 employee_id INT,
 employee_name VARCHAR(50),
 salary INT,
 PRIMARY KEY (company_id, employee_id)
);

## 𝐒𝐚𝐥𝐚𝐫𝐢𝐞𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO Salaries (company_id, employee_id, employee_name, salary) VALUES
(1, 1, 'Tony', 2000),(1, 2, 'Pronub', 21300),
(1, 3, 'Tyrrox', 10800),(2, 1, 'Pam', 300),
(2, 7, 'Bassem', 450),(2, 9, 'Hermione', 700),
(3, 7, 'Bocaben', 100),(3, 2, 'Ognjen', 2200),
(3, 13, 'Nyancat', 3300),(3, 15, 'Morninngcat', 7777);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+------------+-------------+----------------+-----------------+
| company_id | employee_id | employee_name  | salary_after_tx |
+------------+-------------+----------------+-----------------+
| 1          | 1           | Tony           | 1020.00         |
| 1          | 2           | Pronub         | 10863.00        |
| 1          | 3           | Tyrox          | 5508.00         |
| 2          | 7           | Pam            | 300.00          |
| 2          | 7           | Bassem         | 450.00          |
| 2          | 9           | Hermione       | 700.00          |
| 3          | 2           | Ognjen         | 1672.00         |
| 3          | 7           | Bocaben        | 76.00           |
| 3          | 13          | Nyancat        | 2508.00         |
| 3          | 15          | Morningcat     | 5911.00         |
+------------+-------------+----------------+-----------------+

---------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟐𝟓) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐀𝐝𝐨𝐛𝐞 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

/*
𝐀 𝐜𝐨𝐦𝐩𝐚𝐧𝐲 𝐰𝐚𝐧𝐭𝐬 𝐭𝐨 𝐝𝐢𝐯𝐢𝐝𝐞 𝐭𝐡𝐞 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐢𝐧𝐭𝐨 𝐭𝐞𝐚𝐦𝐬 𝐬𝐮𝐜𝐡 𝐭𝐡𝐚𝐭 𝐚𝐥𝐥 𝐭𝐡𝐞 𝐦𝐞𝐦𝐛𝐞𝐫𝐬 𝐨𝐧 𝐞𝐚𝐜𝐡 𝐭𝐞𝐚𝐦 𝐡𝐚𝐯𝐞 𝐭𝐡𝐞 𝐬𝐚𝐦𝐞 𝐬𝐚𝐥𝐚𝐫𝐲. 𝐓𝐡𝐞 𝐭𝐞𝐚𝐦𝐬 𝐬𝐡𝐨𝐮𝐥𝐝 𝐟𝐨𝐥𝐥𝐨𝐰 𝐭𝐡𝐞𝐬𝐞 𝐜𝐫𝐢𝐭𝐞𝐫𝐢𝐚:

𝐄𝐚𝐜𝐡 𝐭𝐞𝐚𝐦 𝐬𝐡𝐨𝐮𝐥𝐝 𝐜𝐨𝐧𝐬𝐢𝐬𝐭 𝐨𝐟 𝐚𝐭 𝐥𝐞𝐚𝐬𝐭 𝐭𝐰𝐨 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬.
𝐀𝐥𝐥 𝐭𝐡𝐞 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐨𝐧 𝐚 𝐭𝐞𝐚𝐦 𝐬𝐡𝐨𝐮𝐥𝐝 𝐡𝐚𝐯𝐞 𝐭𝐡𝐞 𝐬𝐚𝐦𝐞 𝐬𝐚𝐥𝐚𝐫𝐲.
𝐀𝐥𝐥 𝐭𝐡𝐞 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐨𝐟 𝐭𝐡𝐞 𝐬𝐚𝐦𝐞 𝐬𝐚𝐥𝐚𝐫𝐲 𝐬𝐡𝐨𝐮𝐥𝐝 𝐛𝐞 𝐚𝐬𝐬𝐢𝐠𝐧𝐞𝐝 𝐭𝐨 𝐭𝐡𝐞 𝐬𝐚𝐦𝐞 𝐭𝐞𝐚𝐦. 𝐈𝐟 𝐭𝐡𝐞 𝐬𝐚𝐥𝐚𝐫𝐲 𝐨𝐟 𝐚𝐧 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞 𝐢𝐬 𝐮𝐧𝐢𝐪𝐮𝐞, 𝐰𝐞 𝐝𝐨 𝐧𝐨𝐭 𝐚𝐬𝐬𝐢𝐠𝐧 
𝐭𝐡𝐢𝐬 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞 𝐭𝐨 𝐚𝐧𝐲 𝐭𝐞𝐚𝐦. 𝐀 𝐭𝐞𝐚𝐦'𝐬 𝐈𝐃 𝐢𝐬 𝐚𝐬𝐬𝐢𝐠𝐧𝐞𝐝 𝐛𝐚𝐬𝐞𝐝 𝐨𝐧 𝐭𝐡𝐞 𝐫𝐚𝐧𝐤 𝐨𝐟 𝐭𝐡𝐞 𝐭𝐞𝐚𝐦'𝐬 𝐬𝐚𝐥𝐚𝐫𝐲 𝐫𝐞𝐥𝐚𝐭𝐢𝐯𝐞 𝐭𝐨 𝐭𝐡𝐞 𝐨𝐭𝐡𝐞𝐫 𝐭𝐞𝐚𝐦𝐬' 𝐬𝐚𝐥𝐚𝐫𝐢𝐞𝐬, 𝐰𝐡𝐞𝐫𝐞 
𝐭𝐡𝐞 𝐭𝐞𝐚𝐦 𝐰𝐢𝐭𝐡 𝐭𝐡𝐞 𝐥𝐨𝐰𝐞𝐬𝐭 𝐬𝐚𝐥𝐚𝐫𝐲 𝐡𝐚𝐬 𝐭𝐞𝐚𝐦_𝐢𝐝 = 𝟏.
 
𝐑𝐞𝐭𝐮𝐫𝐧 𝐭𝐡𝐞 𝐫𝐞𝐬𝐮𝐥𝐭 𝐭𝐚𝐛𝐥𝐞 𝐨𝐫𝐝𝐞𝐫𝐞𝐝 𝐛𝐲 𝐭𝐞𝐚𝐦_𝐢𝐝 𝐢𝐧 𝐚𝐬𝐜𝐞𝐧𝐝𝐢𝐧𝐠 𝐨𝐫𝐝𝐞𝐫. 𝐈𝐧 𝐜𝐚𝐬𝐞 𝐨𝐟 𝐚 𝐭𝐢𝐞, 𝐨𝐫𝐝𝐞𝐫 𝐢𝐭 𝐛𝐲 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞_𝐢𝐝 𝐢𝐧 𝐚𝐬𝐜𝐞𝐧𝐝𝐢𝐧𝐠 𝐨𝐫𝐝𝐞𝐫.
*/

## 𝐄𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE Employees_ (
 employee_id INT PRIMARY KEY,
 name VARCHAR(50),
 salary INT
)

## 𝐄𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO Employees_ (employee_id, name, salary) VALUES
(2, 'Meir', 3000),(3, 'Michael', 3000),
(7, 'Addilyn', 7400),(8, 'Juan', 6100),
(9, 'Kannon', 7400);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-------------+---------+--------+---------+
| employee_id | name    | salary | team_id |
+-------------+---------+--------+---------+
| 2           | Meir    | 3000   | 1       |
| 3           | Michael | 3000   | 1       |
| 7           | Addilyn | 7400   | 2       |
| 9           | Kannon  | 7400   | 2       |
+-------------+---------+--------+---------+

---------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟐𝟔) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐅𝐥𝐢𝐩𝐤𝐚𝐫𝐭 𝐚𝐧𝐝  𝐌𝐢𝐜𝐫𝐨𝐬𝐨𝐟𝐭 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

 /*
𝐖𝐫𝐢𝐭𝐞 𝐚 𝐒𝐐𝐋 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐟𝐢𝐱 𝐭𝐡𝐞 𝐧𝐚𝐦𝐞𝐬 𝐬𝐨 𝐭𝐡𝐚𝐭 𝐨𝐧𝐥𝐲 𝐟𝐢𝐫𝐬𝐭 𝐜𝐡𝐚𝐫𝐚𝐜𝐭𝐞𝐫 𝐢𝐬 𝐔𝐩𝐩𝐞𝐫-𝐂𝐚𝐬𝐞 𝐚𝐧𝐝 𝐭𝐡𝐞 𝐫𝐞𝐬𝐭 𝐚𝐫𝐞 𝐋𝐨𝐰𝐞𝐫-𝐂𝐚𝐬𝐞. 
𝐑𝐞𝐭𝐮𝐫𝐧 𝐭𝐡𝐞 𝐫𝐞𝐬𝐮𝐥𝐭 𝐭𝐚𝐛𝐥𝐞 𝐨𝐫𝐝𝐞𝐫𝐞𝐝 𝐛𝐲 𝐮𝐬𝐞𝐫_𝐢𝐝.
*/

## 𝐔𝐬𝐞𝐫𝐬 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE Users (
 user_id INT PRIMARY KEY,
 name NVARCHAR(50)
);

## 𝐔𝐬𝐞𝐫𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO Users (user_id, name)
VALUES (1, 'aLice'),(2, 'bOB');

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+---------+-----------+
| user_id | user_name |
+---------+-----------+
|    1    | Alice     |
+---------+-----------+
|    2    | Bob       |
+---------+-----------+

---------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟐𝟕) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐰𝐚𝐲𝐟𝐚𝐢𝐫 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

/*
𝐀𝐬𝐬𝐮𝐦𝐞 𝐲𝐨𝐮'𝐫𝐞 𝐠𝐢𝐯𝐞𝐧 𝐚 𝐭𝐚𝐛𝐥𝐞 𝐜𝐨𝐧𝐭𝐚𝐢𝐧𝐢𝐧𝐠 𝐢𝐧𝐟𝐨𝐫𝐦𝐚𝐭𝐢𝐨𝐧 𝐚𝐛𝐨𝐮𝐭 𝐖𝐚𝐲𝐟𝐚𝐢𝐫 𝐮𝐬𝐞𝐫 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧𝐬 𝐟𝐨𝐫 𝐝𝐢𝐟𝐟𝐞𝐫𝐞𝐧𝐭 𝐩𝐫𝐨𝐝𝐮𝐜𝐭𝐬. 𝐖𝐫𝐢𝐭𝐞 𝐚 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐜𝐚𝐥𝐜𝐮𝐥𝐚𝐭𝐞 
𝐭𝐡𝐞 𝐲𝐞𝐚𝐫-𝐨𝐧-𝐲𝐞𝐚𝐫 𝐠𝐫𝐨𝐰𝐭𝐡 𝐫𝐚𝐭𝐞 𝐟𝐨𝐫 𝐭𝐡𝐞 𝐭𝐨𝐭𝐚𝐥 𝐬𝐩𝐞𝐧𝐝 𝐨𝐟 𝐞𝐚𝐜𝐡 𝐩𝐫𝐨𝐝𝐮𝐜𝐭, 𝐠𝐫𝐨𝐮𝐩𝐢𝐧𝐠 𝐭𝐡𝐞 𝐫𝐞𝐬𝐮𝐥𝐭𝐬 𝐛𝐲 𝐩𝐫𝐨𝐝𝐮𝐜𝐭 𝐈𝐃.

𝐓𝐡𝐞 𝐨𝐮𝐭𝐩𝐮𝐭 𝐬𝐡𝐨𝐮𝐥𝐝 𝐢𝐧𝐜𝐥𝐮𝐝𝐞 𝐭𝐡𝐞 𝐲𝐞𝐚𝐫 𝐢𝐧 𝐚𝐬𝐜𝐞𝐧𝐝𝐢𝐧𝐠 𝐨𝐫𝐝𝐞𝐫, 𝐩𝐫𝐨𝐝𝐮𝐜𝐭 𝐈𝐃, 𝐜𝐮𝐫𝐫𝐞𝐧𝐭 𝐲𝐞𝐚𝐫'𝐬 𝐬𝐩𝐞𝐧𝐝, 𝐩𝐫𝐞𝐯𝐢𝐨𝐮𝐬 𝐲𝐞𝐚𝐫'𝐬 𝐬𝐩𝐞𝐧𝐝 𝐚𝐧𝐝 𝐲𝐞𝐚𝐫-𝐨𝐧-𝐲𝐞𝐚𝐫 𝐠𝐫𝐨𝐰𝐭𝐡 
𝐩𝐞𝐫𝐜𝐞𝐧𝐭𝐚𝐠𝐞, 𝐫𝐨𝐮𝐧𝐝𝐞𝐝 𝐭𝐨 𝟐 𝐝𝐞𝐜𝐢𝐦𝐚𝐥 𝐩𝐥𝐚𝐜𝐞𝐬.
*/

## 𝐔𝐬𝐞𝐫 𝐓𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧𝐬 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE user_Transactions (
transaction_id INT PRIMARY KEY,
product_id INT,
spend DECIMAL(10,2),
transaction_date DATETIM);

## 𝐔𝐬𝐞𝐫 𝐓𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO user_Transactions (transaction_id, product_id, spend, transaction_date) VALUES
(1341, 123424, 1500.60, '2019-12-31 12:00:00'),(1423, 123424, 1000.20, '2020-12-31 12:00:00'),
(1623, 123424, 1246.44, '2021-12-31 12:00:00'),(1322, 123424, 2145.32, '2022-12-31 12:00:00'),
(1344, 234412, 1800.00, '2019-12-31 12:00:00'),(1435, 234412, 1234.00, '2020-12-31 12:00:00'),
(4325, 234412, 889.50, '2021-12-31 12:00:00'),(5233, 234412, 2900.00, '2022-12-31 12:00:00'),
(2134, 543623, 6450.00, '2019-12-31 12:00:00'),(1234, 543623, 5348.12, '2020-12-31 12:00:00'),
(2423, 543623, 2345.00, '2021-12-31 12:00:00'),(1245, 543623, 5680.00, '2022-12-31 12:00:00');

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+------+------------+----------------+----------------+----------+
| year | product_id | curr_year_spend| prev_year_spend| yoy_rate |
+------+------------+----------------+----------------+----------+
| 2019 | 123424     | 1500.60        | NULL           | NULL     |
| 2020 | 123424     | 1000.28        | 1500.60        | -33.35   |
| 2021 | 123424     | 1246.44        | 1000.28        | 24.62    |
| 2022 | 123424     | 2145.32        | 1246.44        | 72.12    |
| 2020 | 234412     | 1890.00        | NULL           | NULL     |
| 2021 | 234412     | 1300.00        | 1890.00        | -31.44   |
| 2022 | 234412     |  949.58        | 1300.00        | -27.02   |
| 2022 | 543423     | 6548.00        | 1989.56        | 226.83   |
| 2019 | 543631     | 7890.00        | NULL           | NULL     |
| 2020 | 543631     | 6548.12        | 7890.00        | -17.08   |
| 2021 | 543631     | 2345.00        | 6548.12        | -64.15   |
| 2022 | 543631     | 5688.00        | 2345.00        | 142.22   |
+------+------------+----------------+----------------+----------+

---------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟐𝟖) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐑𝐨𝐛𝐢𝐧𝐡𝐨𝐨𝐝 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵


/*
 𝐖𝐫𝐢𝐭𝐞 𝐚 𝐪𝐮𝐞𝐫𝐲 𝐭𝐡𝐚𝐭 𝐬𝐡𝐨𝐰𝐬 𝐭𝐡𝐞 𝐧𝐮𝐦𝐛𝐞𝐫 𝐨𝐟 𝐬𝐞𝐚𝐭𝐬 𝐧𝐨𝐭 𝐲𝐞𝐭 𝐩𝐮𝐫𝐜𝐡𝐚𝐬𝐞𝐝 𝐟𝐨𝐫 𝐞𝐚𝐜𝐡 𝐟𝐥𝐢𝐠𝐡𝐭_𝐢𝐝.
*/

## 𝐅𝐥𝐢𝐠𝐡𝐭𝐬 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE flights (
 flight_id INT PRIMARY KEY,
 plane_id INT
);

## 𝐅𝐥𝐢𝐠𝐡𝐭𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO flights (flight_id, plane_id) VALUES
(1, 11),(2, 12),(3, 13),(4, 14),(5, 15);

## 𝐏𝐥𝐚𝐧𝐞𝐬 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE planes (
 plane_id INT PRIMARY KEY,
 number_of_seats INT
);

## 𝐏𝐥𝐚𝐧𝐞𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO planes (plane_id, number_of_seats) VALUES
(11, 15),(12, 30),(13, 40),(14, 50),(15, 35);

## 𝐏𝐮𝐫𝐜𝐡𝐚𝐬𝐞 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE purchase (
 flight_id INT,
 seat_no INT,
 PRIMARY KEY (flight_id, seat_no)
);

## 𝐏𝐮𝐫𝐜𝐡𝐚𝐬𝐞 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO purchase (flight_id, seat_no) VALUES
(1, 1),(1, 2),(2, 3),(2, 4),(3, 5),(3, 6),(3, 7),(1, 8),(1, 9),(2, 10);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-----------+----------------+-----------------+
| flight_id | number_of_seats| not_yet_purchase|
+-----------+----------------+-----------------+
| 1         | 15             | 11              |
| 2         | 30             | 27              |
| 3         | 40             | 37              |
| 4         | 50             | 0               |
| 5         | 35             | 0               |
+-----------+----------------+-----------------+

---------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟐𝟗) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐅𝐥𝐢𝐩𝐤𝐚𝐫𝐭 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

/*
𝐓𝐡𝐞𝐫𝐞 𝐢𝐬 𝐚 𝐪𝐮𝐞𝐮𝐞 𝐨𝐟 𝐩𝐞𝐨𝐩𝐥𝐞 𝐰𝐚𝐢𝐭𝐢𝐧𝐠 𝐭𝐨 𝐛𝐨𝐚𝐫𝐝 𝐚 𝐛𝐮𝐬. 𝐇𝐨𝐰𝐞𝐯𝐞𝐫, 𝐭𝐡𝐞 𝐛𝐮𝐬 𝐡𝐚𝐬 𝐚 𝐰𝐞𝐢𝐠𝐡𝐭 𝐥𝐢𝐦𝐢𝐭 𝐨𝐟 𝟏𝟎𝟎𝟎 𝐤𝐢𝐥𝐨𝐠𝐫𝐚𝐦𝐬, 
𝐬𝐨 𝐭𝐡𝐞𝐫𝐞 𝐦𝐚𝐲 𝐛𝐞 𝐬𝐨𝐦𝐞 𝐩𝐞𝐨𝐩𝐥𝐞 𝐰𝐡𝐨 𝐜𝐚𝐧𝐧𝐨𝐭 𝐛𝐨𝐚𝐫𝐝.
𝐖𝐫𝐢𝐭𝐞 𝐚 𝐬𝐨𝐥𝐮𝐭𝐢𝐨𝐧 𝐭𝐨 𝐟𝐢𝐧𝐝 𝐭𝐡𝐞 𝐩𝐞𝐫𝐬𝐨𝐧_𝐧𝐚𝐦𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐥𝐚𝐬𝐭 𝐩𝐞𝐫𝐬𝐨𝐧 𝐭𝐡𝐚𝐭 𝐜𝐚𝐧 𝐟𝐢𝐭 𝐨𝐧 𝐭𝐡𝐞 𝐛𝐮𝐬 𝐰𝐢𝐭𝐡𝐨𝐮𝐭 𝐞𝐱𝐜𝐞𝐞𝐝𝐢𝐧𝐠 𝐭𝐡𝐞 𝐰𝐞𝐢𝐠𝐡𝐭 𝐥𝐢𝐦𝐢𝐭. 𝐓𝐡𝐞 𝐭𝐞𝐬𝐭 𝐜𝐚𝐬𝐞𝐬 𝐚𝐫𝐞
𝐠𝐞𝐧𝐞𝐫𝐚𝐭𝐞𝐝 𝐬𝐮𝐜𝐡 𝐭𝐡𝐚𝐭 𝐭𝐡𝐞 𝐟𝐢𝐫𝐬𝐭 𝐩𝐞𝐫𝐬𝐨𝐧 𝐝𝐨𝐞𝐬 𝐧𝐨𝐭 𝐞𝐱𝐜𝐞𝐞𝐝 𝐭𝐡𝐞 𝐰𝐞𝐢𝐠𝐡𝐭 𝐥𝐢𝐦𝐢𝐭.

𝐍𝐨𝐭𝐞 𝐭𝐡𝐚𝐭 𝐨𝐧𝐥𝐲 𝐨𝐧𝐞 𝐩𝐞𝐫𝐬𝐨𝐧 𝐜𝐚𝐧 𝐛𝐨𝐚𝐫𝐝 𝐭𝐡𝐞 𝐛𝐮𝐬 𝐚𝐭 𝐚𝐧𝐲 𝐠𝐢𝐯𝐞𝐧 𝐭𝐮𝐫𝐧.
*/

## 𝐐𝐮𝐞𝐮𝐞 𝐓𝐚𝐛𝐥𝐞:-  
CREATE TABLE Queue (
 person_id INT PRIMARY KEY,
 person_name VARCHAR(50),
 weight INT,
 turn INT
);

## 𝐐𝐮𝐞𝐮𝐞 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:-
INSERT INTO Queue (person_id, person_name, weight, turn) VALUES
(5, 'Alice', 250, 1),(4, 'Bob', 175, 5),(3, 'Alex', 350, 2),
(6, 'John Cena', 400, 3),(1, 'Winston', 500, 6),(2, 'Marie', 200, 4);


## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+--------------+
| Person_name  |
+--------------+
| John Cena    |
+--------------+

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟑𝟎) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧  𝐄𝐘 𝐏𝐰𝐂 𝐈𝐧𝐝𝐢𝐚 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

/*𝐖𝐫𝐢𝐭𝐞 𝐚𝐧 𝐒𝐐𝐋 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐜𝐚𝐥𝐜𝐮𝐥𝐚𝐭𝐞 𝐭𝐡𝐞 𝐩𝐞𝐫𝐜𝐞𝐧𝐭𝐚𝐠𝐞 𝐨𝐟 𝐬𝐮𝐜𝐜𝐞𝐬𝐬𝐟𝐮𝐥 𝐩𝐚𝐲𝐦𝐞𝐧𝐭𝐬 
𝐟𝐨𝐫 𝐞𝐚𝐜𝐡 𝐝𝐫𝐢𝐯𝐞𝐫 𝐢𝐧 𝐭𝐡𝐞 𝐭𝐚𝐛𝐥𝐞. 𝐀 𝐩𝐚𝐲𝐦𝐞𝐧𝐭 𝐢𝐬 𝐜𝐨𝐧𝐬𝐢𝐝𝐞𝐫𝐞𝐝 𝐬𝐮𝐜𝐜𝐞𝐬𝐬𝐟𝐮𝐥
𝐢𝐟 𝐢𝐭𝐬 𝐬𝐭𝐚𝐭𝐮𝐬 𝐢𝐬 '𝐂𝐨𝐦𝐩𝐥𝐞𝐭𝐞𝐝'
*/

-- 𝐑𝐢𝐝𝐞𝐬 𝐓𝐚𝐛𝐥𝐞
CREATE TABLE Rides (
 ride_id INT PRIMARY KEY,
 driver_id INT,
 fare_amount DECIMAL(10, 2),
 driver_rating DECIMAL(3, 2),
 start_time DATETIME
)

-- 𝐈𝐧𝐬𝐞𝐫𝐭 𝐭𝐡𝐞 𝐝𝐚𝐭𝐚 𝐈𝐧𝐭𝐨 𝐑𝐢𝐝𝐞𝐬 𝐓𝐚𝐛𝐥𝐞
INSERT INTO Queue (person_id, person_name, weight, turn) VALUES
(5, 'Alice', 250, 1),(4, 'Bob', 175, 5),(3, 'Alex', 350, 2),
(6, 'John Cena', 400, 3),(1, 'Winston', 500, 6),(2, 'Marie', 200, 4);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-----------+-------------------+
| driver_id | success_percentage|
+-----------+-------------------+
|    101    |        50.00      |
+-----------+-------------------+
|    102    |       100.00      |
+-----------+-------------------+
|    103    |        50.00      |
+-----------+-------------------+
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟑𝟏) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐎𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐏𝐚𝐲𝐏𝐚𝐥🔵

💡𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧:-
/*
𝐅𝐢𝐧𝐚𝐥 𝐀𝐜𝐜𝐨𝐮𝐧𝐭 𝐁𝐚𝐥𝐚𝐧𝐜𝐞 
𝐆𝐢𝐯𝐞𝐧 𝐚 𝐭𝐚𝐛𝐥𝐞 𝐜𝐨𝐧𝐭𝐚𝐢𝐧𝐢𝐧𝐠 𝐢𝐧𝐟𝐨𝐫𝐦𝐚𝐭𝐢𝐨𝐧 𝐚𝐛𝐨𝐮𝐭 𝐛𝐚𝐧𝐤 𝐝𝐞𝐩𝐨𝐬𝐢𝐭𝐬 𝐚𝐧𝐝 𝐰𝐢𝐭𝐡𝐝𝐫𝐚𝐰𝐚𝐥𝐬 𝐦𝐚𝐝𝐞 𝐮𝐬𝐢𝐧𝐠 𝐏𝐚𝐲𝐩𝐚𝐥, 
𝐰𝐫𝐢𝐭𝐞 𝐚 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐫𝐞𝐭𝐫𝐢𝐞𝐯𝐞 𝐭𝐡𝐞 𝐟𝐢𝐧𝐚𝐥 𝐚𝐜𝐜𝐨𝐮𝐧𝐭 𝐛𝐚𝐥𝐚𝐧𝐜𝐞 𝐟𝐨𝐫 𝐞𝐚𝐜𝐡 𝐚𝐜𝐜𝐨𝐮𝐧𝐭, 𝐭𝐚𝐤𝐢𝐧𝐠 𝐢𝐧𝐭𝐨 𝐚𝐜𝐜𝐨𝐮𝐧𝐭 𝐚𝐥𝐥 𝐭𝐡𝐞 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧𝐬 𝐫𝐞𝐜𝐨𝐫𝐝𝐞𝐝 𝐢𝐧 𝐭𝐡𝐞 𝐭𝐚𝐛𝐥𝐞 𝐰𝐢𝐭𝐡 𝐭𝐡𝐞 𝐚𝐬𝐬𝐮𝐦𝐩𝐭𝐢𝐨𝐧 𝐭𝐡𝐚𝐭
𝐭𝐡𝐞𝐫𝐞 𝐚𝐫𝐞 𝐧𝐨 𝐦𝐢𝐬𝐬𝐢𝐧𝐠 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧𝐬.𝐚𝐜𝐜𝐨𝐮𝐧𝐭.
*/

-- 𝐓𝐚𝐛𝐥𝐞
CREATE TABLE Transactions_ (
 transaction_id INT,
 account_id INT,
 amount DECIMAL(10, 2),
 transaction_type VARCHAR(20)
);

-- 𝐈𝐧𝐬𝐞𝐫𝐭 𝐭𝐡𝐞 𝐝𝐚𝐭𝐚
INSERT INTO Transactions_ (transaction_id, account_id, amount, transaction_type) VALUES
(123, 101, 10.00, 'Deposit'),(124, 101, 20.00, 'Deposit'),
(125, 101, 5.00, 'Withdrawal'),(126, 201, 20.00, 'Deposit'),
(128, 201, 10.00, 'Withdrawal');

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+------------+---------------+
| account_id | final_balance |
+------------+---------------+
|    101     |     25.00     |
+------------+---------------+
|    201     |     10.00     |
+------------+---------------+

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟑𝟐) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵 𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐌𝐚𝐬𝐭𝐞𝐫𝐜𝐚𝐫𝐝 🔵

💡𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧:-
/*
𝐄𝐦𝐩𝐥𝐨𝐲𝐞𝐞 𝐒𝐚𝐥𝐚𝐫𝐢𝐞𝐬 𝐇𝐢𝐠𝐡𝐞𝐫 𝐓𝐡𝐚𝐧 𝐓𝐡𝐞𝐢𝐫 𝐌𝐚𝐧𝐚𝐠𝐞𝐫
𝐈𝐦𝐚𝐠𝐢𝐧𝐞 𝐭𝐡𝐞𝐫𝐞 𝐰𝐚𝐬 𝐚 𝐭𝐚𝐛𝐥𝐞 𝐨𝐟 𝐌𝐚𝐬𝐭𝐞𝐫𝐜𝐚𝐫𝐝 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞 𝐬𝐚𝐥𝐚𝐫𝐲 𝐝𝐚𝐭𝐚. 𝐖𝐫𝐢𝐭𝐞 𝐚 
𝐒𝐐𝐋 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐟𝐢𝐧𝐝 𝐭𝐡𝐞 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐰𝐡𝐨 𝐞𝐚𝐫𝐧 𝐦𝐨𝐫𝐞 𝐭𝐡𝐚𝐧 𝐭𝐡𝐞𝐢𝐫 𝐨𝐰𝐧 𝐦𝐚𝐧𝐚𝐠𝐞𝐫.
*/

-- 𝐓𝐚𝐛𝐥𝐞
CREATE TABLE employees (
 employee_id INT PRIMARY KEY,
 name VARCHAR(100),
 salary DECIMAL(10, 2),
 department_id INT,
 manager_id INT NULL
);

-- 𝐈𝐧𝐬𝐞𝐫𝐭 𝐭𝐡𝐞 𝐝𝐚𝐭𝐚
INSERT INTO employees (employee_id, name, salary, department_id, manager_id) VALUES
(1, 'Emma Thompson', 3800.00, 1, NULL),
(2, 'Daniel Rodriguez', 2230.00, 1, 10),
(3, 'Olivia Smith', 8000.00, 1, 8),
(4, 'Noah Johnson', 6800.00, 2, 8),
(5, 'Sophia Martinez', 1750.00, 1, 10),
(8, 'William Davis', 7000.00, 2, NULL),
(10, 'James Anderson', 4000.00, 1, NULL);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
-------------+----------------+----------------+---------------+----------------+
| employee_id | employee_name  | employee_salary| manager_name  | manager_salary |
+-------------+----------------+----------------+---------------+----------------+
|      3      | Olivia Smith   |     8000.00    | William Davis |     7000.00    |
+-------------+----------------+----------------+---------------+----------------+

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟑𝟑) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧𝐬 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐆𝐨𝐨𝐠𝐥𝐞 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

💡𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧:-
/*
𝐆𝐨𝐨𝐠𝐥𝐞 𝐌𝐚𝐩𝐬 𝐅𝐥𝐚𝐠𝐠𝐞𝐝 𝐔𝐆𝐂
𝐀𝐬 𝐚 𝐃𝐚𝐭𝐚 𝐀𝐧𝐚𝐥𝐲𝐬𝐭 𝐨𝐧 𝐭𝐡𝐞 𝐆𝐨𝐨𝐠𝐥𝐞 𝐌𝐚𝐩𝐬 𝐔𝐬𝐞𝐫 𝐆𝐞𝐧𝐞𝐫𝐚𝐭𝐞𝐝 𝐂𝐨𝐧𝐭𝐞𝐧𝐭 𝐭𝐞𝐚𝐦, 𝐲𝐨𝐮 𝐚𝐧𝐝 𝐲𝐨𝐮𝐫 𝐏𝐫𝐨𝐝𝐮𝐜𝐭 𝐌𝐚𝐧𝐚𝐠𝐞𝐫 𝐚𝐫𝐞 𝐢𝐧𝐯𝐞𝐬𝐭𝐢𝐠𝐚𝐭𝐢𝐧𝐠 𝐮𝐬𝐞𝐫-𝐠𝐞𝐧𝐞𝐫𝐚𝐭𝐞𝐝 𝐜𝐨𝐧𝐭𝐞𝐧𝐭 (𝐔𝐆𝐂) – 𝐩𝐡𝐨𝐭𝐨𝐬 𝐚𝐧𝐝 𝐫𝐞𝐯𝐢𝐞𝐰𝐬 𝐭𝐡𝐚𝐭 𝐢𝐧𝐝𝐞𝐩𝐞𝐧𝐝𝐞𝐧𝐭 𝐮𝐬𝐞𝐫𝐬 𝐮𝐩𝐥𝐨𝐚𝐝 𝐭𝐨 𝐆𝐨𝐨𝐠𝐥𝐞 𝐌𝐚𝐩𝐬.
𝐖𝐫𝐢𝐭𝐞 𝐚 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐝𝐞𝐭𝐞𝐫𝐦𝐢𝐧𝐞 𝐰𝐡𝐢𝐜𝐡 𝐭𝐲𝐩𝐞 𝐨𝐟 𝐩𝐥𝐚𝐜𝐞 (𝐩𝐥𝐚𝐜𝐞_𝐜𝐚𝐭𝐞𝐠𝐨𝐫𝐲) 𝐚𝐭𝐭𝐫𝐚𝐜𝐭𝐬 𝐭𝐡𝐞 𝐦𝐨𝐬𝐭 𝐔𝐆𝐂 𝐭𝐚𝐠𝐠𝐞𝐝 𝐚𝐬 "𝐨𝐟𝐟-𝐭𝐨𝐩𝐢𝐜". 𝐈𝐧 𝐭𝐡𝐞 𝐜𝐚𝐬𝐞 𝐨𝐟 𝐚 𝐭𝐢𝐞, 𝐬𝐡𝐨𝐰 𝐭𝐡𝐞 𝐨𝐮𝐭𝐩𝐮𝐭 𝐢𝐧 𝐚𝐬𝐜𝐞𝐧𝐝𝐢𝐧𝐠 𝐨𝐫𝐝𝐞𝐫 𝐨𝐟 𝐩𝐥𝐚𝐜𝐞_𝐜𝐚𝐭𝐞𝐠𝐨𝐫𝐲.
*/

-- 𝐂𝐫𝐞𝐚𝐭𝐞 𝐭𝐚𝐛𝐥𝐞: 𝐩𝐥𝐚𝐜𝐞_𝐢𝐧𝐟𝐨
CREATE TABLE place_info ( place_id INT PRIMARY KEY, place_name VARCHAR(100), place_category VARCHAR(50) );

-- 𝐈𝐧𝐬𝐞𝐫𝐭 𝐯𝐚𝐥𝐮𝐞𝐬 𝐢𝐧𝐭𝐨 𝐩𝐥𝐚𝐜𝐞_𝐢𝐧𝐟𝐨
INSERT INTO place_info VALUES
(1, 'Baar Baar', 'Restaurant'),(2, 'Rubirosa', 'Restaurant'),
(3, 'Mr. Purple', 'Bar'), (4, 'La Caverna', 'Bar');

-- 𝐂𝐫𝐞𝐚𝐭𝐞 𝐭𝐚𝐛𝐥𝐞: 𝐦𝐚𝐩𝐬_𝐮𝐠𝐜_𝐫𝐞𝐯𝐢𝐞𝐰
CREATE TABLE maps_ugc_review (content_id INT PRIMARY KEY,
 place_id INT, content_tag VARCHAR(50), FOREIGN KEY (place_id) REFERENCES place_info(place_id) );

-- 𝐈𝐧𝐬𝐞𝐫𝐭 𝐯𝐚𝐥𝐮𝐞𝐬 𝐢𝐧𝐭𝐨 𝐦𝐚𝐩𝐬_𝐮𝐠𝐜_𝐫𝐞𝐯𝐢𝐞𝐰
INSERT INTO maps_ugc_review VALUES
(101, 1, 'Off-topic'), (110, 2, 'Misinformation'),
(153, 2, 'Off-topic'), (176, 3, 'Harassment'), (190, 3, 'Off-topic');

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+----------------+-----------------+
| place_category | off_topic_count |
+----------------+-----------------+
|   Restaurant   |        2        |
+----------------+-----------------+

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## 📌 𝟑𝟒) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧𝐬 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐎𝐫𝐚𝐜𝐥𝐞 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

💡𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧:-
/*
𝐀𝐯𝐞𝐫𝐚𝐠𝐞 𝐏𝐮𝐫𝐜𝐡𝐚𝐬𝐞 𝐀𝐦𝐨𝐮𝐧𝐭 𝐛𝐲 𝐀𝐠𝐞 𝐆𝐫𝐨𝐮𝐩𝐬

𝐀 𝐜𝐨𝐦𝐦𝐨𝐧 𝐚𝐧𝐚𝐥𝐲𝐬𝐢𝐬 𝐢𝐬 𝐭𝐨 𝐜𝐚𝐥𝐜𝐮𝐥𝐚𝐭𝐞 𝐭𝐡𝐞 𝐚𝐯𝐞𝐫𝐚𝐠𝐞 𝐩𝐮𝐫𝐜𝐡𝐚𝐬𝐞 𝐚𝐦𝐨𝐮𝐧𝐭 𝐛𝐲
𝐚𝐠𝐞 𝐠𝐫𝐨𝐮𝐩𝐬. 𝐔𝐬𝐞 𝐭𝐡𝐞 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫 𝐚𝐧𝐝 𝐩𝐮𝐫𝐜𝐡𝐚𝐬𝐞𝐬 𝐭𝐚𝐛𝐥𝐞𝐬.

𝐓𝐡𝐞 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫 𝐭𝐚𝐛𝐥𝐞 𝐡𝐚𝐬 𝐬𝐮𝐜𝐡 𝐜𝐨𝐥𝐮𝐦𝐧𝐬: 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫_𝐢𝐝, 𝐟𝐢𝐫𝐬𝐭_𝐧𝐚𝐦𝐞, 𝐥𝐚𝐬𝐭_𝐧𝐚𝐦𝐞, 𝐛𝐢𝐫𝐭𝐡𝐝𝐚𝐭𝐞

𝐓𝐡𝐞 𝐩𝐮𝐫𝐜𝐡𝐚𝐬𝐞𝐬 𝐭𝐚𝐛𝐥𝐞 𝐢𝐧𝐜𝐥𝐮𝐝𝐞𝐬 𝐩𝐮𝐫𝐜𝐡𝐚𝐬𝐞_𝐢𝐝, 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫_𝐢𝐝, 𝐩𝐮𝐫𝐜𝐡𝐚𝐬𝐞_𝐝𝐚𝐭𝐞, 𝐩𝐫𝐨𝐝𝐮𝐜𝐭_𝐢𝐝, 𝐚𝐦𝐨𝐮𝐧𝐭.

𝐖𝐞 𝐰𝐚𝐧𝐭 𝐭𝐨 𝐣𝐨𝐢𝐧 𝐭𝐡𝐞𝐬𝐞 𝐭𝐚𝐛𝐥𝐞𝐬 𝐛𝐚𝐬𝐞𝐝 𝐨𝐧 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫_𝐢𝐝, 𝐜𝐚𝐥𝐜𝐮𝐥𝐚𝐭𝐞 𝐭𝐡𝐞 𝐚𝐠𝐞 
𝐨𝐟 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫𝐬, 𝐠𝐫𝐨𝐮𝐩 𝐭𝐡𝐞𝐦 𝐢𝐧𝐭𝐨 𝐚𝐠𝐞 𝐛𝐢𝐧𝐬, 𝐚𝐧𝐝 𝐜𝐚𝐥𝐜𝐮𝐥𝐚𝐭𝐞 𝐭𝐡𝐞 𝐚𝐯𝐞𝐫𝐚𝐠𝐞
𝐩𝐮𝐫𝐜𝐡𝐚𝐬𝐞 𝐚𝐦𝐨𝐮𝐧𝐭 𝐟𝐨𝐫 𝐞𝐚𝐜𝐡 𝐚𝐠𝐞 𝐠𝐫𝐨𝐮𝐩.
*/

-- 𝐂𝐫𝐞𝐚𝐭𝐞 𝐭𝐚𝐛𝐥𝐞:- 𝐂𝐮𝐬𝐭𝐨𝐦𝐞𝐫𝐬
CREATE TABLE Customers ( customer_id INT PRIMARY KEY,
 first_name VARCHAR(50), last_name VARCHAR(50),birthdate DATE );

-- 𝐈𝐧𝐬𝐞𝐫𝐭 𝐯𝐚𝐥𝐮𝐞𝐬 𝐢𝐧𝐭𝐨 𝐂𝐮𝐬𝐭𝐨𝐦𝐞𝐫𝐬
INSERT INTO Customers VALUES
(1001, 'John', 'Doe', '1980-05-01'), (1002, 'Jane', 'Smith', '1990-10-30'),
(1003, 'Jim', 'Brown', '2000-01-20'), (1004, 'Jill', 'Jones', '1965-07-05'),
(1005, 'Bob', 'Johnson', '1975-12-15');

-- 𝐂𝐫𝐞𝐚𝐭𝐞 𝐭𝐚𝐛𝐥𝐞:- 𝐏𝐮𝐫𝐜𝐡𝐚𝐬𝐞𝐬
CREATE TABLE Purchases (
 purchase_id INT PRIMARY KEY, customer_id INT,
 purchase_date DATE, product_id INT, amount DECIMAL(10,2),
 FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

- 𝐈𝐧𝐬𝐞𝐫𝐭 𝐯𝐚𝐥𝐮𝐞𝐬 𝐢𝐧𝐭𝐨 𝐏𝐮𝐫𝐜𝐡𝐚𝐬𝐞𝐬
INSERT INTO Purchases VALUES
(8223, 1001, '2022-07-10', 70001, 200.00),
(8315, 1002, '2022-08-05', 80052, 150.00),
(8236, 1003, '2022-06-18', 70009, 220.00),
(8252, 1004, '2022-05-15', 80952, 180.00),
(8301, 1005, '2022-11-05', 80882, 250.00);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-----------+--------------------+
| age_group | avg_purchase_amount|
+-----------+--------------------+
| Under 30  |       220.00       |
| 30-49     |       200.00       |
| 50-69     |       180.00       |
+-----------+--------------------+

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟑𝟓) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐁𝐥𝐢𝐧𝐤𝐢𝐭 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

💡𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧:-
/*
-- 𝐂𝐮𝐬𝐭𝐨𝐦𝐞𝐫𝐬 𝐖𝐡𝐨 𝐌𝐚𝐝𝐞 𝐏𝐮𝐫𝐜𝐡𝐚𝐬𝐞𝐬 𝐢𝐧 𝐄𝐯𝐞𝐫𝐲 𝐐𝐮𝐚𝐫𝐭𝐞𝐫 𝐨𝐟 𝐭𝐡𝐞 𝐘𝐞𝐚𝐫 .
*/

- 𝐂𝐫𝐞𝐚𝐭𝐞 𝐭𝐚𝐛𝐥𝐞:
CREATE TABLE customer_purchases (
 Customer_ID VARCHAR(10),
 Purchase_Date DATE
);

- 𝐈𝐧𝐬𝐞𝐫𝐭 𝐯𝐚𝐥𝐮𝐞𝐬 
INSERT INTO customer_purchases (Customer_ID, Purchase_Date) VALUES
('C001', '2024-01-15'),('C002', '2024-03-22'),
('C001', '2024-05-10'),('C003', '2024-02-17'),
('C001', '2024-07-03'),('C002', '2024-06-21'),
('C003', '2024-08-12'),('C001', '2024-10-18'),
('C002', '2024-11-05'),('C003', '2024-12-01');

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-------------+
| Customer_ID |
+-------------+
|    C001     |
+-------------+

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟑𝟔) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐃𝐞𝐥𝐨𝐢𝐭𝐭𝐞 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

💡𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧:-
/*
𝐖𝐡𝐢𝐜𝐡 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐞𝐚𝐫𝐧 𝐦𝐨𝐫𝐞 𝐭𝐡𝐚𝐧 𝐭𝐡𝐞 𝐚𝐯𝐞𝐫𝐚𝐠𝐞 𝐬𝐚𝐥𝐚𝐫𝐲 𝐨𝐟 𝐭𝐡𝐞𝐢𝐫 𝐝𝐞𝐩𝐚𝐫𝐭𝐦𝐞𝐧𝐭 𝐚𝐧𝐝 𝐚𝐫𝐞 𝐨𝐥𝐝𝐞𝐫 𝐭𝐡𝐚𝐧 𝐭𝐡𝐞 𝐚𝐯𝐞𝐫𝐚𝐠𝐞 𝐚𝐠𝐞 𝐨𝐟 𝐚𝐥𝐥 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬.
*/

- 𝐂𝐫𝐞𝐚𝐭𝐞 𝐭𝐚𝐛𝐥𝐞:-
CREATE TABLE Employees_records (
 emp_id INT PRIMARY KEY,
 emp_name VARCHAR(50) NOT NULL,
 dept_id INT NOT NULL,
 salary DECIMAL(10, 2) NOT NULL,
 manager_id INT,
 emp_age INT NOT NULL
);

- 𝐈𝐧𝐬𝐞𝐫𝐭 𝐯𝐚𝐥𝐮𝐞𝐬 
INSERT INTO Employees_records (emp_id, emp_name, dept_id, salary, manager_id, emp_age)
VALUES
 (1, 'Ankit', 100, 10000.00, 4, 39), (2, 'Mohit', 100, 15000.00, 5, 48),
 (3, 'Vikas', 100, 12000.00, 4, 37), (4, 'Rohit', 100, 5000.00, 2, 16),
 (5, 'Mudit', 200, 12000.00, 6, 55), (6, 'Agam', 200, 10000.00, 2, 14),
 (7, 'Sanjay', 200, 9000.00, 2, 13), (8, 'Ashish', 200, 5000.00, 2, 12),
 (9, 'Mukesh', 300, 6000.00, 6, 51), (10, 'Rakesh', 500, 7000.00, 6, 50);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+--------+---------+
| emp_id | emp_name|
+--------+---------+
|   2    | Mohit   |
|   3    | Vikas   |
|   5    | Mudit   |
+--------+---------+

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## 📌 𝟑𝟕) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐙𝐬𝐜𝐚𝐥𝐞𝐫 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

💡𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧:-
/*
𝐂𝐚𝐥𝐜𝐮𝐥𝐚𝐭𝐢𝐧𝐠 𝐀𝐯𝐞𝐫𝐚𝐠𝐞 𝐌𝐨𝐧𝐭𝐡𝐥𝐲 𝐏𝐨𝐰𝐞𝐫 𝐔𝐬𝐚𝐠𝐞 
𝐆𝐢𝐯𝐞𝐧 𝐙𝐬𝐜𝐚𝐥𝐞𝐫 𝐢𝐬 𝐚 𝐠𝐥𝐨𝐛𝐚𝐥 𝐥𝐞𝐚𝐝𝐞𝐫 𝐢𝐧 𝐜𝐥𝐨𝐮𝐝 𝐬𝐞𝐜𝐮𝐫𝐢𝐭𝐲, 𝐭𝐡𝐞𝐲 𝐮𝐬𝐞 𝐚 𝐥𝐚𝐫𝐠𝐞 𝐧𝐮𝐦𝐛𝐞𝐫 𝐨𝐟 𝐬𝐞𝐫𝐯𝐞𝐫𝐬 𝐭𝐨 𝐦𝐚𝐧𝐚𝐠𝐞 𝐭𝐡𝐞𝐢𝐫 𝐰𝐨𝐫𝐤𝐥𝐨𝐚𝐝. 𝐓𝐡𝐞𝐫𝐞𝐟𝐨𝐫𝐞, 𝐥𝐞𝐭'𝐬 𝐚𝐬𝐬𝐮𝐦𝐞 𝐲𝐨𝐮 𝐡𝐚𝐯𝐞 𝐛𝐞𝐞𝐧 𝐩𝐫𝐨𝐯𝐢𝐝𝐞𝐝
𝐰𝐢𝐭𝐡 𝐚 𝐝𝐚𝐭𝐚𝐬𝐞𝐭 𝐚𝐛𝐨𝐮𝐭 𝐭𝐡𝐞 𝐭𝐨𝐭𝐚𝐥 𝐩𝐨𝐰𝐞𝐫 𝐭𝐡𝐚𝐭 𝐭𝐡𝐞 𝐬𝐞𝐫𝐯𝐞𝐫𝐬 𝐡𝐚𝐯𝐞 𝐜𝐨𝐧𝐬𝐮𝐦𝐞𝐝 (𝐢𝐧 𝐤𝐖𝐡) 𝐢𝐧 𝐝𝐢𝐟𝐟𝐞𝐫𝐞𝐧𝐭 𝐝𝐞𝐩𝐚𝐫𝐭𝐦𝐞𝐧𝐭𝐬 𝐨𝐟 𝐭𝐡𝐞 𝐜𝐨𝐦𝐩𝐚𝐧𝐲 𝐟𝐨𝐫 𝐞𝐚𝐜𝐡 𝐝𝐚𝐲. 𝐘𝐨𝐮𝐫 𝐭𝐚𝐬𝐤 𝐢𝐬 𝐭𝐨 𝐜𝐚𝐥𝐜𝐮𝐥𝐚𝐭𝐞 𝐭𝐡𝐞 𝐚𝐯𝐞𝐫𝐚𝐠𝐞 𝐦𝐨𝐧𝐭𝐡𝐥𝐲 𝐩𝐨𝐰𝐞𝐫 𝐮𝐬𝐞𝐝 𝐛𝐲 𝐭𝐡𝐞 𝐬𝐞𝐫𝐯𝐞𝐫𝐬 𝐢𝐧 𝐞𝐚𝐜𝐡 𝐝𝐞𝐩𝐚𝐫𝐭𝐦𝐞𝐧𝐭 𝐚𝐧𝐝 𝐫𝐨𝐮𝐧𝐝 𝐢𝐭 𝐭𝐨 𝐭𝐡𝐞 𝐧𝐞𝐚𝐫𝐞𝐬𝐭 𝐢𝐧𝐭𝐞𝐠𝐞𝐫. 𝐀𝐝𝐝𝐢𝐭𝐢𝐨𝐧𝐚𝐥𝐥𝐲, 𝐲𝐨𝐮 
𝐧𝐞𝐞𝐝 𝐭𝐨 𝐜𝐚𝐥𝐜𝐮𝐥𝐚𝐭𝐞 𝐭𝐡𝐞 𝐩𝐞𝐫𝐜𝐞𝐧𝐭𝐚𝐠𝐞 𝐝𝐢𝐟𝐟𝐞𝐫𝐞𝐧𝐜𝐞 𝐢𝐧 𝐩𝐨𝐰𝐞𝐫 𝐮𝐬𝐚𝐠𝐞 𝐛𝐞𝐭𝐰𝐞𝐞𝐧 𝐜𝐨𝐧𝐬𝐞𝐜𝐮𝐭𝐢𝐯𝐞 𝐦𝐨𝐧𝐭𝐡𝐬.
*/

- 𝐂𝐫𝐞𝐚𝐭𝐞 𝐭𝐚𝐛𝐥𝐞:-
CREATE TABLE Power_Usage (
 date_id DATE,
 department_id INT,
 power_used INT
);

- 𝐈𝐧𝐬𝐞𝐫𝐭 𝐯𝐚𝐥𝐮𝐞𝐬 
INSERT INTO Power_Usage (date_id, department_id, power_used) VALUES
('2022-06-08', 1, 500),('2022-06-10', 1, 550),('2022-06-15', 2, 700),
('2022-07-10', 1, 450),('2022-07-12', 2, 625);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+---------------+---------+---------+---------------+
| department_id |  month  | avg_use | pct_difference|
+---------------+---------+---------+---------------+
|       1       | 2022-06 |   525   |      NULL     |
|       1       | 2022-07 |   450   |     -14.29    |
|       2       | 2022-06 |   700   |      NULL     |
|       2       | 2022-07 |   625   |     -10.71    |
+---------------+---------+---------+---------------+

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## 📌 𝟑𝟖) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐌𝐢𝐜𝐫𝐨𝐬𝐨𝐟𝐭 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

💡𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧:-
/*
𝐅𝐢𝐧𝐝 𝐭𝐡𝐞 𝐭𝐨𝐭𝐚𝐥 𝐧𝐮𝐦𝐛𝐞𝐫 𝐨𝐟 𝐝𝐨𝐰𝐧𝐥𝐨𝐚𝐝𝐬 𝐟𝐨𝐫 𝐩𝐚𝐲𝐢𝐧𝐠 𝐚𝐧𝐝 𝐧𝐨𝐧-𝐩𝐚𝐲𝐢𝐧𝐠 𝐮𝐬𝐞𝐫𝐬 𝐛𝐲 𝐝𝐚𝐭𝐞. 𝐈𝐧𝐜𝐥𝐮𝐝𝐞 𝐨𝐧𝐥𝐲 𝐫𝐞𝐜𝐨𝐫𝐝𝐬 𝐰𝐡𝐞𝐫𝐞 𝐧𝐨𝐧-𝐩𝐚𝐲𝐢𝐧𝐠 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫𝐬 𝐡𝐚𝐯𝐞 𝐦𝐨𝐫𝐞 𝐝𝐨𝐰𝐧𝐥𝐨𝐚𝐝𝐬 𝐭𝐡𝐚𝐧 𝐩𝐚𝐲𝐢𝐧𝐠 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫𝐬. 

𝐓𝐡𝐞 𝐨𝐮𝐭𝐩𝐮𝐭 𝐬𝐡𝐨𝐮𝐥𝐝 𝐛𝐞 𝐬𝐨𝐫𝐭𝐞𝐝 𝐛𝐲 𝐞𝐚𝐫𝐥𝐢𝐞𝐬𝐭 𝐝𝐚𝐭𝐞 𝐟𝐢𝐫𝐬𝐭 𝐚𝐧𝐝 𝐜𝐨𝐧𝐭𝐚𝐢𝐧 𝟑 𝐜𝐨𝐥𝐮𝐦𝐧𝐬 𝐝𝐚𝐭𝐞, 𝐧𝐨𝐧-𝐩𝐚𝐲𝐢𝐧𝐠 𝐝𝐨𝐰𝐧𝐥𝐨𝐚𝐝𝐬, 𝐚𝐧𝐝 𝐩𝐚𝐲𝐢𝐧𝐠 𝐝𝐨𝐰𝐧𝐥𝐨𝐚𝐝𝐬. 
*/

- 𝐂𝐫𝐞𝐚𝐭𝐞 𝐭𝐚𝐛𝐥𝐞 - 𝟏:-
CREATE TABLE ms_user_dimension (
 user_id INT PRIMARY KEY,
 acc_id INT
);

- 𝐂𝐫𝐞𝐚𝐭𝐞 𝐭𝐚𝐛𝐥𝐞 - 2:-
CREATE TABLE ms_acc_dimension (
 acc_id INT PRIMARY KEY,
 paying_customer VARCHAR(3) -- values: 'yes' or 'no'
);

- 𝐂𝐫𝐞𝐚𝐭𝐞 𝐭𝐚𝐛𝐥𝐞 - 3:-
CREATE TABLE ms_download_facts (
 date DATE,
 user_id INT,
 downloads INT
);

𝐃𝐚𝐭𝐚𝐬𝐞𝐭 𝐋𝐢𝐧𝐤: https://lnkd.in/gqqbSDKq

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+------------+---------------------+-----------------+
|    date    | non_paying_downloads| paying_downloads|
+------------+---------------------+-----------------+
| 2022-06-01 |        350          |       200       |
| 2022-06-02 |        500          |       450       |
+------------+---------------------+-----------------+

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## 📌 𝟑𝟗) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐙𝐒 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

💡𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧:-
/*
-- 𝐰𝐫𝐢𝐭𝐞 𝐚 𝐒𝐐𝐋 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐠𝐞𝐭 𝐭𝐡𝐞 𝐜𝐨𝐮𝐧𝐭 𝐨𝐟 𝐮𝐬𝐞𝐫𝐬 𝐚𝐜𝐭𝐢𝐯𝐞 𝐨𝐧 𝐛𝐨𝐭𝐡 𝐰𝐞𝐞𝐤𝐞𝐧𝐝𝐬 𝐚𝐧𝐝 𝐰𝐞𝐞𝐤𝐝𝐚𝐲𝐬.
*/

- 𝐂𝐫𝐞𝐚𝐭𝐞 𝐭𝐚𝐛𝐥𝐞 :-
CREATE TABLE UserActivity (
 UserID INT,
 ActivityDate DATE,
 IsActive BIT -- 1 for active, 0 for inactive
);

- 𝐈𝐧𝐬𝐞𝐫𝐭 𝐯𝐚𝐥𝐮𝐞𝐬 
INSERT INTO UserActivity (UserID, ActivityDate, IsActive)
VALUES
(1, '2025-04-19', 1),(1, '2025-04-20', 1),(1, '2025-04-21', 1), 
(1, '2025-04-22', 1),(1, '2025-04-23', 1),(1, '2025-04-24', 1), 
(1, '2025-04-25', 1),(2, '2025-04-19', 0),(2, '2025-04-20', 0), 
(2, '2025-04-21', 1),(2, '2025-04-22', 1),(2, '2025-04-23', 1), 
(2, '2025-04-24', 1),(2, '2025-04-25', 1),(3, '2025-04-19', 1), 
(3, '2025-04-20', 1),(3, '2025-04-21', 0),(3, '2025-04-22', 0), 
(3, '2025-04-23', 0),(3, '2025-04-24', 0),(3, '2025-04-25', 0), 
(4, '2025-04-19', 1),(4, '2025-04-20', 1),(4, '2025-04-21', 1), 
(4, '2025-04-22', 1),(4, '2025-04-23', 1),(4, '2025-04-24', 1), 
(4, '2025-04-25', 1),(5, '2025-04-19', 0),(5, '2025-04-20', 0), 
(5, '2025-04-21', 1),(5, '2025-04-22', 1),(5, '2025-04-23', 1), 
(5, '2025-04-24', 1),(5, '2025-04-25', 1),(6, '2025-04-19', 1), 
(6, '2025-04-20', 1),(6, '2025-04-21', 1),(6, '2025-04-22', 1), 
(6, '2025-04-23', 1),(6, '2025-04-24', 0),(6, '2025-04-25', 0), 
(7, '2025-04-19', 0),(7, '2025-04-20', 1),(7, '2025-04-21', 1), 
(7, '2025-04-22', 1),(7, '2025-04-23', 1),(7, '2025-04-24', 1), 
(7, '2025-04-25', 1),(8, '2025-04-19', 1),(8, '2025-04-20', 0), 
(8, '2025-04-21', 0),(8, '2025-04-22', 0),(8, '2025-04-23', 0), 
(8, '2025-04-24', 0),(8, '2025-04-25', 1); 

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+---------------+
| ActiveOnBoth  |
+---------------+
| 4             |
+---------------+

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟒𝟎) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐙𝐞𝐩𝐭𝐨 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

💡𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧:-
/*
-- 𝐏𝐫𝐨𝐝𝐮𝐜𝐭𝐬 𝐰𝐢𝐭𝐡 𝐒𝐚𝐥𝐞𝐬 𝐀𝐛𝐨𝐯𝐞 𝐭𝐡𝐞 𝐀𝐯𝐞𝐫𝐚𝐠𝐞 𝐟𝐨𝐫 𝐓𝐡𝐞𝐢𝐫 𝐂𝐚𝐭𝐞𝐠𝐨𝐫𝐲
*/

- 𝐂𝐫𝐞𝐚𝐭𝐞 𝐭𝐚𝐛𝐥𝐞 :-
CREATE TABLE grocery_sales (
 product_id VARCHAR(10),
 product_name VARCHAR(50),
 category VARCHAR(30),
 sales INT
);

- 𝐈𝐧𝐬𝐞𝐫𝐭 𝐯𝐚𝐥𝐮𝐞𝐬 
INSERT INTO grocery_sales (product_id, product_name, category, sales) VALUES
('G001', 'Salted Chips',    'Snacks',  18000),('G002', 'Chocolate Bar',    'Snacks',  15000), ('G003', 'Popcorn',       'Snacks',  22000),
('G004', 'Masala Peanuts',   'Snacks',  12000), ('G005', 'Green Tea',      'Beverages', 14000), ('G006', 'Black Coffee',    'Beverages', 17000), ('G007', 'Lemon Juice',     'Beverages', 9000),
('G008', 'Coconut Water',    'Beverages', 11000), ('G009', 'Turmeric Powder',   'Spices',  8000), ('G010', 'Red Chili Powder',  'Spices',  13000),
('G011', 'Coriander Powder',  'Spices',  11000), ('G012', 'Cumin Seeds',     'Spices',  7000), ('G013', 'Basmati Rice',    'Grains',  30000),
('G014', 'Wheat Flour',     'Grains',  25000), ('G015', 'Brown Rice',     'Grains',  20000), ('G016', 'Oats',        'Grains',  15000);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+------------+-------------------+-----------+-------+
| product_id | product_name      | category  | sales |
+------------+-------------------+-----------+-------+
| G001       | Salted Chips      | Snacks    | 18000 |
| G003       | Popcorn           | Snacks    | 22000 |
| G006       | Black Coffee      | Beverages | 17000 |
| G010       | Red Chili Powder  | Spices    | 13000 |
| G013       | Basmati Rice      | Grains    | 30000 |
| G014       | Wheat Flour       | Grains    | 25000 |
+------------+-------------------+-----------+-------+

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## 📌 𝟒𝟏) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐀𝐦𝐚𝐳𝐨𝐧 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

𝐒𝐐𝐋 𝐉𝐨𝐢𝐧𝐬 𝐚𝐫𝐞 𝐨𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐦𝐨𝐬𝐭 𝐟𝐫𝐞𝐪𝐮𝐞𝐧𝐭𝐥𝐲 𝐚𝐬𝐤𝐞𝐝 𝐪𝐮𝐞𝐬𝐭𝐢𝐨𝐧𝐬 𝐢𝐧 𝐒𝐐𝐋 𝐢𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰𝐬. 𝐌𝐚𝐧𝐲 𝐜𝐚𝐧𝐝𝐢𝐝𝐚𝐭𝐞𝐬 𝐬𝐭𝐫𝐮𝐠𝐠𝐥𝐞 𝐰𝐢𝐭𝐡 𝐭𝐡𝐞𝐦 — 𝐧𝐨𝐭 𝐛𝐞𝐜𝐚𝐮𝐬𝐞 𝐭𝐡𝐞 𝐜𝐨𝐧𝐜𝐞𝐩𝐭 𝐢𝐬 𝐭𝐨𝐨 𝐜𝐨𝐦𝐩𝐥𝐞𝐱, 𝐛𝐮𝐭 𝐛𝐞𝐜𝐚𝐮𝐬𝐞 𝐭𝐡𝐞 𝐟𝐮𝐧𝐝𝐚𝐦𝐞𝐧𝐭𝐚𝐥𝐬 𝐚𝐫𝐞𝐧’𝐭 𝐬𝐭𝐫𝐨𝐧𝐠.

💡𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧:-
/*
Can you write the INNER JOIN, LEFT JOIN, RIGHT JOIN, and FULL JOIN for these tables and figure out what the result would look like?
*/

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+------------+-----------+----------+
| customer_id| customer  | order_id |
+------------+-----------+----------+
| 1          | Alice     | 101      |
| 2          | Bob       | 102      |
| 2          | Bob       | 103      |
| 3          | Charlie   | NULL     |
| 4          | David     | NULL     |
| NULL       | NULL      | 104      |
+------------+-----------+----------+

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## 📌 𝟒𝟐) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐖𝐚𝐥𝐦𝐚𝐫𝐭 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

💡𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧:-
/*
𝐖𝐫𝐢𝐭𝐞 𝐚𝐧 𝐒𝐐𝐋 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐫𝐞𝐩𝐨𝐫𝐭 𝐭𝐡𝐞 𝐈𝐃𝐬 𝐨𝐟 𝐭𝐡𝐞 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧𝐬 𝐰𝐢𝐭𝐡 𝐭𝐡𝐞 𝐦𝐚𝐱𝐢𝐦𝐮𝐦 𝐚𝐦𝐨𝐮𝐧𝐭 𝐨𝐧 𝐭𝐡𝐞𝐢𝐫 𝐫𝐞𝐬𝐩𝐞𝐜𝐭𝐢𝐯𝐞 𝐝𝐚𝐲. 𝐈𝐟 𝐢𝐧 𝐨𝐧𝐞 𝐝𝐚𝐲 𝐭𝐡𝐞𝐫𝐞 𝐚𝐫𝐞 𝐦𝐮𝐥𝐭𝐢𝐩𝐥𝐞 𝐬𝐮𝐜𝐡 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧𝐬, 𝐫𝐞𝐭𝐮𝐫𝐧 𝐚𝐥𝐥 𝐨𝐟 𝐭𝐡𝐞𝐦.

𝐑𝐞𝐭𝐮𝐫𝐧 𝐭𝐡𝐞 𝐫𝐞𝐬𝐮𝐥𝐭 𝐭𝐚𝐛𝐥𝐞 𝐢𝐧 𝐚𝐬𝐜𝐞𝐧𝐝𝐢𝐧𝐠 𝐨𝐫𝐝𝐞𝐫 𝐛𝐲 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧_𝐢𝐝.
*/

- 𝐂𝐫𝐞𝐚𝐭𝐞 𝐭𝐚𝐛𝐥𝐞 :
CREATE TABLE Transactions (
 transaction_id INT PRIMARY KEY,
 day DATETIME,
 amount INT
);

- 𝐈𝐧𝐬𝐞𝐫𝐭 𝐯𝐚𝐥𝐮𝐞𝐬 
INSERT INTO Transactions (transaction_id, day, amount) VALUES
(8, '2021-04-03 15:57:28', 57),(9, '2021-04-28 08:47:25', 21),
(1, '2021-04-29 13:28:30', 58),(5, '2021-04-28 16:39:59', 40),
(6, '2021-04-29 23:39:28', 58);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+----------------+---------------------+--------+
| transaction_id | day                 | amount |
+----------------+---------------------+--------+
| 1              | 2021-04-29 13:28:30 | 58     |
| 5              | 2021-04-28 16:39:59 | 40     |
| 6              | 2021-04-29 23:39:28 | 58     |
| 8              | 2021-04-03 15:57:28 | 57     |
+----------------+---------------------+--------+

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## 📌 𝟒𝟑) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐌𝐲𝐧𝐭𝐫𝐚 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

💡𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧:-
/*
𝐀𝐬𝐬𝐮𝐦𝐞 𝐭𝐨𝐝𝐚𝐲'𝐬 𝐝𝐚𝐭𝐞 𝐢𝐬 '𝟐𝟎𝟐𝟏-𝟏-𝟏'.

𝐖𝐫𝐢𝐭𝐞 𝐚𝐧 𝐒𝐐𝐋 𝐪𝐮𝐞𝐫𝐲 𝐭𝐡𝐚𝐭 𝐰𝐢𝐥𝐥, 𝐟𝐨𝐫 𝐞𝐚𝐜𝐡 𝐮𝐬𝐞𝐫_𝐢𝐝, 𝐟𝐢𝐧𝐝 𝐨𝐮𝐭 𝐭𝐡𝐞 𝐥𝐚𝐫𝐠𝐞𝐬𝐭 𝐰𝐢𝐧𝐝𝐨𝐰 𝐨𝐟 𝐝𝐚𝐲𝐬 𝐛𝐞𝐭𝐰𝐞𝐞𝐧 𝐞𝐚𝐜𝐡 𝐯𝐢𝐬𝐢𝐭 𝐚𝐧𝐝 𝐭𝐡𝐞 𝐨𝐧𝐞 𝐫𝐢𝐠𝐡𝐭 𝐚𝐟𝐭𝐞𝐫 𝐢𝐭
(𝐨𝐫 𝐭𝐨𝐝𝐚𝐲 𝐢𝐟 𝐲𝐨𝐮 𝐚𝐫𝐞 𝐜𝐨𝐧𝐬𝐢𝐝𝐞𝐫𝐢𝐧𝐠 𝐭𝐡𝐞 𝐥𝐚𝐬𝐭 𝐯𝐢𝐬𝐢𝐭).

𝐑𝐞𝐭𝐮𝐫𝐧 𝐭𝐡𝐞 𝐫𝐞𝐬𝐮𝐥𝐭 𝐭𝐚𝐛𝐥𝐞 𝐨𝐫𝐝𝐞𝐫𝐞𝐝 𝐛𝐲 𝐮𝐬𝐞𝐫_𝐢𝐝.
*/

- 𝐂𝐫𝐞𝐚𝐭𝐞 𝐭𝐚𝐛𝐥𝐞 :-
CREATE TABLE user_visits (
 user_id INT,
 visit_date DATE
);

- 𝐈𝐧𝐬𝐞𝐫𝐭 𝐯𝐚𝐥𝐮𝐞𝐬 
INSERT INTO user_visits (user_id, visit_date) VALUES
(1, '2020-11-28'),(1, '2020-10-20'),(1, '2020-12-03'),(2, '2020-10-05'),
(2, '2020-12-09'),(3, '2020-11-11');

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+---------+----------------+
| user_id | biggest_window |
+---------+----------------+
|    1    |       43       |
|    2    |       64       |
|    3    |       51       |
+---------+----------------+

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## 📌 𝟒𝟒) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐏𝐚𝐲𝐏𝐚𝐥 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

💡𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧:-
/*
𝐀𝐬 𝐚 𝐏𝐚𝐲𝐏𝐚𝐥 𝐝𝐚𝐭𝐚 𝐚𝐧𝐚𝐥𝐲𝐬𝐭, 𝐲𝐨𝐮 𝐚𝐫𝐞 𝐭𝐚𝐬𝐤𝐞𝐝 𝐰𝐢𝐭𝐡 𝐢𝐝𝐞𝐧𝐭𝐢𝐟𝐲𝐢𝐧𝐠 𝐮𝐬𝐞𝐫 𝐩𝐫𝐨𝐟𝐢𝐥𝐞𝐬 
𝐭𝐡𝐚𝐭 𝐰𝐞𝐫𝐞 𝐜𝐫𝐞𝐚𝐭𝐞𝐝 𝐰𝐢𝐭𝐡 𝐜𝐨𝐫𝐩𝐨𝐫𝐚𝐭𝐞 𝐞𝐦𝐚𝐢𝐥 𝐚𝐝𝐝𝐫𝐞𝐬𝐬𝐞𝐬, 𝐬𝐩𝐞𝐜𝐢𝐟𝐢𝐜𝐚𝐥𝐥𝐲
𝐭𝐡𝐨𝐬𝐞 𝐭𝐡𝐚𝐭 𝐞𝐧𝐝 𝐰𝐢𝐭𝐡 '@𝐩𝐚𝐲𝐩𝐚𝐥.𝐜𝐨𝐦'.
*/

- 𝐂𝐫𝐞𝐚𝐭𝐞 𝐭𝐚𝐛𝐥𝐞 :-
CREATE TABLE customer (
 customer_id INT PRIMARY KEY,
 first_name VARCHAR(50),
 last_name VARCHAR(50),
 email VARCHAR(100),
 create_date DATE
);

- 𝐈𝐧𝐬𝐞𝐫𝐭 𝐯𝐚𝐥𝐮𝐞𝐬 
INSERT INTO customer (customer_id, first_name, last_name, email, create_date) VALUES
(1, 'John', 'Doe', 'johndoe@gmail.com', '2022-01-01'),
(2, 'Jane', 'Smith', 'janesmith@paypal.com', '2022-02-01'),
(3, 'Max', 'Lee', 'maxlee@yahoo.com', '2022-02-01'),
(4, 'Abby', 'Chen', 'abbychen@paypal.com', '2022-03-01');

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-------------+------------+-----------+---------------------+-------------+
| customer_id | first_name | last_name | email               | create_date |
+-------------+------------+-----------+---------------------+-------------+
|      2      | Jane       | Smith     | janesmith@paypal.com| 2022-02-01  |
|      4      | Abby       | Chen      | abbychen@paypal.com | 2022-03-01  |
+---------+----------------++---------+----------------++---------+---------

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## 📌 𝟒𝟓) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐀𝐝𝐨𝐛𝐞 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

💡𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧:-
/*
𝐀 𝐜𝐨𝐦𝐩𝐚𝐧𝐲 𝐰𝐚𝐧𝐭𝐬 𝐭𝐨 𝐝𝐢𝐯𝐢𝐝𝐞 𝐭𝐡𝐞 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐢𝐧𝐭𝐨 𝐭𝐞𝐚𝐦𝐬 𝐬𝐮𝐜𝐡 𝐭𝐡𝐚𝐭 𝐚𝐥𝐥 𝐭𝐡𝐞 𝐦𝐞𝐦𝐛𝐞𝐫𝐬 𝐨𝐧 𝐞𝐚𝐜𝐡 𝐭𝐞𝐚𝐦 𝐡𝐚𝐯𝐞 𝐭𝐡𝐞 𝐬𝐚𝐦𝐞 𝐬𝐚𝐥𝐚𝐫𝐲. 𝐓𝐡𝐞 𝐭𝐞𝐚𝐦𝐬 𝐬𝐡𝐨𝐮𝐥𝐝 𝐟𝐨𝐥𝐥𝐨𝐰 𝐭𝐡𝐞𝐬𝐞 𝐜𝐫𝐢𝐭𝐞𝐫𝐢𝐚:

𝐄𝐚𝐜𝐡 𝐭𝐞𝐚𝐦 𝐬𝐡𝐨𝐮𝐥𝐝 𝐜𝐨𝐧𝐬𝐢𝐬𝐭 𝐨𝐟 𝐚𝐭 𝐥𝐞𝐚𝐬𝐭 𝐭𝐰𝐨 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬.
𝐀𝐥𝐥 𝐭𝐡𝐞 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐨𝐧 𝐚 𝐭𝐞𝐚𝐦 𝐬𝐡𝐨𝐮𝐥𝐝 𝐡𝐚𝐯𝐞 𝐭𝐡𝐞 𝐬𝐚𝐦𝐞 𝐬𝐚𝐥𝐚𝐫𝐲.
𝐀𝐥𝐥 𝐭𝐡𝐞 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐨𝐟 𝐭𝐡𝐞 𝐬𝐚𝐦𝐞 𝐬𝐚𝐥𝐚𝐫𝐲 𝐬𝐡𝐨𝐮𝐥𝐝 𝐛𝐞 𝐚𝐬𝐬𝐢𝐠𝐧𝐞𝐝 𝐭𝐨 𝐭𝐡𝐞 𝐬𝐚𝐦𝐞 𝐭𝐞𝐚𝐦.
𝐈𝐟 𝐭𝐡𝐞 𝐬𝐚𝐥𝐚𝐫𝐲 𝐨𝐟 𝐚𝐧 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞 𝐢𝐬 𝐮𝐧𝐢𝐪𝐮𝐞, 𝐰𝐞 𝐝𝐨 𝐧𝐨𝐭 𝐚𝐬𝐬𝐢𝐠𝐧 𝐭𝐡𝐢𝐬 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞 𝐭𝐨 𝐚𝐧𝐲 𝐭𝐞𝐚𝐦.
𝐀 𝐭𝐞𝐚𝐦'𝐬 𝐈𝐃 𝐢𝐬 𝐚𝐬𝐬𝐢𝐠𝐧𝐞𝐝 𝐛𝐚𝐬𝐞𝐝 𝐨𝐧 𝐭𝐡𝐞 𝐫𝐚𝐧𝐤 𝐨𝐟 𝐭𝐡𝐞 𝐭𝐞𝐚𝐦'𝐬 𝐬𝐚𝐥𝐚𝐫𝐲 𝐫𝐞𝐥𝐚𝐭𝐢𝐯𝐞 𝐭𝐨 𝐭𝐡𝐞 𝐨𝐭𝐡𝐞𝐫 𝐭𝐞𝐚𝐦𝐬' 𝐬𝐚𝐥𝐚𝐫𝐢𝐞𝐬, 𝐰𝐡𝐞𝐫𝐞 𝐭𝐡𝐞 𝐭𝐞𝐚𝐦 𝐰𝐢𝐭𝐡 𝐭𝐡𝐞 𝐥𝐨𝐰𝐞𝐬𝐭 𝐬𝐚𝐥𝐚𝐫𝐲 𝐡𝐚𝐬 
𝐭𝐞𝐚𝐦_𝐢𝐝 = 𝟏. 𝐍𝐨𝐭𝐞 𝐭𝐡𝐚𝐭 𝐭𝐡𝐞 𝐬𝐚𝐥𝐚𝐫𝐢𝐞𝐬 𝐟𝐨𝐫 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐧𝐨𝐭 𝐨𝐧 𝐚 𝐭𝐞𝐚𝐦 𝐚𝐫𝐞 
𝐧𝐨𝐭 𝐢𝐧𝐜𝐥𝐮𝐝𝐞𝐝 𝐢𝐧 𝐭𝐡𝐢𝐬 𝐫𝐚𝐧𝐤𝐢𝐧𝐠.

𝐖𝐫𝐢𝐭𝐞 𝐚𝐧 𝐒𝐐𝐋 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐠𝐞𝐭 𝐭𝐡𝐞 𝐭𝐞𝐚𝐦_𝐢𝐝 𝐨𝐟 𝐞𝐚𝐜𝐡 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞 𝐭𝐡𝐚𝐭 𝐢𝐬 𝐢𝐧 𝐚 𝐭𝐞𝐚𝐦.

𝐑𝐞𝐭𝐮𝐫𝐧 𝐭𝐡𝐞 𝐫𝐞𝐬𝐮𝐥𝐭 𝐭𝐚𝐛𝐥𝐞 𝐨𝐫𝐝𝐞𝐫𝐞𝐝 𝐛𝐲 𝐭𝐞𝐚𝐦_𝐢𝐝 𝐢𝐧 𝐚𝐬𝐜𝐞𝐧𝐝𝐢𝐧𝐠 𝐨𝐫𝐝𝐞𝐫. 𝐈𝐧 𝐜𝐚𝐬𝐞 𝐨𝐟 𝐚 𝐭𝐢𝐞, 𝐨𝐫𝐝𝐞𝐫 𝐢𝐭 𝐛𝐲 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞_𝐢𝐝 𝐢𝐧 𝐚𝐬𝐜𝐞𝐧𝐝𝐢𝐧𝐠 𝐨𝐫𝐝𝐞𝐫.
*/

- 𝐂𝐫𝐞𝐚𝐭𝐞 𝐭𝐚𝐛𝐥𝐞 :-
CREATE TABLE Employees (
 employee_id INT PRIMARY KEY,
 name VARCHAR(50),
 salary INT
);

- 𝐈𝐧𝐬𝐞𝐫𝐭 𝐯𝐚𝐥𝐮𝐞𝐬 
INSERT INTO Employees VALUES (2, 'Meir', 3000), (3, 'Michael', 3000), (7, 'Addilyn', 7400), (8, 'Juan', 6100), (9, 'Kannon', 7400);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-------------+----------+---------+
| employee_id | name     | team_id |
+-------------+----------+---------+
|      2      | Meir     |    1    |
|      3      | Michael  |    1    |
|      7      | Addilyn  |    2    |
|      9      | Kannon   |    2    |
+-------------+----------+---------+

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟒𝟔) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐀𝐜𝐜𝐞𝐧𝐭𝐮𝐫𝐞 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

💡𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧:-
/*
𝐒𝐮𝐛𝐣𝐞𝐜𝐭 𝐌𝐚𝐭𝐭𝐞𝐫 𝐄𝐱𝐩𝐞𝐫𝐭𝐬 :- 
𝐘𝐨𝐮 𝐚𝐫𝐞 𝐭𝐚𝐬𝐤𝐞𝐝 𝐰𝐢𝐭𝐡 𝐢𝐝𝐞𝐧𝐭𝐢𝐟𝐲𝐢𝐧𝐠 𝐒𝐮𝐛𝐣𝐞𝐜𝐭 𝐌𝐚𝐭𝐭𝐞𝐫 𝐄𝐱𝐩𝐞𝐫𝐭𝐬 (𝐒𝐌𝐄𝐬) 𝐚𝐭 
𝐀𝐜𝐜𝐞𝐧𝐭𝐮𝐫𝐞 𝐛𝐚𝐬𝐞𝐝 𝐨𝐧 𝐭𝐡𝐞𝐢𝐫 𝐰𝐨𝐫𝐤 𝐞𝐱𝐩𝐞𝐫𝐢𝐞𝐧𝐜𝐞 𝐢𝐧 𝐬𝐩𝐞𝐜𝐢𝐟𝐢𝐜 𝐝𝐨𝐦𝐚𝐢𝐧𝐬. 𝐀𝐧 
𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞 𝐪𝐮𝐚𝐥𝐢𝐟𝐢𝐞𝐬 𝐚𝐬 𝐚𝐧 𝐒𝐌𝐄 𝐢𝐟 𝐭𝐡𝐞𝐲 𝐦𝐞𝐞𝐭 𝐞𝐢𝐭𝐡𝐞𝐫 𝐨𝐟 𝐭𝐡𝐞 𝐟𝐨𝐥𝐥𝐨𝐰𝐢𝐧𝐠 𝐜𝐫𝐢𝐭𝐞𝐫𝐢𝐚:
 𝟏) 𝐓𝐡𝐞𝐲 𝐡𝐚𝐯𝐞 𝟖 𝐨𝐫 𝐦𝐨𝐫𝐞 𝐲𝐞𝐚𝐫𝐬 𝐨𝐟 𝐰𝐨𝐫𝐤 𝐞𝐱𝐩𝐞𝐫𝐢𝐞𝐧𝐜𝐞 𝐢𝐧 𝐚 𝐬𝐢𝐧𝐠𝐥𝐞 𝐝𝐨𝐦𝐚𝐢𝐧.
 𝟐) 𝐓𝐡𝐞𝐲 𝐡𝐚𝐯𝐞 𝟏𝟐 𝐨𝐫 𝐦𝐨𝐫𝐞 𝐲𝐞𝐚𝐫𝐬 𝐨𝐟 𝐰𝐨𝐫𝐤 𝐞𝐱𝐩𝐞𝐫𝐢𝐞𝐧𝐜𝐞 𝐚𝐜𝐫𝐨𝐬𝐬 𝐭𝐰𝐨 𝐝𝐢𝐟𝐟𝐞𝐫𝐞𝐧𝐭 𝐝𝐨𝐦𝐚𝐢𝐧𝐬.

𝐖𝐫𝐢𝐭𝐞 𝐚 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐫𝐞𝐭𝐮𝐫𝐧 𝐭𝐡𝐞 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞 𝐈𝐃𝐬 𝐨𝐟 𝐚𝐥𝐥 𝐭𝐡𝐞 𝐬𝐮𝐛𝐣𝐞𝐜𝐭
𝐦𝐚𝐭𝐭𝐞𝐫 𝐞𝐱𝐩𝐞𝐫𝐭𝐬 𝐚𝐭 𝐀𝐜𝐜𝐞𝐧𝐭𝐮𝐫𝐞.
*/

- 𝐂𝐫𝐞𝐚𝐭𝐞 𝐭𝐚𝐛𝐥𝐞 :-
CREATE TABLE users (
 employee_id INT,
 domain VARCHAR(50),
 years_of_experience INT
);

- 𝐈𝐧𝐬𝐞𝐫𝐭 𝐯𝐚𝐥𝐮𝐞𝐬 
INSERT INTO users (employee_id, domain, years_of_experience)
VALUES
(101, 'Digital Transformation', 9),(102, 'Supply Chain', 6),(102, 'IoT', 7),
(103, 'Change Management', 4),(104, 'DevOps', 5),(104, 'Cloud Migration', 5), (104, 'Agile Transformation', 5);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-------------+
| employee_id |
+-------------+
|     101     |
|     102     |
|     104     |
+-------------+

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## 📌 𝟒𝟕) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐙𝐨𝐦𝐚𝐭𝐨 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

💡𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧:-
/*
𝐘𝐨𝐮 𝐚𝐫𝐞 𝐚 𝐃𝐚𝐭𝐚 𝐀𝐧𝐚𝐥𝐲𝐬𝐭 𝐰𝐨𝐫𝐤𝐢𝐧𝐠 𝐚𝐭 𝐳𝐨𝐦𝐚𝐭𝐨. 𝐘𝐨𝐮𝐫 𝐭𝐚𝐬𝐤 𝐢𝐬 𝐭𝐨 𝐚𝐧𝐚𝐥𝐲𝐳𝐞 𝐫𝐞𝐬𝐭𝐚𝐮𝐫𝐚𝐧𝐭 𝐫𝐚𝐭𝐢𝐧𝐠 𝐨𝐯𝐞𝐫 𝐭𝐢𝐦𝐞 𝐭𝐨 𝐮𝐧𝐝𝐞𝐫𝐬𝐭𝐚𝐧𝐝 𝐡𝐨𝐰 𝐭𝐡𝐞 𝐚𝐯𝐞𝐫𝐚𝐠𝐞 𝐫𝐚𝐭𝐢𝐧𝐠 𝐨𝐟 𝐞𝐚𝐜𝐡 𝐫𝐞𝐬𝐭𝐚𝐮𝐫𝐚𝐧𝐭 𝐜𝐡𝐚𝐧𝐠𝐞𝐬 
𝐦𝐨𝐧𝐭𝐡𝐥𝐲 .

𝐅𝐢𝐧𝐝 𝐭𝐡𝐞 𝐚𝐯𝐞𝐫𝐚𝐠𝐞 𝐫𝐚𝐭𝐢𝐧𝐠 𝐟𝐨𝐫 𝐞𝐚𝐜𝐡 𝐫𝐞𝐬𝐭𝐚𝐮𝐫𝐚𝐧𝐭 𝐟𝐨𝐫 𝐞𝐚𝐜𝐡 𝐦𝐨𝐧𝐭𝐡. 𝐈𝐧𝐜𝐥𝐮𝐝𝐞 𝐫𝐞𝐬𝐭𝐚𝐮𝐫𝐚𝐧𝐭 𝐭𝐡𝐚𝐭 𝐡𝐚𝐯𝐞 𝐫𝐞𝐜𝐞𝐢𝐯𝐞𝐝 𝐚𝐭 𝐥𝐞𝐚𝐬𝐭 𝟐 𝐫𝐞𝐯𝐢𝐞𝐰𝐬 𝐢𝐧 𝐚 𝐠𝐢𝐯𝐞𝐧 𝐦𝐨𝐧𝐭𝐡
*/

- 𝐂𝐫𝐞𝐚𝐭𝐞 𝐭𝐚𝐛𝐥𝐞 :-
CREATE TABLE Reviews_ (
 review_id INT PRIMARY KEY,
 user_id INT,
 submit_date DATE,
 restaurant_id INT,
 rating INT
);

- 𝐈𝐧𝐬𝐞𝐫𝐭 𝐯𝐚𝐥𝐮𝐞𝐬 
INSERT INTO Reviews_ 
VALUES 
(1001, 501, '2022-01-15', 101, 4),(1002, 502, '2022-01-20', 101, 5),
(1003, 503, '2022-01-25', 102, 3),(1004, 504, '2022-01-15', 102, 4),
(1005, 505, '2022-02-20', 101, 5),(1006, 506, '2022-02-26', 101, 4),
(1007, 507, '2022-03-01', 101, 4),
(1008, 508, '2022-03-05', 102, 2);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+---------------+-------------+------------+
| restaurant_id | review_month| avg_rating |
+---------------+-------------+------------+
|     101       |   2022-01   |    4.50    |
|     101       |   2022-02   |    4.50    |
|     102       |   2022-01   |    3.50    |
+---------------+-------------+------------+

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟒𝟖) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐂𝐚𝐩𝐢𝐭𝐚𝐥 𝐎𝐧𝐞 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

💡𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧:-
/*
𝐓𝐨𝐩 𝐃𝐞𝐩𝐚𝐫𝐭𝐦𝐞𝐧𝐭 𝐒𝐚𝐥𝐚𝐫𝐢𝐞𝐬

𝐈𝐦𝐚𝐠𝐢𝐧𝐞 𝐲𝐨𝐮 𝐡𝐚𝐝 𝐚 𝐭𝐚𝐛𝐥𝐞 𝐨𝐟 𝐂𝐚𝐩𝐢𝐭𝐚𝐥 𝐎𝐧𝐞 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞 𝐬𝐚𝐥𝐚𝐫𝐲 𝐝𝐚𝐭𝐚.
𝐖𝐫𝐢𝐭𝐞 𝐚 𝐒𝐐𝐋 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐟𝐢𝐧𝐝 𝐭𝐡𝐞 𝐭𝐨𝐩 𝟑 𝐡𝐢𝐠𝐡𝐞𝐬𝐭 𝐞𝐚𝐫𝐧𝐢𝐧𝐠 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐰𝐢𝐭𝐡𝐢𝐧 𝐞𝐚𝐜𝐡 𝐝𝐞𝐩𝐚𝐫𝐭𝐦𝐞𝐧𝐭.
*/

-- 𝐂𝐫𝐞𝐚𝐭𝐞 𝐃𝐞𝐩𝐚𝐫𝐭𝐦𝐞𝐧𝐭 𝐭𝐚𝐛𝐥𝐞
CREATE TABLE Department (
 department_id INT PRIMARY KEY,
 department_name VARCHAR(50)
);

-- 𝐈𝐧𝐬𝐞𝐫𝐭 𝐝𝐚𝐭𝐚 𝐢𝐧𝐭𝐨 𝐃𝐞𝐩𝐚𝐫𝐭𝐦𝐞𝐧𝐭 𝐭𝐚𝐛𝐥𝐞
INSERT INTO Department (department_id, department_name)
VALUES 
(1, 'Data Analytics'),
(2, 'Data Science');

-- 𝐂𝐫𝐞𝐚𝐭𝐞 𝐄𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐭𝐚𝐛𝐥𝐞
CREATE TABLE CapitalOne_Employees (
 employee_id INT PRIMARY KEY,
 name VARCHAR(100),
 salary INT,
 department_id INT FOREIGN KEY REFERENCES Department(department_id)
);

-- 𝐈𝐧𝐬𝐞𝐫𝐭 𝐝𝐚𝐭𝐚 𝐢𝐧𝐭𝐨 𝐄𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐭𝐚𝐛𝐥𝐞
INSERT INTO CapitalOne_Employees (employee_id, name, salary, department_id)
VALUES
(1, 'Emma Thompson', 3800, 1),(2, 'Daniel Rodriguez', 2230, 1),
(3, 'Olivia Smith', 2000, 1),(4, 'Noah Johnson', 6800, 2),
(5, 'Sophia Martinez', 1750, 1),(8, 'William Davis', 6800, 2),
(10, 'James Anderson', 4000, 1);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-----------------+-------------+------------------+--------+
| department_name | employee_id | name             | salary |
+-----------------+-------------+------------------+--------+
| Data Analytics  |     10      | James Anderson   | 4000   |
| Data Analytics  |      1      | Emma Thompson    | 3800   |
| Data Analytics  |      2      | Daniel Rodriguez | 2230   |
| Data Science    |      4      | Noah Johnson     | 6800   |
| Data Science    |      8      | William Davis    | 6800   |
+-----------------+-------------+------------------+--------+

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## 📌 𝟒𝟗) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐀𝐦𝐚𝐳𝐨𝐧 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

💡𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧:-
/*
𝐐𝟔: 𝐈𝐝𝐞𝐧𝐭𝐢𝐟𝐲 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫𝐬 𝐰𝐡𝐨 𝐩𝐮𝐫𝐜𝐡𝐚𝐬𝐞𝐝 𝐩𝐫𝐨𝐝𝐮𝐜𝐭𝐬 𝐟𝐫𝐨𝐦 𝐚𝐥𝐥 𝐚𝐯𝐚𝐢𝐥𝐚𝐛𝐥𝐞 𝐜𝐚𝐭𝐞𝐠𝐨𝐫𝐢𝐞𝐬.
*/

𝐓𝐀𝐁𝐋𝐄
CREATE TABLE Categories_Data_ (
 CategoryID INT PRIMARY KEY,
 CategoryName VARCHAR(50)
);

𝐈𝐍𝐒𝐄𝐑𝐓 𝐕𝐀𝐋𝐔𝐄𝐒
INSERT INTO Categories_Data_ VALUES (1, 'Electronics'), (2, 'Books'),
(3, 'Clothing');

𝐓𝐀𝐁𝐋𝐄
CREATE TABLE Products_Data_ ( ProductID INT PRIMARY KEY,
ProductName VARCHAR(100), CategoryID INT FOREIGN KEY REFERENCES Categories_Data_(CategoryID)
);

𝐈𝐍𝐒𝐄𝐑𝐓 𝐕𝐀𝐋𝐔𝐄𝐒
INSERT INTO Products_Data_ VALUES
(1, 'Laptop', 1),(2, 'Smartphone', 1), (3, 'Novel', 2),(4, 'T-Shirt', 3),
(5, 'Jeans', 3), (6, 'Textbook', 2);

𝐓𝐀𝐁𝐋𝐄
CREATE TABLE Customers_ ( CustomerID INT PRIMARY KEY,
 CustomerName VARCHAR(100)
);

𝐈𝐍𝐒𝐄𝐑𝐓 𝐕𝐀𝐋𝐔𝐄𝐒
INSERT INTO Customers_ VALUES (101, 'Alice'), (102, 'Bob'), (103, 'Charlie');

𝐓𝐀𝐁𝐋𝐄
CREATE TABLE Purchases_data_ ( PurchaseID INT PRIMARY KEY,
 CustomerID INT FOREIGN KEY REFERENCES Customers(CustomerID),
 ProductID INT FOREIGN KEY REFERENCES Products_Data(ProductID),
 PurchaseDate DATE
);

𝐈𝐍𝐒𝐄𝐑𝐓 𝐕𝐀𝐋𝐔𝐄𝐒
INSERT INTO Purchases_data_ VALUES
(1, 101, 1, '2024-01-10'), (2, 101, 3, '2024-01-12'),  (3, 101, 4, '2024-01-15'),  (4, 102, 1, '2024-02-10'),  (5, 102, 3, '2024-02-12'),  (6, 103, 4, '2024-03-10'),  (7, 103, 6, '2024-03-12'),  (8, 103, 2, '2024-03-14');

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+------------+--------------+
| CustomerID | CustomerName |
+------------+--------------+
|    101     | Alice        |
|    103     | Charlie      |
+------------+--------------+

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## 📌 𝟓𝟎) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐀𝐦𝐚𝐳𝐨𝐧 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

💡𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧:-
/*
𝐈𝐝𝐞𝐧𝐭𝐢𝐟𝐲 𝐩𝐫𝐨𝐝𝐮𝐜𝐭𝐬 𝐭𝐡𝐚𝐭 𝐡𝐚𝐯𝐞 𝐛𝐞𝐞𝐧 𝐬𝐨𝐥𝐝 𝐛𝐮𝐭 𝐡𝐚𝐯𝐞 𝐧𝐨 𝐫𝐞𝐜𝐨𝐫𝐝 𝐢𝐧 𝐭𝐡𝐞 𝐩𝐫𝐨𝐝𝐮𝐜𝐭𝐬 𝐭𝐚𝐛𝐥𝐞 𝐚𝐧𝐝 𝐚𝐥𝐬𝐨 𝐜𝐚𝐥𝐜𝐮𝐥𝐚𝐭𝐞 𝐡𝐨𝐰 𝐦𝐚𝐧𝐲 𝐭𝐢𝐦𝐞𝐬 𝐞𝐚𝐜𝐡 𝐦𝐢𝐬𝐬𝐢𝐧𝐠 𝐩𝐫𝐨𝐝𝐮𝐜𝐭 𝐡𝐚𝐬 𝐛𝐞𝐞𝐧 𝐬𝐨𝐥𝐝.
*/

-- 𝐏𝐫𝐨𝐝𝐮𝐜𝐭𝐬 𝐓𝐚𝐛𝐥𝐞
CREATE TABLE Products_details ( ProductID INT PRIMARY KEY,
 ProductName VARCHAR(50)
);

-- 𝐏𝐫𝐨𝐝𝐮𝐜𝐭𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚
INSERT INTO Products_details (ProductID, ProductName) VALUES
(1, 'Smartphone'), (2, 'Laptop'), (3, 'Tablet');

-- 𝐒𝐚𝐥𝐞𝐬 𝐓𝐚𝐛𝐥𝐞
CREATE TABLE Sales_details ( SaleID INT PRIMARY KEY, ProductID INT,
 SaleDate DATE, SaleAmount DECIMAL(10,2)
);

-- 𝐒𝐚𝐥𝐞𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚
INSERT INTO Sales_details (SaleID, ProductID, SaleDate, SaleAmount) 
VALUES (101, 1, '2024-06-01', 15000.00), 
(102, 4, '2024-06-02', 20000.00),
(103, 5, '2024-06-03', 30000.00),  
(104, 4, '2024-06-04', 20000.00),
(105, 1, '2024-06-05', 15000.00), 
(106, 5, '2024-06-06', 30000.00), 
(107, 2, '2024-06-07', 25000.00);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-----------+------------+
| ProductID | Times_Sold |
+-----------+------------+
|     4     |     2      |
|     5     |     2      |
+-----------+------------+

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## 📌 𝟓𝟏) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐀𝐦𝐚𝐳𝐨𝐧 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

💡𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧:-
/*
𝐋𝐢𝐬𝐭 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐰𝐡𝐨 𝐞𝐚𝐫𝐧 𝐦𝐨𝐫𝐞 𝐭𝐡𝐚𝐧 𝐭𝐡𝐞𝐢𝐫 𝐝𝐞𝐩𝐚𝐫𝐭𝐦𝐞𝐧𝐭 𝐚𝐯𝐞𝐫𝐚𝐠𝐞.
*/

-- 𝐃𝐞𝐩𝐚𝐫𝐭𝐦𝐞𝐧𝐭𝐬 𝐓𝐚𝐛𝐥𝐞
CREATE TABLE Departments_ (
 DeptID INT PRIMARY KEY,
 DeptName VARCHAR(50)
);

- 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐞𝐩𝐚𝐫𝐭𝐦𝐞𝐧𝐭𝐬 𝐃𝐚𝐭𝐚
INSERT INTO Departments_ (DeptID, DeptName) VALUES
(1, 'IT'),(2, 'HR'),(3, 'Finance');

-- 𝐄𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐓𝐚𝐛𝐥𝐞
CREATE TABLE Employees_Data (
 EmpID INT PRIMARY KEY,
 EmpName VARCHAR(50),
 Salary INT,
 DeptID INT
);

-- 𝐒𝐚𝐦𝐩𝐥𝐞 𝐄𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐃𝐚𝐭𝐚
INSERT INTO Employees_Data (EmpID, EmpName, Salary, DeptID) VALUES
(101, 'Alice', 70000, 1),(102, 'Bob', 80000, 1),
(103, 'Charlie', 60000, 1),(104, 'David', 40000, 2),
(105, 'Eve', 50000, 2),(106, 'Frank', 90000, 3),
(107, 'Grace', 85000, 3), (108, 'Hank', 75000, 3);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-------+---------+--------+-----------+
| EmpID | EmpName | Salary | DeptName  |
+-------+---------+--------+-----------+
| 101   | Alice   | 70000  | IT        |
| 102   | Bob     | 80000  | IT        |
| 105   | Eve     | 50000  | HR        |
| 106   | Frank   | 90000  | Finance   |
| 107   | Grace   | 85000  | Finance   |
+-------+---------+--------+-----------+

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## 📌 𝟓𝟐) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐒𝐡𝐨𝐩𝐢𝐟𝐲 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

💡𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧:-
/*
𝐆𝐢𝐯𝐞𝐧 𝐭𝐡𝐞 𝐮𝐬𝐞𝐫𝐬' 𝐬𝐞𝐬𝐬𝐢𝐨𝐧𝐬 𝐥𝐨𝐠𝐬 𝐨𝐧 𝐚 𝐩𝐚𝐫𝐭𝐢𝐜𝐮𝐥𝐚𝐫 𝐝𝐚𝐲, 𝐜𝐚𝐥𝐜𝐮𝐥𝐚𝐭𝐞 𝐡𝐨𝐰 
𝐦𝐚𝐧𝐲 𝐡𝐨𝐮𝐫𝐬 𝐞𝐚𝐜𝐡 𝐮𝐬𝐞𝐫 𝐰𝐚𝐬 𝐚𝐜𝐭𝐢𝐯𝐞 𝐭𝐡𝐚𝐭 𝐝𝐚𝐲. 

𝐍𝐨𝐭𝐞: 𝐓𝐡𝐞 𝐬𝐞𝐬𝐬𝐢𝐨𝐧 𝐬𝐭𝐚𝐫𝐭𝐬 𝐰𝐡𝐞𝐧 𝐬𝐭𝐚𝐭𝐞= 𝟏 𝐚𝐧𝐝 𝐞𝐧𝐝𝐬 𝐰𝐡𝐞𝐧 𝐬𝐭𝐚𝐭𝐞= 𝟎.
*/

𝐓𝐀𝐁𝐋𝐄
CREATE TABLE cust_tracking_ (
 cust_id VARCHAR(10),
 state INT,
 timestamp DATETIME
);

𝐈𝐍𝐒𝐄𝐑𝐓 𝐕𝐀𝐋𝐔𝐄𝐒
INSERT INTO cust_tracking_ (cust_id, state, timestamp) VALUES
('c001', 1, '2024-11-26 07:00:00'), ('c001', 0, '2024-11-26 09:30:00'),
('c001', 1, '2024-11-26 12:00:00'), ('c001', 0, '2024-11-26 14:30:00'),
('c002', 1, '2024-11-26 08:00:00'), ('c002', 0, '2024-11-26 09:30:00'),
('c002', 1, '2024-11-26 11:00:00'), ('c002', 0, '2024-11-26 12:30:00'),
('c002', 1, '2024-11-26 15:00:00'), ('c002', 0, '2024-11-26 16:30:00'),
('c003', 1, '2024-11-26 09:00:00'), ('c003', 0, '2024-11-26 10:30:00'),
('c004', 1, '2024-11-26 10:00:00'), ('c004', 0, '2024-11-26 10:30:00'),
('c004', 1, '2024-11-26 14:00:00'), ('c004', 0, '2024-11-26 15:30:00'),
('c005', 1, '2024-11-26 10:00:00'), ('c005', 0, '2024-11-26 14:30:00'),
('c005', 1, '2024-11-26 15:30:00'), ('c005', 0, '2024-11-26 18:30:00');

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+---------+--------------+
| cust_id | active_hours |
+---------+--------------+
| c001    | 5.00         |
| c002    | 4.50         |
| c003    | 1.50         |
| c004    | 1.50         |
| c005    | 7.50         |
+---------+--------------+

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## 📌 𝟓𝟑) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐔𝐛𝐞𝐫 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

💡𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧:-
/*
𝐀𝐬 𝐚 𝐝𝐚𝐭𝐚 𝐚𝐧𝐚𝐥𝐲𝐬𝐭 𝐚𝐭 𝐔𝐛𝐞𝐫, 𝐢𝐭'𝐬 𝐲𝐨𝐮𝐫 𝐣𝐨𝐛 𝐭𝐨 𝐫𝐞𝐩𝐨𝐫𝐭 𝐭𝐡𝐞 𝐥𝐚𝐭𝐞𝐬𝐭 𝐦𝐞𝐭𝐫𝐢𝐜𝐬
𝐟𝐨𝐫 𝐬𝐩𝐞𝐜𝐢𝐟𝐢𝐜 𝐠𝐫𝐨𝐮𝐩𝐬 𝐨𝐟 𝐔𝐛𝐞𝐫 𝐮𝐬𝐞𝐫𝐬. 𝐒𝐨𝐦𝐞 𝐫𝐢𝐝𝐞𝐫𝐬 𝐜𝐫𝐞𝐚𝐭𝐞 𝐭𝐡𝐞𝐢𝐫 𝐔𝐛𝐞𝐫 𝐚𝐜𝐜𝐨𝐮𝐧𝐭
𝐭𝐡𝐞 𝐬𝐚𝐦𝐞 𝐝𝐚𝐲 𝐭𝐡𝐞𝐲 𝐛𝐨𝐨𝐤 𝐭𝐡𝐞𝐢𝐫 𝐟𝐢𝐫𝐬𝐭 𝐫𝐢𝐝𝐞; 𝐭𝐡𝐞 𝐫𝐢𝐝𝐞𝐫 𝐞𝐧𝐠𝐚𝐠𝐞𝐦𝐞𝐧𝐭 𝐭𝐞𝐚𝐦 𝐜𝐚𝐥𝐥𝐬
𝐭𝐡𝐞𝐦 "𝐢𝐧-𝐭𝐡𝐞-𝐦𝐨𝐦𝐞𝐧𝐭" 𝐮𝐬𝐞𝐫𝐬.

𝐔𝐛𝐞𝐫 𝐰𝐚𝐧𝐭𝐬 𝐭𝐨 𝐤𝐧𝐨𝐰 𝐭𝐡𝐞 𝐚𝐯𝐞𝐫𝐚𝐠𝐞 𝐝𝐞𝐥𝐚𝐲 𝐛𝐞𝐭𝐰𝐞𝐞𝐧 𝐭𝐡𝐞 𝐝𝐚𝐲 𝐨𝐟 𝐮𝐬𝐞𝐫 𝐬𝐢𝐠𝐧-𝐮𝐩
𝐚𝐧𝐝 𝐭𝐡𝐞 𝐝𝐚𝐲 𝐨𝐟 𝐭𝐡𝐞𝐢𝐫 𝟐𝐧𝐝 𝐫𝐢𝐝𝐞. 𝐖𝐫𝐢𝐭𝐞 𝐚 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐩𝐮𝐥𝐥 𝐭𝐡𝐞 𝐚𝐯𝐞𝐫𝐚𝐠𝐞 
𝟐𝐧𝐝 𝐫𝐢𝐝𝐞 𝐝𝐞𝐥𝐚𝐲 𝐟𝐨𝐫 "𝐢𝐧-𝐭𝐡𝐞-𝐦𝐨𝐦𝐞𝐧𝐭" 𝐔𝐛𝐞𝐫 𝐮𝐬𝐞𝐫𝐬. 𝐑𝐨𝐮𝐧𝐝 𝐭𝐡𝐞 𝐚𝐧𝐬𝐰𝐞𝐫 𝐭𝐨
𝟐-𝐝𝐞𝐜𝐢𝐦𝐚𝐥 𝐩𝐥𝐚𝐜𝐞𝐬.
*/

-- 𝐔𝐬𝐞𝐫𝐬 𝐓𝐚𝐛𝐥𝐞 
CREATE TABLE users_data ( user_id INT PRIMARY KEY,
registration_date DATE );

-- 𝐒𝐚𝐦𝐩𝐥𝐞 𝐔𝐬𝐞𝐫𝐬 𝐃𝐚𝐭𝐚
INSERT INTO users_data (user_id, registration_date) VALUES
(1, '2022-08-15'), (2, '2022-08-21');

-- 𝐑𝐢𝐝𝐞𝐬 𝐓𝐚𝐛𝐥𝐞 
CREATE TABLE rides ( ride_id INT PRIMARY KEY,
 user_id INT FOREIGN KEY REFERENCES users_data(user_id),
 ride_date DATE );

-- 𝐒𝐚𝐦𝐩𝐥𝐞 𝐑𝐢𝐝𝐞𝐬 𝐃𝐚𝐭𝐚
INSERT INTO rides (ride_id, user_id, ride_date) VALUES
(1, 1, '2022-08-15'), (2, 1, '2022-08-16'),
(3, 2, '2022-09-20'), (4, 2, '2022-09-23');

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+----------------------+
| avg_second_ride_delay|
+----------------------+
| 1.50                 |
+----------------------+

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## 📌 𝟓𝟒) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐀𝐦𝐚𝐳𝐨𝐧 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

💡𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧:-

/*
𝐂𝐚𝐥𝐜𝐮𝐥𝐚𝐭𝐞 𝐭𝐡𝐞 𝐜𝐮𝐦𝐮𝐥𝐚𝐭𝐢𝐯𝐞 𝐬𝐚𝐥𝐞𝐬 𝐟𝐨𝐫 𝐞𝐚𝐜𝐡 𝐬𝐭𝐨𝐫𝐞, 𝐛𝐮𝐭 𝐨𝐧𝐥𝐲 
𝐢𝐧𝐜𝐥𝐮𝐝𝐞 𝐝𝐚𝐭𝐞𝐬 𝐰𝐡𝐞𝐫𝐞 𝐭𝐡𝐞 𝐝𝐚𝐢𝐥𝐲 𝐬𝐚𝐥𝐞𝐬 𝐞𝐱𝐜𝐞𝐞𝐝𝐞𝐝 𝐭𝐡𝐞 𝐬𝐭𝐨𝐫𝐞'𝐬 𝐚𝐯𝐞𝐫𝐚𝐠𝐞 𝐝𝐚𝐢𝐥𝐲 𝐬𝐚𝐥𝐞𝐬.
*/

𝐓𝐚𝐛𝐥𝐞 
CREATE TABLE Sales_Data_ (
 Store_ID INT,
 Sale_Date DATE,
 Daily_Sales INT
);

𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚
INSERT INTO Sales_Data_ (Store_ID, Sale_Date, Daily_Sales) VALUES
(1, '2024-06-01', 1000),(1, '2024-06-02', 1200),(1, '2024-06-03', 800),
(1, '2024-06-04', 1500),(2, '2024-06-01', 500),
(2, '2024-06-02', 700),(2, '2024-06-03', 900),
(2, '2024-06-04', 400);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+----------+------------+-------------+-----------------+
| Store_ID | Sale_Date  | Daily_Sales | Cumulative_Sales|
+----------+------------+-------------+-----------------+
|    1     | 2024-06-02 |    1200     |       1200      |
|    1     | 2024-06-04 |    1500     |       2700      |
|    2     | 2024-06-03 |     900     |        900      |
+----------+------------+-------------+-----------------+

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## 📌 𝟓𝟓) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐔𝐛𝐞𝐫 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

💡𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧:-
/*
-- 𝐔𝐬𝐞𝐫𝐬 𝐰𝐡𝐨 𝐛𝐨𝐨𝐤𝐞𝐝 𝐦𝐨𝐫𝐞 𝐭𝐡𝐚𝐧 𝐨𝐧𝐜𝐞 𝐰𝐢𝐭𝐡𝐢𝐧 𝟏𝟎 𝐦𝐢𝐧𝐮𝐭𝐞𝐬
*/

-- 𝐒𝐭𝐞𝐩 𝟏: 𝐂𝐫𝐞𝐚𝐭𝐞 𝐭𝐡𝐞 𝐭𝐚𝐛𝐥𝐞
CREATE TABLE Rides_ (
 ride_id INT PRIMARY KEY,
 user_id VARCHAR(10),
 ride_time DATETIME
);

-- 𝐒𝐭𝐞𝐩 𝟐: 𝐈𝐧𝐬𝐞𝐫𝐭 𝐭𝐡𝐞 𝐝𝐚𝐭𝐚
INSERT INTO Rides_ (ride_id, user_id, ride_time)
VALUES 
(1, 'U1', '2024-06-01 10:00:00'),(2, 'U1', '2024-06-01 10:08:00'),
(3, 'U2', '2024-06-01 09:00:00'),(4, 'U2', '2024-06-01 09:30:00'),
(5, 'U1', '2024-06-01 10:20:00'),(6, 'U3', '2024-06-01 11:00:00')

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+---------+
| user_id |
+---------+
|   U1    |
+---------+

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝟓𝟔) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐀𝐦𝐚𝐳𝐨𝐧 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

💡𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧:-
/*
𝐐:- 𝐈𝐝𝐞𝐧𝐭𝐢𝐟𝐲 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫𝐬 𝐰𝐡𝐨 𝐩𝐮𝐫𝐜𝐡𝐚𝐬𝐞𝐝 𝐩𝐫𝐨𝐝𝐮𝐜𝐭𝐬 𝐟𝐫𝐨𝐦 𝐚𝐥𝐥 𝐚𝐯𝐚𝐢𝐥𝐚𝐛𝐥𝐞 𝐜𝐚𝐭𝐞𝐠𝐨𝐫𝐢𝐞𝐬.
*/

𝐂𝐚𝐭𝐞𝐠𝐨𝐫𝐲 𝐓𝐚𝐛𝐥𝐞:- 

CREATE TABLE Categories_Data_ ( CategoryID INT PRIMARY KEY,
 CategoryName VARCHAR(50) );

𝐂𝐚𝐭𝐞𝐠𝐨𝐫𝐲 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO Categories_Data_ VALUES (1, 'Electronics'),(2, 'Books'),
(3, 'Clothing');
 
𝐏𝐫𝐨𝐝𝐮𝐜𝐭𝐬 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE Products_Data_ ( ProductID INT PRIMARY KEY,
 ProductName VARCHAR(100), CategoryID INT FOREIGN KEY REFERENCES Categories_Data_(CategoryID) );
 
𝐏𝐫𝐨𝐝𝐮𝐜𝐭𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚 :- 
INSERT INTO Products_Data_ VALUES 
(1, 'Laptop', 1),(2, 'Smartphone', 1),(3, 'Novel', 2),(4, 'T-Shirt', 3),
(5, 'Jeans', 3),(6, 'Textbook', 2);

𝐂𝐮𝐬𝐭𝐨𝐦𝐞𝐫𝐬 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE Customers_ ( CustomerID INT PRIMARY KEY,
 CustomerName VARCHAR(100)
);

𝐂𝐮𝐬𝐭𝐨𝐦𝐞𝐫𝐬 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO Customers_ VALUES (101, 'Alice'), (102, 'Bob'),
(103, 'Charlie');
 
𝐏𝐮𝐫𝐜𝐡𝐚𝐬𝐞 𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE Purchases_data_ (
 PurchaseID INT PRIMARY KEY,
 CustomerID INT FOREIGN KEY REFERENCES Customers(CustomerID),
 ProductID INT FOREIGN KEY REFERENCES Products_Data(ProductID),
 PurchaseDate DATE
);

𝐏𝐮𝐫𝐜𝐡𝐚𝐬𝐞 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO Purchases_data_ VALUES
(1, 101, 1, '2024-01-10'), (2, 101, 3, '2024-01-12'), 
(3, 101, 4, '2024-01-15'),  (4, 102, 1, '2024-02-10'), 
(5, 102, 3, '2024-02-12'),  (6, 103, 4, '2024-03-10'), 
(7, 103, 6, '2024-03-12'),  (8, 103, 2, '2024-03-14');

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-------------+--------------+
| CustomerID  | CustomerName |
+-------------+--------------+
|     101     | Alice        |
|     103     | Charlie      |
+-------------+--------------+

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## 📌 𝟓𝟕) 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

🔵𝐎𝐧𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐒𝐐𝐋 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐀𝐬𝐤𝐞𝐝 𝐢𝐧 𝐕𝐢𝐬𝐚 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰🔵

💡𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧:-
/*
𝐒𝐚𝐲 𝐲𝐨𝐮 𝐡𝐚𝐯𝐞 𝐚𝐜𝐜𝐞𝐬𝐬 𝐭𝐨 𝐚𝐥𝐥 𝐭𝐡𝐞 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧𝐬 𝐟𝐨𝐫 𝐚 𝐠𝐢𝐯𝐞𝐧 𝐦𝐞𝐫𝐜𝐡𝐚𝐧𝐭 𝐚𝐜𝐜𝐨𝐮𝐧𝐭. 
𝐖𝐫𝐢𝐭𝐞 𝐚 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐩𝐫𝐢𝐧𝐭 𝐭𝐡𝐞 𝐜𝐮𝐦𝐮𝐥𝐚𝐭𝐢𝐯𝐞 𝐛𝐚𝐥𝐚𝐧𝐜𝐞 𝐨𝐟 𝐭𝐡𝐞 𝐦𝐞𝐫𝐜𝐡𝐚𝐧𝐭 𝐚𝐜𝐜𝐨𝐮𝐧𝐭 𝐚𝐭 𝐭𝐡𝐞 𝐞𝐧𝐝 𝐨𝐟 𝐞𝐚𝐜𝐡 𝐝𝐚𝐲, 𝐰𝐢𝐭𝐡 𝐭𝐡𝐞 𝐭𝐨𝐭𝐚𝐥 𝐛𝐚𝐥𝐚𝐧𝐜𝐞 𝐫𝐞𝐬𝐞𝐭 𝐛𝐚𝐜𝐤 𝐭𝐨 𝐳𝐞𝐫𝐨 𝐚𝐭 𝐭𝐡𝐞 𝐞𝐧𝐝 𝐨𝐟 𝐭𝐡𝐞 𝐦𝐨𝐧𝐭𝐡. 
𝐎𝐮𝐭𝐩𝐮𝐭 𝐭𝐡𝐞 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧 𝐝𝐚𝐭𝐞 𝐚𝐧𝐝 𝐜𝐮𝐦𝐮𝐥𝐚𝐭𝐢𝐯𝐞 𝐛𝐚𝐥𝐚𝐧𝐜𝐞.
*/

𝐓𝐚𝐛𝐥𝐞:- 
CREATE TABLE transactions_ (
 transaction_id INT,
 type VARCHAR(20),
 amount DECIMAL(10, 2),
 transaction_date DATETIME
);

𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚:- 
INSERT INTO transactions_ (transaction_id, type, amount, transaction_date) VALUES
(19153, 'deposit', 65.90, '2022-07-10 10:00:00'),
(53151, 'deposit', 178.55, '2022-07-08 10:00:00'),
(29776, 'withdrawal', 25.90, '2022-07-08 10:00:00'),
(16461, 'withdrawal', 45.99, '2022-07-08 10:00:00'),
(77134, 'deposit', 32.60, '2022-07-10 10:00:00');

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+------------+-------------------+
|  txn_date  | cumulative_balance|
+------------+-------------------+
| 2022-07-08 |       106.66      |
| 2022-07-10 |       204.16      |
+------------+-------------------+

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

