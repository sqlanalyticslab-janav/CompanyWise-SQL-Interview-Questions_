                                                                                 # 𝐃𝐚𝐭𝐚 𝐛𝐫𝐢𝐜𝐤𝐬 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧𝐬
## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟏: 𝐂𝐮𝐦𝐮𝐥𝐚𝐭𝐢𝐯𝐞 𝐑𝐞𝐯𝐞𝐧𝐮𝐞 𝐩𝐞𝐫 𝐃𝐚𝐲

𝐂𝐨𝐧𝐜𝐞𝐩𝐭: 𝐓𝐡𝐢𝐬 𝐪𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐭𝐞𝐬𝐭𝐬 𝐲𝐨𝐮𝐫 𝐚𝐛𝐢𝐥𝐢𝐭𝐲 𝐭𝐨 𝐮𝐬𝐞 𝐰𝐢𝐧𝐝𝐨𝐰 𝐟𝐮𝐧𝐜𝐭𝐢𝐨𝐧𝐬, 
𝐬𝐩𝐞𝐜𝐢𝐟𝐢𝐜𝐚𝐥𝐥𝐲 𝐒𝐔𝐌() 𝐎𝐕𝐄𝐑(), 𝐭𝐨 𝐜𝐚𝐥𝐜𝐮𝐥𝐚𝐭𝐞 𝐫𝐮𝐧𝐧𝐢𝐧𝐠 𝐭𝐨𝐭𝐚𝐥𝐬.
*/

CREATE DATABASE Data_Bricks;

USE Data_Bricks;

## 𝐓𝐚𝐛𝐥𝐞
CREATE TABLE Sales (
    sale_date DATE,
    revenue INT
);

## 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚
INSERT INTO Sales (sale_date, revenue) VALUES
('2025-01-01', 100),
('2025-01-01', 50),
('2025-01-02', 75),
('2025-01-03', 120),
('2025-01-03', 30),
('2025-01-04', 90);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+------------+-------------------+------------------------+
| sale_date  | daily_total_revenue | cumulative_total_revenue |
+------------+-------------------+------------------------+
| 2025-01-01 | 150               | 150                    |
| 2025-01-02 | 75                | 225                    |
| 2025-01-03 | 150               | 375                    |
| 2025-01-04 | 90                | 465                    |
+------------+-------------------+------------------------+

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/* 𝐐𝟐) 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝟐: 𝐅𝐢𝐫𝐬𝐭 𝐚𝐧𝐝 𝐋𝐚𝐬𝐭 𝐋𝐨𝐠𝐢𝐧 𝐏𝐞𝐫 𝐔𝐬𝐞𝐫
𝐂𝐨𝐧𝐜𝐞𝐩𝐭: 𝐓𝐡𝐢𝐬 𝐭𝐞𝐬𝐭𝐬 𝐲𝐨𝐮𝐫 𝐚𝐛𝐢𝐥𝐢𝐭𝐲 𝐭𝐨 𝐟𝐢𝐧𝐝 𝐦𝐢𝐧𝐢𝐦𝐮𝐦 𝐚𝐧𝐝 𝐦𝐚𝐱𝐢𝐦𝐮𝐦 𝐯𝐚𝐥𝐮𝐞𝐬 
𝐠𝐫𝐨𝐮𝐩𝐞𝐝 𝐛𝐲 𝐚𝐧 𝐢𝐝𝐞𝐧𝐭𝐢𝐟𝐢𝐞𝐫, 𝐨𝐟𝐭𝐞𝐧 𝐮𝐬𝐢𝐧𝐠 𝐆𝐑𝐎𝐔𝐏 𝐁𝐘 𝐰𝐢𝐭𝐡 𝐚𝐠𝐠𝐫𝐞𝐠𝐚𝐭𝐞 𝐟𝐮𝐧𝐜𝐭𝐢𝐨𝐧𝐬, 𝐨𝐫 𝐬𝐨𝐦𝐞𝐭𝐢𝐦𝐞𝐬
𝐰𝐢𝐧𝐝𝐨𝐰 𝐟𝐮𝐧𝐜𝐭𝐢𝐨𝐧𝐬 𝐟𝐨𝐫 𝐦𝐨𝐫𝐞 𝐜𝐨𝐦𝐩𝐥𝐞𝐱 𝐬𝐜𝐞𝐧𝐚𝐫𝐢𝐨𝐬
*/

## 𝐓𝐚𝐛𝐥𝐞
CREATE TABLE  UserLogins (
    user_id INT NOT NULL,
    login_timestamp DATETIME2 NOT NULL
);

## 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚
INSERT INTO  UserLogins (user_id, login_timestamp) VALUES
(101, '2025-03-01 08:00:00'),
(102, '2025-03-01 09:15:00'),
(101, '2025-03-01 10:30:00'),
(103, '2025-03-02 11:00:00'),
(102, '2025-03-02 14:45:00'),
(101, '2025-03-03 07:00:00'),
(103, '2025-03-03 16:30:00');

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+---------+---------------------+---------------------+
| user_id | first_login         | last_login          |
+---------+---------------------+---------------------+
| 101     | 2025-03-01 08:00:00 | 2025-03-03 07:00:00 |
| 102     | 2025-03-01 09:15:00 | 2025-03-02 14:45:00 |
| 103     | 2025-03-02 11:00:00 | 2025-03-03 16:30:00 |
+---------+---------------------+---------------------+

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/* 𝐐𝟑) 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝟑: 𝐓𝐨𝐩 𝟑 𝐂𝐮𝐬𝐭𝐨𝐦𝐞𝐫𝐬 𝐛𝐲 𝐒𝐩𝐞𝐧𝐝 𝐢𝐧 𝐄𝐚𝐜𝐡 𝐑𝐞𝐠𝐢𝐨𝐧
𝐂𝐨𝐧𝐜𝐞𝐩𝐭: 𝐓𝐡𝐢𝐬 𝐢𝐬 𝐚 𝐜𝐥𝐚𝐬𝐬𝐢𝐜 "𝐭𝐨𝐩 𝐍 𝐩𝐞𝐫 𝐠𝐫𝐨𝐮𝐩" 𝐩𝐫𝐨𝐛𝐥𝐞𝐦, 𝐛𝐞𝐬𝐭 𝐬𝐨𝐥𝐯𝐞𝐝
𝐮𝐬𝐢𝐧𝐠 𝐰𝐢𝐧𝐝𝐨𝐰 𝐟𝐮𝐧𝐜𝐭𝐢𝐨𝐧𝐬, 𝐬𝐩𝐞𝐜𝐢𝐟𝐢𝐜𝐚𝐥𝐥𝐲 𝐑𝐎𝐖_𝐍𝐔𝐌𝐁𝐄𝐑(), 𝐑𝐀𝐍𝐊(), 𝐨𝐫 𝐃𝐄𝐍𝐒𝐄_𝐑𝐀𝐍𝐊() 
𝐰𝐢𝐭𝐡 𝐏𝐀𝐑𝐓𝐈𝐓𝐈𝐎𝐍 𝐁𝐘.
*/

## 𝐓𝐚𝐛𝐥𝐞
CREATE TABLE Orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    region VARCHAR(50),
    spend INT
);

## 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚
INSERT INTO Orders (order_id, customer_id, region, spend) VALUES
(1, 101, 'North', 150),(2, 102, 'South', 200),
(3, 103, 'North', 100),(4, 101, 'North', 50),
(5, 104, 'West', 300),(6, 102, 'South', 75),
(7, 105, 'North', 250),(8, 106, 'West', 180),
(9, 107, 'South', 120),(10, 103, 'North', 80),
(11, 108, 'East', 400),(12, 109, 'East', 150),
(13, 110, 'East', 220),
(14, 111, 'East', 90);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-------------+--------+-------------+
| customer_id | region | total_spend |
+-------------+--------+-------------+
| 105         | North  | 250         |
| 101         | North  | 200         |
| 103         | North  | 180         |
| 102         | South  | 275         |
| 107         | South  | 120         |
| 104         | West   | 300         |
| 106         | West   | 180         |
| 108         | East   | 400         |
| 110         | East   | 220         |
| 109         | East   | 150         |
+-------------+--------+-------------+

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟒)𝐃𝐞𝐭𝐞𝐜𝐭 𝐚𝐧𝐝 𝐃𝐞𝐥𝐞𝐭𝐞 𝐃𝐮𝐩𝐥𝐢𝐜𝐚𝐭𝐞 𝐓𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧𝐬
*/

## 𝐓𝐚𝐛𝐥𝐞
CREATE TABLE Transactions_ (
    transaction_id VARCHAR(10),
    transaction_date DATE,
    user_id INT,
    amount INT
);

## 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚
INSERT INTO Transactions_ (transaction_id, transaction_date, user_id, amount) VALUES
('T001', '2025-05-01', 101, 100),
('T002', '2025-05-01', 102, 150),
('T001', '2025-05-01', 101, 100),  
('T003', '2025-05-02', 103, 200),
('T002', '2025-05-01', 102, 150),  
('T004', '2025-05-02', 101, 50),

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+----------------+----------------+---------+--------+
| transaction_id | transaction_date | user_id | amount |
+----------------+----------------+---------+--------+
| T001           | 2025-05-01     | 101     | 100    |
| T002           | 2025-05-01     | 102     | 150    |
| T003           | 2025-05-02     | 103     | 200    |
| T004           | 2025-05-02     | 101     | 50     |
+----------------+----------------+---------+--------+

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟓:𝐔𝐬𝐞𝐫𝐬 𝐰𝐢𝐭𝐡 𝐏𝐮𝐫𝐜𝐡𝐚𝐬𝐞𝐬 𝐢𝐧 𝟑 𝐂𝐨𝐧𝐬𝐞𝐜𝐮𝐭𝐢𝐯𝐞 𝐌𝐨𝐧𝐭𝐡𝐬
*/

## 𝐓𝐚𝐛𝐥𝐞
CREATE TABLE Purchases (
    purchase_id VARCHAR(10) PRIMARY KEY,
    user_id INT,
    purchase_date DATE,
    amount INT
);

## 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚
INSERT INTO Purchases (purchase_id, user_id, purchase_date, amount) VALUES
('P001', 101, '2025-01-15', 25),('P002', 102, '2025-01-20', 30),
('P003', 101, '2025-02-10', 40),('P004', 103, '2025-02-25', 50),
('P005', 101, '2025-03-05', 60),('P006', 102, '2025-03-18', 35),
('P007', 104, '2025-03-22', 100),('P008', 101, '2025-04-01', 70),
('P009', 103, '2025-04-10', 55),('P010', 102, '2025-05-01', 45),
('P011', 101, '2025-06-01', 80);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+---------+
| user_id |
+---------+
|   101   |
+---------+

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟔:𝟕-𝐃𝐚𝐲 𝐌𝐨𝐯𝐢𝐧𝐠 𝐀𝐯𝐞𝐫𝐚𝐠𝐞 𝐨𝐟 𝐏𝐫𝐨𝐝𝐮𝐜𝐭 𝐒𝐚𝐥𝐞𝐬
*/

## 𝐓𝐚𝐛𝐥𝐞
CREATE TABLE Purchases_ (
    purchase_id VARCHAR(10),
    customer_id INT,
    purchase_date DATE,
    amount INT
);

## 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚
INSERT INTO Purchases_ (purchase_id, customer_id, purchase_date, amount)
VALUES 
('P001', 101, '2024-01-05', 25),('P002', 102, '2024-01-10', 30),
('P003', 101, '2024-02-15', 40),('P004', 103, '2024-02-20', 50),
('P005', 101, '2024-03-01', 60),('P006', 102, '2024-03-18', 35),
('P007', 101, '2024-04-05', 70),('P008', 103, '2024-04-10', 55),
('P009', 101, '2024-05-01', 80),('P010', 102, '2024-05-10', 45),
('P011', 101, '2024-06-01', 90),('P012', 103, '2024-06-15', 65),
('P013', 101, '2024-07-01', 100),('P014', 102, '2024-07-20', 50),
('P015', 101, '2024-08-01', 110),('P016', 103, '2024-08-05', 75),
('P017', 101, '2024-09-01', 120),('P018', 102, '2024-09-10', 60),
('P019', 101, '2024-10-01', 130),('P020', 103, '2024-10-20', 80),
('P021', 101, '2024-11-01', 140),('P022', 102, '2024-11-15', 65),
('P023', 101, '2024-12-01', 150),
('P024', 103, '2024-12-10', 90);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+--------------+-------------+--------------+---------------------+
| purchase_date| customer_id | total_amount | seven_day_moving_avg|
+--------------+-------------+--------------+---------------------+
| 2024-01-05   |     101     |      25      |        25.0         |
| 2024-02-15   |     101     |      40      |        32.5         |
| 2024-03-01   |     101     |      60      |        41.67        |
| 2024-04-05   |     101     |      70      |        48.75        |
| 2024-05-01   |     101     |      80      |        55.0         |
| 2024-06-01   |     101     |      90      |        60.83        |
| 2024-07-01   |     101     |     100      |        66.43        |
| 2024-08-01   |     101     |     110      |        78.57        |
| 2024-09-01   |     101     |     120      |        90.0         |
| 2024-10-01   |     101     |     130      |       104.29        |
| 2024-11-01   |     101     |     140      |       110.0         |
| 2024-12-01   |     101     |     150      |       117.14        |
+--------------+-------------+--------------+---------------------+

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟕: 𝐂𝐮𝐬𝐭𝐨𝐦𝐞𝐫𝐬 𝐖𝐡𝐨 𝐁𝐨𝐮𝐠𝐡𝐭 𝐏𝐫𝐨𝐝𝐮𝐜𝐭𝐬 𝐄𝐯𝐞𝐫𝐲 𝐌𝐨𝐧𝐭𝐡 𝐢𝐧 𝐚 𝐘𝐞𝐚𝐫 
*/

## 𝐓𝐚𝐛𝐥𝐞
CREATE TABLE Purchases_ (
    purchase_id VARCHAR(10),
    customer_id INT,
    purchase_date DATE,
    amount INT
);

## 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚
INSERT INTO Purchases_ (purchase_id, customer_id, purchase_date, amount)
VALUES 
('P001', 101, '2024-01-05', 25),('P002', 102, '2024-01-10', 30),
('P003', 101, '2024-02-15', 40),('P004', 103, '2024-02-20', 50),
('P005', 101, '2024-03-01', 60),('P006', 102, '2024-03-18', 35),
('P007', 101, '2024-04-05', 70),('P008', 103, '2024-04-10', 55),
('P009', 101, '2024-05-01', 80),('P010', 102, '2024-05-10', 45),
('P011', 101, '2024-06-01', 90),('P012', 103, '2024-06-15', 65),
('P013', 101, '2024-07-01', 100),('P014', 102, '2024-07-20', 50),
('P015', 101, '2024-08-01', 110),('P016', 103, '2024-08-05', 75),
('P017', 101, '2024-09-01', 120),('P018', 102, '2024-09-10', 60),
('P019', 101, '2024-10-01', 130),('P020', 103, '2024-10-20', 80),
('P021', 101, '2024-11-01', 140),('P022', 102, '2024-11-15', 65),
('P023', 101, '2024-12-01', 150),
('P024', 103, '2024-12-10', 90);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-------------+------+
| customer_id |  yr  |
+-------------+------+
|     101     | 2024 |
+-------------+------+

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟖:𝐑𝐚𝐧𝐤 𝐏𝐫𝐨𝐝𝐮𝐜𝐭𝐬 𝐛𝐲 𝐒𝐚𝐥𝐞𝐬 𝐏𝐞𝐫 𝐘𝐞𝐚𝐫
*/

## 𝐓𝐚𝐛𝐥𝐞
CREATE TABLE Sales_data (
    sale_date DATE,
    product_id VARCHAR(10),
    sales_amount INT
);

## 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚
INSERT INTO Sales_data (sale_date, product_id, sales_amount)
VALUES
('2024-01-01', 'P001', 100),
('2024-01-05', 'P002', 150),
('2024-02-10', 'P001', 200),
('2024-03-01', 'P003', 120),
('2024-04-15', 'P002', 180),
('2024-05-20', 'P001', 250),
('2024-06-01', 'P003', 90),
('2025-01-01', 'P001', 300),
('2025-01-10', 'P002', 220),
('2025-02-15', 'P003', 180),
('2025-03-01', 'P001', 350),
('2025-04-05', 'P002', 280),
('2025-05-10', 'P003', 200);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+------+------------+--------------+-----+
| Year | product_id | total_amount | rnk |
+------+------------+--------------+-----+
| 2024 | P001       |     550      |  1  |
| 2024 | P002       |     330      |  2  |
| 2024 | P003       |     210      |  3  |
| 2025 | P001       |     650      |  1  |
| 2025 | P002       |     500      |  2  |
| 2025 | P003       |     380      |  3  |
+------+------------+--------------+-----+

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟗:𝐄𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐄𝐚𝐫𝐧𝐢𝐧𝐠 𝐌𝐨𝐫𝐞 𝐓𝐡𝐚𝐧 𝐃𝐞𝐩𝐚𝐫𝐭𝐦𝐞𝐧𝐭 𝐀𝐯𝐞𝐫𝐚𝐠𝐞
*/

## 𝐓𝐚𝐛𝐥𝐞
CREATE TABLE Employees (
    employee_id INT,
    employee_name VARCHAR(50),
    department VARCHAR(50),
    salary INT
);

## 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚
INSERT INTO Employees (employee_id, employee_name, department, salary)
VALUES
(101, 'Alice', 'Sales', 60000),
(102, 'Bob', 'Sales', 75000),
(103, 'Charlie', 'Sales', 50000),
(104, 'David', 'Marketing', 80000),
(105, 'Eve', 'Marketing', 70000),
(106, 'Frank', 'Marketing', 90000),
(107, 'Grace', 'HR', 65000),
(108, 'Heidi', 'HR', 60000);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-------------+----------------+-------------+--------+
| employee_id | employee_name  | department  | salary |
+-------------+----------------+-------------+--------+
| 102         | Bob            | Sales       | 75000  |
| 106         | Frank          | Marketing   | 90000  |
| 107         | Grace          | HR          | 65000  |
+-------------+----------------+-------------+--------+

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟏𝟎:𝐂𝐮𝐬𝐭𝐨𝐦𝐞𝐫𝐬 𝐖𝐡𝐨𝐬𝐞 𝐅𝐢𝐫𝐬𝐭 𝐚𝐧𝐝 𝐋𝐚𝐬𝐭 𝐓𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧 𝐨𝐧 𝐒𝐚𝐦𝐞 𝐃𝐚𝐲
*/

## 𝐓𝐚𝐛𝐥𝐞
CREATE TABLE Transactions__ (
    transaction_id VARCHAR(10),
    customer_id INT,
    transaction_date DATE,
    amount INT
);

## 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚
INSERT INTO Transactions__ (transaction_id, customer_id, transaction_date, amount) VALUES
('T001', 101, '2025-04-01', 100),
('T002', 102, '2025-04-05', 150),
('T003', 101, '2025-04-01', 50),   -- Same day as T001
('T004', 103, '2025-04-10', 200),
('T005', 102, '2025-04-05', 75),   -- Same day as T002
('T006', 104, '2025-04-12', 300),
('T007', 103, '2025-04-11', 90),
('T008', 105, '2025-04-15', 180);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-------------+---------------------+--------------------+
| customer_id | first_transaction_date | last_transaction_date |
+-------------+---------------------+--------------------+
|    101      | 2025-04-01          | 2025-04-01         |
|    102      | 2025-04-05          | 2025-04-05         |
|    104      | 2025-04-12          | 2025-04-12         |
|    105      | 2025-04-15          | 2025-04-15         |
+-------------+---------------------+--------------------+

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------














