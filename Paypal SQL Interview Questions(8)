                                                                                  #  𝐏𝐚𝐲𝐩𝐚𝐥 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧𝐬
## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
 𝐐𝟏: 𝐅𝐢𝐧𝐚𝐥 𝐀𝐜𝐜𝐨𝐮𝐧𝐭 𝐁𝐚𝐥𝐚𝐧𝐜𝐞
𝐆𝐢𝐯𝐞𝐧 𝐚 𝐭𝐚𝐛𝐥𝐞 𝐜𝐨𝐧𝐭𝐚𝐢𝐧𝐢𝐧𝐠 𝐢𝐧𝐟𝐨𝐫𝐦𝐚𝐭𝐢𝐨𝐧 𝐚𝐛𝐨𝐮𝐭 𝐛𝐚𝐧𝐤 𝐝𝐞𝐩𝐨𝐬𝐢𝐭𝐬 𝐚𝐧𝐝 𝐰𝐢𝐭𝐡𝐝𝐫𝐚𝐰𝐚𝐥𝐬 𝐦𝐚𝐝𝐞 𝐮𝐬𝐢𝐧𝐠
𝐏𝐚𝐲𝐩𝐚𝐥, 𝐰𝐫𝐢𝐭𝐞 𝐚 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐫𝐞𝐭𝐫𝐢𝐞𝐯𝐞 𝐭𝐡𝐞 𝐟𝐢𝐧𝐚𝐥 𝐚𝐜𝐜𝐨𝐮𝐧𝐭 𝐛𝐚𝐥𝐚𝐧𝐜𝐞 𝐟𝐨𝐫 𝐞𝐚𝐜𝐡 𝐚𝐜𝐜𝐨𝐮𝐧𝐭, 𝐭𝐚𝐤𝐢𝐧𝐠 
𝐢𝐧𝐭𝐨 𝐚𝐜𝐜𝐨𝐮𝐧𝐭 𝐚𝐥𝐥 𝐭𝐡𝐞 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧𝐬 𝐫𝐞𝐜𝐨𝐫𝐝𝐞𝐝 𝐢𝐧 𝐭𝐡𝐞 𝐭𝐚𝐛𝐥𝐞 𝐰𝐢𝐭𝐡 𝐭𝐡𝐞 𝐚𝐬𝐬𝐮𝐦𝐩𝐭𝐢𝐨𝐧 𝐭𝐡𝐚𝐭
𝐭𝐡𝐞𝐫𝐞 𝐚𝐫𝐞 𝐧𝐨 𝐦𝐢𝐬𝐬𝐢𝐧𝐠 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧𝐬.𝐚𝐜𝐜𝐨𝐮𝐧𝐭.
*/

# 𝐓𝐚𝐛𝐥𝐞
CREATE DATABASE PayPal_;
USE PayPal_;

CREATE TABLE Transactions_ (
    transaction_id INT,
    account_id INT,
    amount DECIMAL(10, 2),
    transaction_type VARCHAR(20)
);

# 𝐒𝐚𝐦𝐩𝐥𝐞 𝐝𝐚𝐭𝐚
INSERT INTO Transactions_ (transaction_id, account_id, amount, transaction_type) VALUES
(123, 101, 10.00, 'Deposit'),
(124, 101, 20.00, 'Deposit'),
(125, 101, 5.00, 'Withdrawal'),
(126, 201, 20.00, 'Deposit'),
(128, 201, 10.00, 'Withdrawal');

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭

+------------+-----------------+
| account_id | final_balance   |
+------------+-----------------+
| 101        | 50.00           |
+------------+-----------------+
| 201        | 20.00           |
+------------+-----------------+

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
  𝐐𝟐) 𝐀𝐬 𝐚 𝐝𝐚𝐭𝐚 𝐬𝐜𝐢𝐞𝐧𝐭𝐢𝐬𝐭 𝐚𝐭 𝐏𝐚𝐲𝐏𝐚𝐥, 𝐲𝐨𝐮 𝐡𝐚𝐯𝐞 𝐛𝐞𝐞𝐧 𝐚𝐬𝐤𝐞𝐝 𝐭𝐨 𝐰𝐫𝐢𝐭𝐞 𝐚 𝐒𝐐𝐋 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 
𝐚𝐧𝐚𝐥𝐲𝐳𝐞 𝐭𝐡𝐞 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧 𝐡𝐢𝐬𝐭𝐨𝐫𝐲 𝐨𝐟 𝐏𝐚𝐲𝐏𝐚𝐥 𝐮𝐬𝐞𝐫𝐬. 𝐒𝐩𝐞𝐜𝐢𝐟𝐢𝐜𝐚𝐥𝐥𝐲, 𝐦𝐚𝐧𝐚𝐠𝐞𝐦𝐞𝐧𝐭
𝐰𝐚𝐧𝐭𝐬 𝐭𝐨 𝐤𝐧𝐨𝐰 𝐭𝐡𝐞 𝐚𝐯𝐞𝐫𝐚𝐠𝐞 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧 𝐚𝐦𝐨𝐮𝐧𝐭 𝐟𝐨𝐫 𝐞𝐚𝐜𝐡 𝐮𝐬𝐞𝐫, 𝐚𝐧𝐝 𝐡𝐨𝐰 𝐭𝐡𝐞𝐲 
𝐫𝐚𝐧𝐤 𝐛𝐚𝐬𝐞𝐝 𝐨𝐧 𝐭𝐡𝐞𝐢𝐫 𝐚𝐯𝐞𝐫𝐚𝐠𝐞𝐬. 𝐅𝐨𝐫 𝐭𝐡𝐢𝐬 𝐭𝐚𝐬𝐤:

           -- 𝐂𝐚𝐥𝐜𝐮𝐥𝐚𝐭𝐞 𝐭𝐡𝐞 𝐚𝐯𝐞𝐫𝐚𝐠𝐞 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧 𝐚𝐦𝐨𝐮𝐧𝐭 𝐟𝐨𝐫 𝐞𝐯𝐞𝐫𝐲 𝐮𝐬𝐞𝐫
           -- 𝐑𝐚𝐧𝐤 𝐭𝐡𝐞 𝐮𝐬𝐞𝐫𝐬 𝐛𝐲 𝐭𝐡𝐞𝐢𝐫 𝐚𝐯𝐞𝐫𝐚𝐠𝐞 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧 𝐚𝐦𝐨𝐮𝐧𝐭 𝐢𝐧 𝐝𝐞𝐬𝐜𝐞𝐧𝐝𝐢𝐧𝐠 𝐨𝐫𝐝𝐞𝐫

𝐍𝐨𝐭𝐞: 𝐖𝐡𝐞𝐧 𝐭𝐡𝐞 𝐬𝐚𝐦𝐞 𝐚𝐯𝐞𝐫𝐚𝐠𝐞 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧 𝐚𝐦𝐨𝐮𝐧𝐭 𝐢𝐬 𝐟𝐨𝐮𝐧𝐝 𝐟𝐨𝐫 𝐦𝐮𝐥𝐭𝐢𝐩𝐥𝐞 𝐮𝐬𝐞𝐫𝐬,
𝐭𝐡𝐞𝐲 𝐬𝐡𝐨𝐮𝐥𝐝 𝐡𝐚𝐯𝐞 𝐭𝐡𝐞 𝐬𝐚𝐦𝐞 𝐫𝐚𝐧𝐤. 𝐀𝐧𝐝 𝐭𝐡𝐞 𝐮𝐬𝐞𝐫 𝐰𝐢𝐭𝐡 𝐭𝐡𝐞 𝐧𝐞𝐱𝐭 𝐡𝐢𝐠𝐡𝐞𝐫 𝐚𝐯𝐞𝐫𝐚𝐠𝐞
𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧 𝐚𝐦𝐨𝐮𝐧𝐭 𝐬𝐡𝐨𝐮𝐥𝐝 𝐛𝐞 𝐠𝐢𝐯𝐞𝐧 𝐭𝐡𝐞 𝐫𝐚𝐧𝐤 𝐧𝐮𝐦𝐛𝐞𝐫 𝐰𝐡𝐢𝐜𝐡 𝐜𝐨𝐦𝐞𝐬
𝐚𝐟𝐭𝐞𝐫 𝐭𝐡𝐞 𝐜𝐨𝐧𝐬𝐞𝐜𝐮𝐭𝐢𝐯𝐞 𝐫𝐚𝐧𝐤.
*/

## 𝐓𝐚𝐛𝐥𝐞

Create the 'transactions' table
CREATE TABLE transactions_data (
    transaction_id INT PRIMARY KEY,
    user_id INT,
    transaction_date DATE,
    amount DECIMAL(10, 2)
);

## 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚 
INSERT INTO transactions_data (transaction_id, user_id, transaction_date, amount)
VALUES 
(1, 1000, '2021-01-25', 50.00),
(2, 1000, '2021-03-02', 150.00),
(3, 2000, '2021-03-04', 300.00),
(4, 3000, '2021-04-15', 100.00),
(5, 2000, '2021-04-18', 200.00),
(6, 3000, '2021-05-05', 100.00),
(7, 4000, '2021-05-10', 500.00);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+---------+-------------------------+
| user_id | avg_transaction_amount  |
+---------+-------------------------+
| 1000    | 100.00                  |
+---------+-------------------------+
| 2000    | 250.00                  |
+---------+-------------------------+
| 3000    | 100.00                  |
+---------+-------------------------+
| 4000    | 500.00                  |
+---------+-------------------------+

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/*
  𝐐𝟑) 𝐃𝐞𝐭𝐞𝐫𝐦𝐢𝐧𝐢𝐧𝐠 𝐇𝐢𝐠𝐡-𝐕𝐚𝐥𝐮𝐞 𝐂𝐮𝐬𝐭𝐨𝐦𝐞𝐫𝐬
*/

## 𝐓𝐚𝐛𝐥𝐞
Create the User table

CREATE TABLE Users (
    user_id INT PRIMARY KEY,
    username VARCHAR(50),
    is_fraudulent BIT  -- Using BIT for true/false representation in MS SQL
);
## 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚 
Insert data into Users table
INSERT INTO Users (user_id, username, is_fraudulent) VALUES
(123, 'Jessica', 0),
(265, 'Daniel', 1),
(362, 'Michael', 0),
(981, 'Sophia', 0);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+---------+----------+-------------+
| user_id | username | total_spent |
+---------+----------+-------------+
| 2000    | NULL     | 500.00      |
| 4000    | NULL     | 500.00      |
+---------+----------+-------------+

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/* 𝐐𝟒)𝐒𝐮𝐩𝐩𝐨𝐬𝐞 𝐲𝐨𝐮 𝐚𝐫𝐞 𝐚 𝐝𝐚𝐭𝐚 𝐚𝐧𝐚𝐥𝐲𝐬𝐭 𝐚𝐭 𝐏𝐚𝐲𝐏𝐚𝐥, 𝐚𝐧𝐝 𝐲𝐨𝐮 𝐡𝐚𝐯𝐞 𝐛𝐞𝐞𝐧 𝐚𝐬𝐤𝐞𝐝 𝐭𝐨 𝐜𝐫𝐞𝐚𝐭𝐞
𝐚 𝐫𝐞𝐩𝐨𝐫𝐭 𝐭𝐡𝐚𝐭 𝐢𝐝𝐞𝐧𝐭𝐢𝐟𝐢𝐞𝐬 𝐚𝐥𝐥 𝐮𝐬𝐞𝐫𝐬 𝐰𝐡𝐨 𝐡𝐚𝐯𝐞 𝐬𝐞𝐧𝐭 𝐩𝐚𝐲𝐦𝐞𝐧𝐭𝐬 𝐨𝐟 𝐦𝐨𝐫𝐞 𝐭𝐡𝐚𝐧
𝟏𝟎𝟎𝟎 𝐨𝐫 𝐡𝐚𝐯𝐞 𝐫𝐞𝐜𝐞𝐢𝐯𝐞𝐝 𝐩𝐚𝐲𝐦𝐞𝐧𝐭𝐬 𝐨𝐟 𝐦𝐨𝐫𝐞 𝐭𝐡𝐚𝐧 𝟓𝟎𝟎𝟎 , 𝐖𝐞 𝐰𝐚𝐧𝐭 𝐭𝐨 𝐟𝐢𝐥𝐭𝐞𝐫 𝐨𝐮𝐭 𝐚𝐧𝐲 𝐮𝐬𝐞𝐫 𝐰𝐡𝐨𝐬𝐞 
𝐚𝐜𝐜𝐨𝐮𝐧𝐭 𝐢𝐬 𝐟𝐥𝐚𝐠𝐠𝐞𝐝 𝐚𝐬 "𝐟𝐫𝐚𝐮𝐝𝐮𝐥𝐞𝐧𝐭".
*/
## 𝐓𝐚𝐛𝐥𝐞
Create the Transactions table

CREATE TABLE Transactions_amount (
    transaction_id INT PRIMARY KEY,
    user_id INT,
    transaction_date DATETIME,
    transaction_type VARCHAR(20),
    amount DECIMAL(10, 2),
    FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

## 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚 
Insert data into Transactions table
INSERT INTO Transactions_amount (transaction_id, user_id, transaction_date, transaction_type, amount) VALUES
(101, 123, '2022-07-08 00:00:00', 'Sent', 750),
(102, 265, '2022-07-10 00:00:00', 'Received', 6000),
(103, 265, '2022-07-18 00:00:00', 'Sent', 1500),
(104, 362, '2022-07-26 00:00:00', 'Received', 6000),
(105, 981, '2022-07-05 00:00:00', 'Sent', 3000);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+---------+----------+---------------+-----------------+---------+
| user_id | username | is_fraudulent | transaction_type| amount  |
+---------+----------+---------------+-----------------+---------+
| 362     | Michael  | 0             | Received        | 6000.00 |
+---------+----------+---------------+-----------------+---------+
| 981     | Sophia   | 0             | Sent            | 3000.00 |
+---------+----------+---------------+-----------------+---------+

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟓:𝐀𝐬 𝐚 𝐝𝐚𝐭𝐚 𝐚𝐧𝐚𝐥𝐲𝐬𝐭 𝐚𝐭 𝐏𝐚𝐲𝐏𝐚𝐥, 𝐲𝐨𝐮𝐫 𝐭𝐚𝐬𝐤 𝐢𝐬 𝐭𝐨 𝐢𝐝𝐞𝐧𝐭𝐢𝐟𝐲 𝐭𝐡𝐞 𝐩𝐫𝐨𝐝𝐮𝐜𝐭𝐬 𝐰𝐡𝐢𝐜𝐡 𝐠𝐞𝐧𝐞𝐫𝐚𝐭𝐞
𝐭𝐡𝐞 𝐡𝐢𝐠𝐡𝐞𝐬𝐭 𝐭𝐨𝐭𝐚𝐥 𝐫𝐞𝐯𝐞𝐧𝐮𝐞 𝐟𝐨𝐫 𝐞𝐚𝐜𝐡 𝐦𝐨𝐧𝐭𝐡. 𝐀𝐬𝐬𝐮𝐦𝐞 𝐭𝐡𝐚𝐭 𝐞𝐚𝐜𝐡 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧 𝐨𝐧 
𝐏𝐚𝐲𝐏𝐚𝐥 𝐫𝐞𝐥𝐚𝐭𝐞𝐬 𝐭𝐨 𝐚 𝐩𝐫𝐨𝐝𝐮𝐜𝐭 𝐩𝐮𝐫𝐜𝐡𝐚𝐬𝐞𝐝, 𝐚𝐧𝐝 𝐭𝐡𝐞 𝐫𝐞𝐯𝐞𝐧𝐮𝐞 𝐠𝐞𝐧𝐞𝐫𝐚𝐭𝐞𝐝 𝐢𝐬 𝐭𝐡𝐞 
𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧 𝐚𝐦𝐨𝐮𝐧𝐭. 𝐄𝐚𝐜𝐡 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧 𝐢𝐬 𝐭𝐢𝐦𝐞𝐬𝐭𝐚𝐦𝐩𝐞𝐝, 𝐚𝐧𝐝 𝐭𝐡𝐞 𝐩𝐫𝐨𝐝𝐮𝐜𝐭 𝐈𝐃 𝐢𝐬 𝐚𝐥𝐬𝐨 𝐫𝐞𝐜𝐨𝐫𝐝𝐞𝐝.
*/

## 𝐓𝐚𝐛𝐥𝐞
CREATE TABLE Transactions_amount (
    transaction_id INT PRIMARY KEY,
    user_id INT,
    transaction_date DATETIME,
    transaction_type VARCHAR(20),
    amount DECIMAL(10, 2),
    FOREIGN KEY (user_id) REFERENCES Users(user_id)
);
## 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚 
Insert data into Transactions table
INSERT INTO Transactions_amount (transaction_id, user_id, transaction_date, transaction_type, amount) VALUES
(101, 123, '2022-07-08 00:00:00', 'Sent', 750),
(102, 265, '2022-07-10 00:00:00', 'Received', 6000),
(103, 265, '2022-07-18 00:00:00', 'Sent', 1500),
(104, 362, '2022-07-26 00:00:00', 'Received', 6000),
(105, 981, '2022-07-05 00:00:00', 'Sent', 3000);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+--------+---------+---------------+
| month_ | product | total_revenue |
+--------+---------+---------------+
| 6      | 50001   | 450.00        |
+--------+---------+---------------+
| 6      | 69852   | 200.00        |
+--------+---------+---------------+
| 7      | 69852   | 350.00        |
+--------+---------+---------------+

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟔: 𝐅𝐢𝐥𝐭𝐞𝐫 𝐏𝐚𝐲𝐏𝐚𝐥 𝐂𝐮𝐬𝐭𝐨𝐦𝐞𝐫 𝐑𝐞𝐜𝐨𝐫𝐝𝐬 𝐁𝐚𝐬𝐞𝐝 𝐨𝐧 𝐄𝐦𝐚𝐢𝐥 𝐃𝐨𝐦𝐚𝐢𝐧
*/

## 𝐓𝐚𝐛𝐥𝐞
CREATE TABLE customer (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(100),
    create_date DATE
);

## 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚 
INSERT INTO customer (customer_id, first_name, last_name, email, create_date) VALUES
(1, 'John', 'Doe', 'johndoe@gmail.com', '2022-01-01'),
(2, 'Jane', 'Smith', 'janesmith@paypal.com', '2022-02-01'),
(3, 'Max', 'Lee', 'maxlee@yahoo.com', '2022-02-01'),
(4, 'Abby', 'Chen', 'abbychen@paypal.com', '2022-03-01');


## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-------------+------------+-----------+---------------------+-------------+
| customer_id | first_name | last_name | email               | create_date |
+-------------+------------+-----------+---------------------+-------------+
| 2           | Jane       | Smith     | janesmith@paypal.com| 2022-02-01  |
+-------------+------------+-----------+---------------------+-------------+
| 4           | Abby       | Chen      | abbychen@paypal.com | 2022-03-01  |
+-------------+------------+-----------+---------------------+-------------+

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟕:𝐀𝐬 𝐚 𝐏𝐚𝐲𝐏𝐚𝐥 𝐝𝐚𝐭𝐚 𝐚𝐧𝐚𝐥𝐲𝐬𝐭, 𝐲𝐨𝐮 𝐚𝐫𝐞 𝐭𝐚𝐬𝐤𝐞𝐝 𝐰𝐢𝐭𝐡 𝐢𝐝𝐞𝐧𝐭𝐢𝐟𝐲𝐢𝐧𝐠 𝐮𝐬𝐞𝐫 𝐩𝐫𝐨𝐟𝐢𝐥𝐞𝐬 
𝐭𝐡𝐚𝐭 𝐰𝐞𝐫𝐞 𝐜𝐫𝐞𝐚𝐭𝐞𝐝 𝐰𝐢𝐭𝐡 𝐜𝐨𝐫𝐩𝐨𝐫𝐚𝐭𝐞 𝐞𝐦𝐚𝐢𝐥 𝐚𝐝𝐝𝐫𝐞𝐬𝐬𝐞𝐬, 𝐬𝐩𝐞𝐜𝐢𝐟𝐢𝐜𝐚𝐥𝐥𝐲
𝐭𝐡𝐨𝐬𝐞 𝐭𝐡𝐚𝐭 𝐞𝐧𝐝 𝐰𝐢𝐭𝐡 '@𝐩𝐚𝐲𝐩𝐚𝐥.𝐜𝐨𝐦'.
*/
## 𝐓𝐚𝐛𝐥𝐞
CREATE TABLE customer (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(100),
    create_date DATE
);

## 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚 
INSERT INTO customer (customer_id, first_name, last_name, email, create_date) VALUES
(1, 'John', 'Doe', 'johndoe@gmail.com', '2022-01-01'),
(2, 'Jane', 'Smith', 'janesmith@paypal.com', '2022-02-01'),
(3, 'Max', 'Lee', 'maxlee@yahoo.com', '2022-02-01'),
(4, 'Abby', 'Chen', 'abbychen@paypal.com', '2022-03-01');


## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-------------+------------+-----------+---------------------+-------------+
| customer_id | first_name | last_name | email               | create_date |
+-------------+------------+-----------+---------------------+-------------+
| 2           | Jane       | Smith     | janesmith@paypal.com| 2022-02-01  |
+-------------+------------+-----------+---------------------+-------------+
| 4           | Abby       | Chen      | abbychen@paypal.com | 2022-03-01  |
+-------------+------------+-----------+---------------------+-------------+

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟖:𝐀𝐧𝐚𝐥𝐲𝐳𝐢𝐧𝐠 𝐔𝐬𝐞𝐫 𝐓𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧 𝐃𝐚𝐭𝐚
𝐘𝐨𝐮'𝐫𝐞 𝐠𝐢𝐯𝐞𝐧 𝐭𝐰𝐨 𝐭𝐚𝐛𝐥𝐞𝐬 - "𝐔𝐬𝐞𝐫𝐬" 𝐚𝐧𝐝 "𝐓𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧𝐬". 𝐓𝐡𝐞 "𝐔𝐬𝐞𝐫𝐬" 𝐭𝐚𝐛𝐥𝐞 
𝐫𝐞𝐜𝐨𝐫𝐝𝐬 𝐏𝐚𝐲𝐏𝐚𝐥'𝐬 𝐮𝐬𝐞𝐫 𝐛𝐚𝐬𝐞. 𝐄𝐚𝐜𝐡 𝐫𝐨𝐰 𝐫𝐞𝐩𝐫𝐞𝐬𝐞𝐧𝐭𝐬 𝐚 𝐝𝐢𝐟𝐟𝐞𝐫𝐞𝐧𝐭 𝐮𝐬𝐞𝐫, 𝐚𝐧𝐝 𝐢𝐧𝐜𝐥𝐮𝐝𝐞𝐬
𝐟𝐢𝐞𝐥𝐝𝐬 𝐟𝐨𝐫 𝐭𝐡𝐞 𝐮𝐬𝐞𝐫_𝐢𝐝 𝐚𝐧𝐝 𝐬𝐢𝐠𝐧𝐮𝐩_𝐝𝐚𝐭𝐞. 𝐓𝐡𝐞 "𝐓𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧𝐬" 𝐭𝐚𝐛𝐥𝐞 𝐫𝐞𝐜𝐨𝐫𝐝𝐬 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧𝐬 
𝐦𝐚𝐝𝐞 𝐛𝐲 𝐭𝐡𝐞𝐬𝐞 𝐮𝐬𝐞𝐫𝐬. 𝐄𝐚𝐜𝐡 𝐫𝐨𝐰 𝐫𝐞𝐩𝐫𝐞𝐬𝐞𝐧𝐭𝐬 𝐚 𝐝𝐢𝐟𝐟𝐞𝐫𝐞𝐧𝐭 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧 𝐚𝐧𝐝 𝐢𝐧𝐜𝐥𝐮𝐝𝐞𝐬 
𝐟𝐢𝐞𝐥𝐝𝐬 𝐟𝐨𝐫 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧_𝐢𝐝, 𝐮𝐬𝐞𝐫_𝐢𝐝, 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧_𝐝𝐚𝐭𝐞 𝐚𝐧𝐝 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧_𝐚𝐦𝐨𝐮𝐧𝐭.

𝐖𝐫𝐢𝐭𝐞 𝐚 𝐒𝐐𝐋 𝐪𝐮𝐞𝐫𝐲 𝐭𝐡𝐚𝐭 𝐜𝐚𝐥𝐜𝐮𝐥𝐚𝐭𝐞𝐬 𝐭𝐡𝐞 𝐭𝐨𝐭𝐚𝐥 𝐚𝐧𝐝 𝐚𝐯𝐞𝐫𝐚𝐠𝐞 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧 𝐚𝐦𝐨𝐮𝐧𝐭 
𝐟𝐨𝐫 𝐚𝐥𝐥 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧𝐬 𝐟𝐨𝐫 𝐞𝐚𝐜𝐡 𝐮𝐬𝐞𝐫. 𝐈𝐧𝐜𝐥𝐮𝐝𝐞 𝐨𝐧𝐥𝐲 𝐮𝐬𝐞𝐫𝐬 𝐰𝐡𝐨 𝐡𝐚𝐯𝐞 𝐦𝐚𝐝𝐞 
𝐚𝐭 𝐥𝐞𝐚𝐬𝐭 𝐭𝐰𝐨 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧𝐬.
*/

## 𝐔𝐬𝐞𝐫𝐬 𝐓𝐚𝐛𝐥𝐞
Create Users table

CREATE TABLE Users_data (
    user_id INT PRIMARY KEY,
    signup_date DATE
);

## 𝐔𝐬𝐞𝐫𝐬 𝐭𝐚𝐛𝐥𝐞 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚 
Insert data into Users table

INSERT INTO Users_data (user_id, signup_date) VALUES
(1, '2020-01-30'),
(2, '2020-02-15'),
(3, '2020-03-20'),
(4, '2020-04-01');

## 𝐓𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧𝐬 𝐓𝐚𝐛𝐥𝐞
Create Transactions table

CREATE TABLE Transaction_details (
    transaction_id INT PRIMARY KEY,
    user_id INT,
    transaction_date DATE,
    transaction_amount DECIMAL(10, 2),
    FOREIGN KEY (user_id) REFERENCES Users_data(user_id)
);

## 𝐓𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧𝐬 𝐭𝐚𝐛𝐥𝐞 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚  
Insert data into Transactions table

INSERT INTO Transaction_details (transaction_id, user_id, transaction_date, transaction_amount) VALUES
(101, 1, '2020-02-01', 50.00),
(102, 1, '2020-02-02', 100.00),
(103, 2, '2020-02-20', 200.00),
(104, 2, '2020-02-25', 500.00),
(105, 3, '2020-03-25', 100.00),
(106, 4, '2020-05-05', 300.00);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+---------+--------------+------------+-------------------+
| user_id | total_amount | avg_amount | cnt_of_transactions|
+---------+--------------+------------+-------------------+
| 1       | 150.00       | 75.00      | 2                 |
+---------+--------------+------------+-------------------+
| 2       | 700.00       | 350.00     | 2                 |
+---------+--------------+------------+-------------------+















