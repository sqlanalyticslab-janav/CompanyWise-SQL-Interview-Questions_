                                                                                     # 𝐌𝐚𝐬𝐭𝐞𝐫𝐜𝐚𝐫𝐝 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧𝐬
## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟏:𝐂𝐚𝐥𝐜𝐮𝐥𝐚𝐭𝐞 𝐭𝐡𝐞 𝐏𝐫𝐨𝐝𝐮𝐜𝐭 𝐏𝐮𝐫𝐜𝐡𝐚𝐬𝐞 𝐏𝐚𝐭𝐭𝐞𝐫𝐧𝐬
*/


## 𝐓𝐚𝐛𝐥𝐞
CREATE DATABASE MasterCard;

USE MasterCard;

CREATE TABLE transactions (
    transaction_id INT PRIMARY KEY,
    customer_id INT,
    purchase_date DATE,
    amount DECIMAL(10, 2)
);

## 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚
INSERT INTO transactions (transaction_id, customer_id, purchase_date, amount) VALUES
(9153, 568, '2021-03-15', 120.00),
(1478, 859, '2021-04-24', 200.00),
(3491, 568, '2021-06-20', 180.00),
(2608, 859, '2021-07-08', 220.00),
(7083, 437, '2021-09-27', 80.00),
(3297, 568, '2021-12-18', 100.00);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-------------+----------------+------------+-----------------------+
| customer_id | total_purchases| total_spent| avg_spent_per_transaction |
+-------------+----------------+------------+-----------------------+
| 568         |       3        | 400.00     | 133.33                |
| 859         |       2        | 420.00     | 210.00                |
| 437         |       1        | 80.00      | 80.00                 |
+-------------+----------------+------------+-----------------------+

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/* 𝐐𝟐) 𝐌𝐚𝐬𝐭𝐞𝐫𝐜𝐚𝐫𝐝, 𝐛𝐞𝐢𝐧𝐠 𝐚 𝐠𝐥𝐨𝐛𝐚𝐥 𝐭𝐞𝐜𝐡𝐧𝐨𝐥𝐨𝐠𝐲 𝐜𝐨𝐦𝐩𝐚𝐧𝐲 𝐢𝐧 𝐭𝐡𝐞 𝐩𝐚𝐲𝐦𝐞𝐧𝐭𝐬 𝐢𝐧𝐝𝐮𝐬𝐭𝐫𝐲,
𝐥𝐢𝐤𝐞𝐥𝐲 𝐡𝐚𝐬 𝐯𝐚𝐬𝐭 𝐚𝐦𝐨𝐮𝐧𝐭𝐬 𝐨𝐟 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧 𝐝𝐚𝐭𝐚. 𝐇𝐞𝐫𝐞 𝐢𝐬 𝐚 𝐡𝐲𝐩𝐨𝐭𝐡𝐞𝐭𝐢𝐜𝐚𝐥 𝐬𝐢𝐭𝐮𝐚𝐭𝐢𝐨𝐧
𝐰𝐡𝐞𝐫𝐞 𝐲𝐨𝐮 𝐚𝐫𝐞 𝐚𝐬𝐤𝐞𝐝 𝐭𝐨 𝐚𝐧𝐚𝐥𝐲𝐳𝐞 𝐬𝐮𝐜𝐡 𝐝𝐚𝐭𝐚:

𝐆𝐢𝐯𝐞𝐧 𝐚 𝐭𝐚𝐛𝐥𝐞 "𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧𝐬" 𝐰𝐡𝐞𝐫𝐞 𝐞𝐚𝐜𝐡 𝐫𝐨𝐰 𝐫𝐞𝐩𝐫𝐞𝐬𝐞𝐧𝐭𝐬 𝐚 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧 𝐦𝐚𝐝𝐞
𝐛𝐲 𝐚 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫, 𝐲𝐨𝐮𝐫 𝐭𝐚𝐬𝐤 𝐢𝐬 𝐭𝐨 𝐰𝐫𝐢𝐭𝐞 𝐒𝐐𝐋 𝐪𝐮𝐞𝐫𝐲 𝐭𝐡𝐚𝐭 𝐰𝐢𝐥𝐥 𝐟𝐢𝐧𝐝 𝐭𝐡𝐞 𝐭𝐨𝐭𝐚𝐥 𝐧𝐮𝐦𝐛𝐞𝐫 
𝐨𝐟 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧𝐬 𝐚𝐧𝐝 𝐭𝐨𝐭𝐚𝐥 𝐚𝐦𝐨𝐮𝐧𝐭 𝐬𝐩𝐞𝐧𝐭 𝐩𝐞𝐫 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫 𝐟𝐨𝐫 𝐞𝐚𝐜𝐡 𝐪𝐮𝐚𝐫𝐭𝐞𝐫 𝐨𝐟 𝟐𝟎𝟐𝟏. 
𝐀𝐝𝐝𝐢𝐭𝐢𝐨𝐧𝐚𝐥𝐥𝐲, 𝐝𝐞𝐫𝐢𝐯𝐞 𝐭𝐡𝐞 𝐪𝐮𝐚𝐫𝐭𝐞𝐫 𝐨𝐯𝐞𝐫 𝐪𝐮𝐚𝐫𝐭𝐞𝐫 𝐠𝐫𝐨𝐰𝐭𝐡 𝐢𝐧 𝐭𝐨𝐭𝐚𝐥 𝐚𝐦𝐨𝐮𝐧𝐭 𝐬𝐩𝐞𝐧𝐭 𝐟𝐨𝐫 𝐞𝐚𝐜𝐡 𝐮𝐬𝐞𝐫.
*/


## 𝐓𝐚𝐛𝐥𝐞
CREATE DATABASE MasterCard;

USE MasterCard;

CREATE TABLE transactions (
    transaction_id INT PRIMARY KEY,
    customer_id INT,
    purchase_date DATE,
    amount DECIMAL(10, 2)
);

## 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚
INSERT INTO transactions (transaction_id, customer_id, purchase_date, amount) VALUES
(9153, 568, '2021-03-15', 120.00),
(1478, 859, '2021-04-24', 200.00),
(3491, 568, '2021-06-20', 180.00),
(2608, 859, '2021-07-08', 220.00),
(7083, 437, '2021-09-27', 80.00),
(3297, 568, '2021-12-18', 100.00);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+------------+-------------+-----------------+------------+-------------------+----------------------------+
| Quarter    | customer_id | transaction_count | total_spent | prev_quarter_spent | quarter_over_quarter_growth |
+------------+-------------+-----------------+------------+-------------------+----------------------------+
| Q1-2021    | 568         |        1        | 120.00     | 120.00            | 0.00                       |
| Q2-2021    | 568         |        1        | 180.00     | 120.00            | 50.00                      |
| Q4-2021    | 568         |        1        | 100.00     | 180.00            | -44.44                     |
| Q2-2021    | 859         |        1        | 200.00     | 200.00            | 0.00                       |
| Q3-2021    | 859         |        1        | 220.00     | 200.00            | 10.00                      |
| Q3-2021    | 437         |        1        | 80.00      | 80.00             | 0.00                       |
+------------+-------------+-----------------+------------+-------------------+----------------------------+

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/* 
𝐐𝟑)𝐄𝐦𝐩𝐥𝐨𝐲𝐞𝐞 𝐒𝐚𝐥𝐚𝐫𝐢𝐞𝐬 𝐇𝐢𝐠𝐡𝐞𝐫 𝐓𝐡𝐚𝐧 𝐓𝐡𝐞𝐢𝐫 𝐌𝐚𝐧𝐚𝐠𝐞𝐫
*/

## 𝐓𝐚𝐛𝐥𝐞
CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    name VARCHAR(100),
    salary DECIMAL(10, 2),
    department_id INT,
    manager_id INT NULL
);

## 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚
INSERT INTO employees (employee_id, name, salary, department_id, manager_id) VALUES
(1, 'Emma Thompson', 3800.00, 1, NULL),
(2, 'Daniel Rodriguez', 2230.00, 1, 10),
(3, 'Olivia Smith', 8000.00, 1, 8),
(4, 'Noah Johnson', 6800.00, 2, 8),
(5, 'Sophia Martinez', 1750.00, 1, 10),
(8, 'William Davis', 7000.00, 2, NULL),
(10, 'James Anderson', 4000.00, 1, NULL);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-------------+----------------+----------------+--------------+----------------+
| employee_id | employee_name  | employee_salary| manager_name | manager_salary |
+-------------+----------------+----------------+--------------+----------------+
| 3           | Olivia Smith   | 8000.00        | William Davis| 7000.00        |
| 4           | Noah Johnson   | 6800.00        | William Davis| 7000.00        | 
+-------------+----------------+----------------+--------------+----------------+

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/* 𝐐𝟒) 𝐈𝐦𝐚𝐠𝐢𝐧𝐞 𝐭𝐡𝐞𝐫𝐞 𝐰𝐚𝐬 𝐚 𝐭𝐚𝐛𝐥𝐞 𝐨𝐟 𝐌𝐚𝐬𝐭𝐞𝐫𝐜𝐚𝐫𝐝 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞 𝐬𝐚𝐥𝐚𝐫𝐲 𝐝𝐚𝐭𝐚. 𝐖𝐫𝐢𝐭𝐞 𝐚 
𝐒𝐐𝐋 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐟𝐢𝐧𝐝 𝐭𝐡𝐞 𝐞𝐦𝐩𝐥𝐨𝐲𝐞𝐞𝐬 𝐰𝐡𝐨 𝐞𝐚𝐫𝐧 𝐦𝐨𝐫𝐞 𝐭𝐡𝐚𝐧 𝐭𝐡𝐞𝐢𝐫 𝐨𝐰𝐧 𝐦𝐚𝐧𝐚𝐠𝐞𝐫.
*/

## 𝐓𝐚𝐛𝐥𝐞
CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    name VARCHAR(100),
    salary DECIMAL(10, 2),
    department_id INT,
    manager_id INT NULL
);


## 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚
INSERT INTO employees (employee_id, name, salary, department_id, manager_id) VALUES
(1, 'Emma Thompson', 3800.00, 1, NULL),
(2, 'Daniel Rodriguez', 2230.00, 1, 10),
(3, 'Olivia Smith', 8000.00, 1, 8),
(4, 'Noah Johnson', 6800.00, 2, 8),
(5, 'Sophia Martinez', 1750.00, 1, 10),
(8, 'William Davis', 7000.00, 2, NULL),
(10, 'James Anderson', 4000.00, 1, NULL);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-------------+---------------+
| employee_id | emp_name      |
+-------------+---------------+
| 3           | Olivia Smith  |
+-------------+---------------+

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟓: 𝐅𝐢𝐧𝐝 𝐭𝐡𝐞 𝐭𝐨𝐭𝐚𝐥 𝐚𝐦𝐨𝐮𝐧𝐭 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐞𝐝 𝐞𝐚𝐜𝐡 𝐝𝐚𝐲.
*/

## 𝐓𝐚𝐛𝐥𝐞
CREATE TABLE transactions_data (
    transaction_id INT PRIMARY KEY,
    card_number BIGINT,
    transaction_date DATETIME,
    amount DECIMAL(10, 2)
);

## 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚
INSERT INTO transactions_data (transaction_id, card_number, transaction_date, amount) VALUES
(456, 123456789, '2023-02-11 00:00:00', 250.75),
(981, 987654321, '2023-02-11 11:59:59', 350.00),
(325, 123456789, '2023-02-12 05:45:00', 125.00),
(170, 987654321, '2023-02-12 19:30:00', 260.10),
(215, 123456789, '2023-02-13 16:00:00', 400.50);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+------------+-------------+
| trans_date | total_amount|
+------------+-------------+
| 2023-02-11 | 600.75      |
| 2023-02-12 | 385.10      |
| 2023-02-13 | 400.50      |
+------------+-------------+

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟔: 𝐆𝐢𝐯𝐞𝐧 𝐚 𝐭𝐚𝐛𝐥𝐞 𝐧𝐚𝐦𝐞𝐝 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧𝐬 𝐭𝐡𝐚𝐭 𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫𝐬 𝐞𝐚𝐜𝐡 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧 𝐦𝐚𝐝𝐞 
𝐰𝐢𝐭𝐡 𝐚 𝐌𝐚𝐬𝐭𝐞𝐫𝐜𝐚𝐫𝐝, 𝐟𝐢𝐧𝐝 𝐭𝐡𝐞 𝐭𝐨𝐭𝐚𝐥 𝐚𝐦𝐨𝐮𝐧𝐭 𝐨𝐟 𝐦𝐨𝐧𝐞𝐲 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐞𝐝 𝐞𝐚𝐜𝐡 𝐝𝐚𝐲. 
*/

## 𝐓𝐚𝐛𝐥𝐞
CREATE TABLE transactions_data (
    transaction_id INT PRIMARY KEY,
    card_number BIGINT,
    transaction_date DATETIME,
    amount DECIMAL(10, 2)
);

## 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚
INSERT INTO transactions_data (transaction_id, card_number, transaction_date, amount) VALUES
(456, 123456789, '2023-02-11 00:00:00', 250.75),
(981, 987654321, '2023-02-11 11:59:59', 350.00),
(325, 123456789, '2023-02-12 05:45:00', 125.00),
(170, 987654321, '2023-02-12 19:30:00', 260.10),
(215, 123456789, '2023-02-13 16:00:00', 400.50);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+------------+-------------+
| transaction_date | total_amount |
+-----------------+-------------+
| 2023-02-11      | 600.75      |
| 2023-02-12      | 385.10      |
| 2023-02-13      | 400.50      |
+-----------------+-------------+

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟕: 𝐌𝐚𝐬𝐭𝐞𝐫𝐜𝐚𝐫𝐝 𝐰𝐚𝐧𝐭𝐬 𝐭𝐨 𝐦𝐨𝐧𝐢𝐭𝐨𝐫 𝐭𝐡𝐞 𝐚𝐜𝐭𝐢𝐯𝐢𝐭𝐲 𝐟𝐨𝐫 𝐚 𝐜𝐞𝐫𝐭𝐚𝐢𝐧 𝐜𝐚𝐭𝐞𝐠𝐨𝐫𝐲 𝐨𝐟 𝐜𝐚𝐫𝐝 𝐮𝐬𝐞𝐫𝐬.
𝐓𝐡𝐞 𝐮𝐬𝐞𝐫𝐬 𝐮𝐧𝐝𝐞𝐫 𝐭𝐡𝐞 𝐜𝐚𝐭𝐞𝐠𝐨𝐫𝐲 "𝐌𝐂_𝐆𝐎𝐋𝐃" 𝐡𝐚𝐯𝐞 𝐚𝐧 𝐮𝐧𝐝𝐞𝐫𝐬𝐜𝐨𝐫𝐞 (_) 𝐚𝐭 𝐭𝐡𝐞 𝐬𝐭𝐚𝐫𝐭 𝐨𝐟 
𝐭𝐡𝐞𝐢𝐫 𝐮𝐬𝐞𝐫_𝐢𝐝. 𝐓𝐡𝐞𝐲 𝐰𝐚𝐧𝐭 𝐲𝐨𝐮 𝐭𝐨 𝐟𝐢𝐥𝐭𝐞𝐫 𝐚𝐥𝐥 𝐭𝐡𝐞 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧𝐬 𝐫𝐞𝐜𝐨𝐫𝐝𝐬 𝐟𝐨𝐫 𝐭𝐡𝐞 𝐦𝐨𝐧𝐭𝐡
𝐨𝐟 𝐉𝐮𝐧𝐞 𝐟𝐫𝐨𝐦 𝐭𝐡𝐞𝐢𝐫 𝐝𝐚𝐭𝐚𝐛𝐚𝐬𝐞 𝐟𝐨𝐫 𝐭𝐡𝐢𝐬 𝐜𝐚𝐭𝐞𝐠𝐨𝐫𝐲 𝐨𝐟 𝐮𝐬𝐞𝐫𝐬 𝐰𝐡𝐨 𝐦𝐚𝐝𝐞
𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧𝐬 𝐨𝐟 𝐦𝐨𝐫𝐞 𝐭𝐡𝐚𝐧 𝐔𝐒𝐃 𝟓𝟎𝟎.
*/

## 𝐓𝐚𝐛𝐥𝐞
CREATE TABLE transaction_records (
    transaction_id INT PRIMARY KEY,
    user_id VARCHAR(50),
    transaction_date DATETIME,
    amount_usd DECIMAL(10, 2)
);

## 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚
INSERT INTO transaction_records (transaction_id, user_id, transaction_date, amount_usd) VALUES
(1234, '_MC_GOLD_001', '2022-06-05 10:30:00', 600.00),
(5678, '_MC_GOLD_002', '2022-06-15 16:30:00', 320.00),
(2467, 'MC_PLATINUM_003', '2022-06-20 11:00:00', 780.00),
(2355, '_MC_GOLD_001', '2022-06-25 14:30:00', 680.00),
(7654, 'MC_PLATINUM_004', '2022-06-30 09:45:00', 520.00);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-------------+-------------+
| user_id     | Total_amount|
+-------------+-------------+
| _MC_GOLD_001 | 1280.00    |
+-------------+-------------+

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟖:
𝐀𝐯𝐞𝐫𝐚𝐠𝐞 𝐓𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧 𝐕𝐚𝐥𝐮𝐞 𝐛𝐲 𝐂𝐮𝐬𝐭𝐨𝐦𝐞𝐫𝐬 𝐚𝐧𝐝 𝐏𝐚𝐲𝐦𝐞𝐧𝐭 𝐓𝐲𝐩𝐞
*/

## 𝐓𝐚𝐛𝐥𝐞
CREATE TABLE customer (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50)
);

## 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚
INSERT INTO customer (customer_id, first_name, last_name) VALUES
(1, 'John', 'Doe'),
(2, 'Jane', 'Smith'),
(3, 'Bob', 'Johnson');

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-------------+-----------+----------+--------------+--------------------+
| customer_id | first_name| last_name| payment_type | avg_transaction_value |
+-------------+-----------+----------+--------------+--------------------+
| 1           | John      | Doe      | Credit       | 100.00             |
| 1           | John      | Doe      | Debit        | 50.00              |
| 2           | Jane      | Smith    | Credit       | 200.00             |
| 2           | Jane      | Smith    | Debit        | 80.00              |
| 3           | Bob       | Johnson  | Credit       | 150.00             |
| 3           | Bob       | Johnson  | Debit        | 100.00             |
+-------------+-----------+----------+--------------+--------------------+

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟗:𝐌𝐚𝐬𝐭𝐞𝐫𝐜𝐚𝐫𝐝 𝐡𝐚𝐬 𝐭𝐰𝐨 𝐭𝐚𝐛𝐥𝐞𝐬, 𝐨𝐧𝐞 𝐢𝐬 𝐭𝐡𝐞 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫 𝐭𝐚𝐛𝐥𝐞 𝐭𝐡𝐚𝐭 𝐜𝐨𝐧𝐭𝐚𝐢𝐧𝐬 𝐢𝐧𝐟𝐨𝐫𝐦𝐚𝐭𝐢𝐨𝐧 
𝐚𝐛𝐨𝐮𝐭 𝐭𝐡𝐞 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫𝐬, 𝐚𝐧𝐝 𝐭𝐡𝐞 𝐨𝐭𝐡𝐞𝐫 𝐢𝐬 𝐭𝐡𝐞 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧 𝐭𝐚𝐛𝐥𝐞 𝐭𝐡𝐚𝐭
𝐜𝐨𝐧𝐭𝐚𝐢𝐧𝐬 𝐢𝐧𝐟𝐨𝐫𝐦𝐚𝐭𝐢𝐨𝐧 𝐚𝐛𝐨𝐮𝐭 𝐭𝐡𝐞 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧𝐬 𝐜𝐚𝐫𝐫𝐢𝐞𝐝 𝐨𝐮𝐭 𝐛𝐲 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫𝐬.

𝐖𝐫𝐢𝐭𝐞 𝐚 𝐒𝐐𝐋 𝐪𝐮𝐞𝐫𝐲 𝐭𝐨 𝐣𝐨𝐢𝐧 𝐭𝐡𝐞𝐬𝐞 𝐭𝐰𝐨 𝐭𝐚𝐛𝐥𝐞𝐬 𝐚𝐧𝐝 𝐟𝐢𝐧𝐝 𝐭𝐡𝐞 𝐚𝐯𝐞𝐫𝐚𝐠𝐞 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧
𝐯𝐚𝐥𝐮𝐞 𝐟𝐨𝐫 𝐞𝐚𝐜𝐡 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫 𝐛𝐚𝐬𝐞𝐝 𝐨𝐧 𝐭𝐡𝐞 𝐩𝐚𝐲𝐦𝐞𝐧𝐭 𝐭𝐲𝐩𝐞.
*/

## 𝐓𝐚𝐛𝐥𝐞
CREATE TABLE transaction_details (
    transaction_id INT PRIMARY KEY,
    customer_id INT FOREIGN KEY REFERENCES customer(customer_id),
    payment_type VARCHAR(50),
    transaction_value DECIMAL(10, 2)
);

## 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚
INSERT INTO transaction_details (transaction_id, customer_id, payment_type, transaction_value) VALUES
(101, 1, 'Credit Card', 250.00),
(102, 2, 'Debit Card', 300.00),
(103, 1, 'Credit Card', 450.00),
(104, 3, 'Debit Card', 200.00),
(105, 2, 'Credit Card', 150.00),
(106, 1, 'Debit Card', 300.00);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-------------+-----------+-----------+--------------+--------------------+
| customer_id | first_name| last_name | payment_type | avg_transaction_value |
+-------------+-----------+-----------+--------------+--------------------+
| 1           | John      | Doe       | Credit Card  | 350.00             |
| 1           | John      | Doe       | Debit Card   | 300.00             |
| 2           | Jane      | Smith     | Credit Card  | 150.00             |
| 2           | Jane      | Smith     | Debit Card   | 300.00             |
| 3           | Bob       | Johnson   | Debit Card   | 200.00             |
+-------------+-----------+-----------+--------------+--------------------+

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟏𝟎: 𝐅𝐢𝐥𝐭𝐞𝐫 𝐌𝐚𝐬𝐭𝐞𝐫𝐜𝐚𝐫𝐝 𝐂𝐮𝐬𝐭𝐨𝐦𝐞𝐫 𝐑𝐞𝐜𝐨𝐫𝐝𝐬
*/

## 𝐓𝐚𝐛𝐥𝐞
CREATE TABLE customer_data (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(100),
    country VARCHAR(50)
);

## 𝐒𝐚𝐦𝐩𝐥𝐞 𝐃𝐚𝐭𝐚
INSERT INTO customer_data (customer_id, customer_name, country) VALUES
(100, 'John Doe', 'USA'),
(101, 'Jane Smith', 'USA'),
(102, 'Roberto Martinez', 'Mexico'),
(103, 'Francois Dupont', 'France');

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-------------+------------------+---------+
| customer_id | customer_name    | country |
+-------------+------------------+---------+
| 100         | John Doe         | USA     |
| 102         | Roberto Martinez | Mexico  |
+-------------+------------------+---------+

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## 📌 𝐏𝐫𝐨𝐛𝐥𝐞𝐦 𝐒𝐭𝐚𝐭𝐞𝐦𝐞𝐧𝐭

/*
𝐐𝟏𝟏: 𝐀𝐬 𝐚𝐧 𝐚𝐧𝐚𝐥𝐲𝐬𝐭 𝐚𝐭 𝐌𝐚𝐬𝐭𝐞𝐫𝐜𝐚𝐫𝐝, 𝐲𝐨𝐮 𝐡𝐚𝐯𝐞 𝐚𝐜𝐜𝐞𝐬𝐬 𝐭𝐨 𝐚 𝐝𝐚𝐭𝐚𝐛𝐚𝐬𝐞 𝐭𝐡𝐚𝐭 𝐜𝐨𝐧𝐭𝐚𝐢𝐧𝐬 
𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫 𝐢𝐧𝐟𝐨𝐫𝐦𝐚𝐭𝐢𝐨𝐧. 𝐘𝐨𝐮 𝐡𝐚𝐯𝐞 𝐛𝐞𝐞𝐧 𝐚𝐬𝐤𝐞𝐝 𝐭𝐨 𝐫𝐞𝐭𝐫𝐢𝐞𝐯𝐞 𝐫𝐞𝐜𝐨𝐫𝐝𝐬 𝐨𝐟
𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫𝐬 𝐰𝐡𝐨 𝐚𝐫𝐞 𝐟𝐫𝐨𝐦 𝐔𝐒𝐀, 𝐡𝐚𝐯𝐞 𝐚𝐭 𝐥𝐞𝐚𝐬𝐭 𝐭𝐰𝐨 𝐝𝐢𝐟𝐟𝐞𝐫𝐞𝐧𝐭 𝐜𝐚𝐫𝐝𝐬 𝐰𝐢𝐭𝐡 𝐮𝐬
*/

## 𝐂𝐮𝐬𝐭𝐨𝐦𝐞𝐫 𝐭𝐚𝐛𝐥𝐞
CREATE TABLE customer_data (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(100),
    country VARCHAR(50)
);

## 𝐒𝐚𝐦𝐩𝐥𝐞 𝐝𝐚𝐭𝐚 𝐢𝐧𝐭𝐨 𝐜𝐮𝐬𝐭𝐨𝐦𝐞𝐫 𝐭𝐚𝐛𝐥𝐞
INSERT INTO customer_data (customer_id, customer_name, country) VALUES
(100, 'John Doe', 'USA'),
(101, 'Jane Smith', 'USA'),
(102, 'Roberto Martinez', 'Mexico'),
(103, 'Francois Dupont', 'France');


## 𝐂𝐚𝐫𝐝 𝐭𝐚𝐛𝐥𝐞
CREATE TABLE card (
    card_id INT PRIMARY KEY,
    customer_id INT FOREIGN KEY REFERENCES customer_data(customer_id),
    card_type VARCHAR(50)
);

## 𝐒𝐚𝐦𝐩𝐥𝐞 𝐝𝐚𝐭𝐚 𝐢𝐧𝐭𝐨 𝐜𝐚𝐫𝐝 𝐭𝐚𝐛𝐥𝐞
INSERT INTO card (card_id, customer_id, card_type) VALUES
(5001, 100, 'Mastercard Credit'),
(5002, 100, 'Mastercard Debit'),
(5003, 101, 'Mastercard Credit'),
(5004, 102, 'Mastercard Credit'),
(5005, 102, 'Mastercard Debit');

## 𝐓𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧 𝐭𝐚𝐛𝐥𝐞
CREATE TABLE transaction_ (
    transaction_id INT PRIMARY KEY,
    card_id INT FOREIGN KEY REFERENCES card(card_id),
    transaction_date DATETIME,
    amount DECIMAL(10, 2)
);

## 𝐒𝐚𝐦𝐩𝐥𝐞 𝐝𝐚𝐭𝐚 𝐢𝐧𝐭𝐨 𝐭𝐫𝐚𝐧𝐬𝐚𝐜𝐭𝐢𝐨𝐧 𝐭𝐚𝐛𝐥𝐞
INSERT INTO transaction_ (transaction_id, card_id, transaction_date, amount) VALUES
(90001, 5001, '2022-08-01 12:00:00', 100.00),
(90002, 5001, '2022-08-02 14:00:00', 250.00),
(90003, 5002, '2022-08-15 10:00:00', 600.00),
(90004, 5003, '2022-08-15 14:00:00', 100.00),
(90005, 5005, '2022-08-20 11:00:00', 50.00);

## ✅ 𝐄𝐱𝐩𝐞𝐜𝐭𝐞𝐝 𝐎𝐮𝐭𝐩𝐮𝐭
+-------------+------------------+---------+
| customer_id | customer_name    | country |
+-------------+------------------+---------+
| 100         | John Doe         | USA     |
| 102         | Roberto Martinez | Mexico  |
+-------------+------------------+---------+








